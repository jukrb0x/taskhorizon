import { InjectorService } from "@tsed/di";
import { Command } from "commander";
import { CommandMetadata } from "../interfaces/CommandMetadata";
import { CliHooks } from "./CliHooks";
import { ProjectPackageJson } from "./ProjectPackageJson";
export declare class CliService {
    readonly program: Command;
    reinstallAfterRun: boolean;
    protected pkg: any;
    protected injector: InjectorService;
    protected hooks: CliHooks;
    protected projectPkg: ProjectPackageJson;
    private commands;
    /**
     * Parse process.argv and runLifecycle action
     * @param argv
     */
    parseArgs(argv: string[]): Promise<void>;
    /**
     * Run lifecycle
     * @param cmdName
     * @param data
     */
    runLifecycle(cmdName: string, data?: any): Promise<void>;
    dispatch(cmdName: string, data: any): Promise<void>;
    exec(cmdName: string, ctx: any): Promise<any>;
    /**
     * Run prompt for a given command
     * @param cmdName
     * @param ctx Initial data
     */
    beforePrompt(cmdName: string, ctx?: any): Promise<any>;
    /**
     * Run prompt for a given command
     * @param cmdName
     * @param ctx Initial data
     */
    prompt(cmdName: string, ctx?: any): Promise<any>;
    /**
     * Run lifecycle
     * @param cmdName
     * @param ctx
     */
    getTasks(cmdName: string, ctx: any): Promise<any[]>;
    getPostInstallTasks(cmdName: string, ctx: any): Promise<any[]>;
    createCommand(metadata: CommandMetadata): any;
    private load;
    private mapContext;
    /**
     * Build command and sub-commands
     * @param provider
     */
    private build;
    /**
     * Build sub-command options
     * @param subCommand
     * @param options
     * @param allowUnknownOptions
     */
    private buildOption;
    private buildArguments;
}
