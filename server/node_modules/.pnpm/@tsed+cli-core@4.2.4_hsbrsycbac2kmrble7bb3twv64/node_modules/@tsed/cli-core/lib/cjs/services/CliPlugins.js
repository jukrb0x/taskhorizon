"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CliPlugins = void 0;
const tslib_1 = require("tslib");
const createTasksRunner_1 = require("../utils/createTasksRunner");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const di_1 = require("@tsed/di");
const CommandStoreKeys_1 = require("../domains/CommandStoreKeys");
const loadPlugins_1 = require("../utils/loadPlugins");
const CliHooks_1 = require("./CliHooks");
const NpmRegistryClient_1 = require("./NpmRegistryClient");
const ProjectPackageJson_1 = require("./ProjectPackageJson");
function mapPlugins({ package: { name, description = "", ...otherProps } }) {
    return {
        name: `${name} ${description}`.trim(),
        value: name,
        ...otherProps
    };
}
let CliPlugins = class CliPlugins {
    name;
    npmRegistryClient;
    injector;
    cliHooks;
    packageJson;
    async searchPlugins(keyword = "", options = {}) {
        const result = await this.npmRegistryClient.search(this.getKeyword(keyword), options);
        return result.filter(({ package: { name } }) => this.isPlugin(name)).map(mapPlugins);
    }
    async loadPlugins() {
        return (0, loadPlugins_1.loadPlugins)(this.injector);
    }
    addPluginsDependencies(ctx) {
        const plugins = Object.keys(this.packageJson.devDependencies).filter((name) => this.isPlugin(name));
        const tasks = plugins.map((plugin) => {
            return {
                title: `Run plugin '${chalk_1.default.cyan(plugin)}'`,
                task: () => this.cliHooks.emit(CommandStoreKeys_1.CommandStoreKeys.ADD, plugin, ctx)
            };
        });
        return [
            ...tasks,
            {
                title: "Install",
                task: (0, createTasksRunner_1.createSubTasks)(() => this.packageJson.install(ctx), { ...ctx, concurrent: false })
            }
        ];
    }
    getKeyword(keyword) {
        return `@${this.name}/cli-plugin-${this.cleanKeyword(keyword)}`;
    }
    cleanKeyword(keyword) {
        return keyword.replace(this.name, "").replace("@", "").replace("/", "").replace("cli-plugin-", "");
    }
    isPlugin(name) {
        return name.startsWith(`@${this.name}/cli-plugin`) || name.includes(`${this.name}-cli-plugin`);
    }
};
tslib_1.__decorate([
    (0, di_1.Constant)("name"),
    tslib_1.__metadata("design:type", String)
], CliPlugins.prototype, "name", void 0);
tslib_1.__decorate([
    (0, di_1.Inject)(),
    tslib_1.__metadata("design:type", NpmRegistryClient_1.NpmRegistryClient)
], CliPlugins.prototype, "npmRegistryClient", void 0);
tslib_1.__decorate([
    (0, di_1.Inject)(),
    tslib_1.__metadata("design:type", di_1.InjectorService)
], CliPlugins.prototype, "injector", void 0);
tslib_1.__decorate([
    (0, di_1.Inject)(),
    tslib_1.__metadata("design:type", CliHooks_1.CliHooks)
], CliPlugins.prototype, "cliHooks", void 0);
tslib_1.__decorate([
    (0, di_1.Inject)(),
    tslib_1.__metadata("design:type", ProjectPackageJson_1.ProjectPackageJson)
], CliPlugins.prototype, "packageJson", void 0);
CliPlugins = tslib_1.__decorate([
    (0, di_1.Injectable)()
], CliPlugins);
exports.CliPlugins = CliPlugins;
//# sourceMappingURL=CliPlugins.js.map