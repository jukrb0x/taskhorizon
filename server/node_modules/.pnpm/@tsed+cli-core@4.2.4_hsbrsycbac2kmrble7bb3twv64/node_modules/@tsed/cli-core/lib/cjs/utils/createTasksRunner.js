"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTasksRunner = exports.createSubTasks = exports.createTasks = void 0;
const listr2_1 = require("listr2");
const core_1 = require("@tsed/core");
const createInjector_1 = require("./createInjector");
class CustomLogger extends listr2_1.Logger {
    fail(message) {
        (0, createInjector_1.getLogger)()?.error("[FAIL]", message);
    }
    skip(message) {
        (0, createInjector_1.getLogger)()?.info("[SKIP]", message);
    }
    success(message) {
        (0, createInjector_1.getLogger)()?.info("[SUCCESS]", message);
    }
    data(message) {
        (0, createInjector_1.getLogger)()?.info("[DATA]", message);
    }
    start(message) {
        (0, createInjector_1.getLogger)()?.info("[START]", message);
    }
    title(message) {
        (0, createInjector_1.getLogger)()?.info("[TITLE]", message);
    }
    retry(message) {
        (0, createInjector_1.getLogger)()?.info("[RETRY]", message);
    }
    rollback(message) {
        (0, createInjector_1.getLogger)()?.info("[ROLLBACK]", message);
    }
}
function getOptions(ctx) {
    const useRawRenderer = !(!ctx.verbose && !process.env.CI);
    const rendererOptions = useRawRenderer
        ? {
            logger: CustomLogger
        }
        : {};
    return {
        ...ctx,
        rendererSilent: process.env.NODE_ENV === "test",
        rendererFallback: useRawRenderer,
        renderer: useRawRenderer ? "verbose" : "default",
        nonTTYRendererOptions: rendererOptions,
        rendererOptions
    };
}
function createTasks(tasks, ctx) {
    return new listr2_1.Listr(tasks, getOptions(ctx));
}
exports.createTasks = createTasks;
function createSubTasks(tasks, opts) {
    opts = getOptions(opts);
    return async (ctx, task) => {
        if ((0, core_1.isFunction)(tasks)) {
            tasks = await tasks(ctx, task);
        }
        return task.newListr(tasks, opts);
    };
}
exports.createSubTasks = createSubTasks;
function createTasksRunner(tasks, ctx) {
    return createTasks(tasks, ctx).run(ctx);
}
exports.createTasksRunner = createTasksRunner;
//# sourceMappingURL=createTasksRunner.js.map