{"version":3,"file":"streamToObservable.js","sourceRoot":"","sources":["../../../src/utils/streamToObservable.ts"],"names":[],"mappings":"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","sourcesContent":["import type {Stream} from \"stream\";\nimport {Observable} from \"rxjs\";\n\nfunction or(option: false | any, alternate: string, required?: boolean) {\n  const result = option === false ? false : option || alternate;\n\n  if ((required && !result) || (result && typeof result !== \"string\")) {\n    throw new TypeError(`${alternate}Event must be a string.`);\n  }\n\n  return result;\n}\n\nexport const streamToObservable = <Result = any>(stream: Stream, opts: any) => {\n  opts = opts || {};\n\n  let complete = false;\n  let dataListeners: any[] = [];\n  const awaited = opts.await;\n  const dataEvent = or(opts.dataEvent, \"data\", true);\n  const errorEvent = or(opts.errorEvent, \"error\");\n  const endEvent = or(opts.endEvent, \"end\");\n\n  function cleanup() {\n    complete = true;\n    dataListeners.forEach((listener) => {\n      stream.removeListener(dataEvent, listener);\n    });\n\n    (dataListeners as any) = null;\n  }\n\n  const completion = new Promise((resolve, reject) => {\n    function onEnd(result?: Result) {\n      if (awaited) {\n        awaited.then(resolve);\n      } else {\n        resolve(result);\n      }\n    }\n\n    if (endEvent) {\n      stream.once(endEvent, onEnd);\n    } else if (awaited) {\n      onEnd();\n    }\n\n    if (errorEvent) {\n      stream.once(errorEvent, reject);\n    }\n\n    if (awaited) {\n      awaited.catch(reject);\n    }\n  })\n    .catch((err) => {\n      cleanup();\n      throw err;\n    })\n    .then((result) => {\n      cleanup();\n      return result;\n    });\n\n  return new Observable<Result>((observer) => {\n    completion.then(observer.complete.bind(observer)).catch(observer.error.bind(observer));\n\n    if (complete) {\n      return;\n    }\n\n    const onData = (data: Result) => {\n      observer.next(data);\n    };\n\n    stream.on(dataEvent, onData);\n    dataListeners.push(onData);\n\n    return () => {\n      stream.removeListener(dataEvent, onData);\n\n      if (complete) {\n        return;\n      }\n\n      const idx = dataListeners.indexOf(onData);\n\n      if (idx !== -1) {\n        dataListeners.splice(idx, 1);\n      }\n    };\n  });\n};\n"]}