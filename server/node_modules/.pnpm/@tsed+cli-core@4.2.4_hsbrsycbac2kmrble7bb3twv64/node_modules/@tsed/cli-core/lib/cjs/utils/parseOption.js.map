{"version":3,"file":"parseOption.js","sourceRoot":"","sources":["../../../src/utils/parseOption.ts"],"names":[],"mappings":";;;AAEA,SAAgB,WAAW,CAAC,KAAU,EAAE,OAAqE;IAC3G,MAAM,EAAC,IAAI,EAAE,QAAQ,EAAE,YAAY,EAAC,GAAG,OAAO,CAAC;IAE/C,IAAI,IAAI,EAAE;QACR,QAAQ,IAAI,EAAE;YACZ,KAAK,MAAM;gBACT,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;gBACtB,MAAM;YACR,KAAK,OAAO,EAAE,oBAAoB;gBAChC,OAAO,IAAI,CAAC;YACd,KAAK,MAAM;gBACT,KAAK,GAAG,CAAC,KAAK,CAAC;gBACf,MAAM;YACR,KAAK,KAAK;gBACR,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,KAAa,EAAE,EAAE,CAAC,WAAW,CAAC,KAAK,EAAE,EAAC,IAAI,EAAE,QAAQ,EAAE,YAAY,EAAC,CAAC,CAAC,CAAC;gBACpG,MAAM;SACT;KACF;IAED,IAAI,OAAO,CAAC,YAAY,EAAE;QACxB,KAAK,GAAG,OAAO,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;KACrC;IAED,OAAO,KAAK,CAAC;AACf,CAAC;AAxBD,kCAwBC","sourcesContent":["import {Type} from \"@tsed/core\";\n\nexport function parseOption(value: any, options: {type?: Type<any>; itemType?: Type<any>; customParser?: any}) {\n  const {type, itemType, customParser} = options;\n\n  if (type) {\n    switch (type) {\n      case String:\n        value = String(value);\n        break;\n      case Boolean: // the flag is added\n        return true;\n      case Number:\n        value = +value;\n        break;\n      case Array:\n        value = value.split(\",\").map((value: string) => parseOption(value, {type: itemType, customParser}));\n        break;\n    }\n  }\n\n  if (options.customParser) {\n    value = options.customParser(value);\n  }\n\n  return value;\n}\n"]}