{"version":3,"file":"CliHttpClient.js","sourceRoot":"","sources":["../../../src/services/CliHttpClient.ts"],"names":[],"mappings":";;AAAA,OAAO,EAAC,MAAM,EAAE,UAAU,EAAC,MAAM,UAAU,CAAC;AAC5C,OAAO,KAAmC,MAAM,OAAO,CAAC;AACxD,OAAO,EAAC,WAAW,EAAC,MAAM,YAAY,CAAC;AACvC,OAAO,EAAC,SAAS,EAAC,MAAM,aAAa,CAAC;AACtC,OAAO,EAAC,aAAa,EAAC,MAAM,iBAAiB,CAAC;AAC9C,OAAO,EAAC,gBAAgB,EAAC,MAAM,oBAAoB,CAAC;AACpD,OAAO,EAAC,GAAG,EAAC,MAAM,KAAK,CAAC;AAQjB,IAAM,aAAa,qBAAnB,MAAM,aAAc,SAAQ,gBAAgB;IAEvC,aAAa,CAAgB;IAE7B,IAAI,CAAS;IAEvB,MAAM,CAAC,mBAAmB,CAAC,MAAW;QACpC,OAAO,SAAS,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC;IACxC,CAAC;IAED,KAAK,CAAC,OAAO;QACX,MAAM,IAAI,CAAC,aAAa,CAAC,oBAAoB,EAAE,CAAC;IAClD,CAAC;IAED,KAAK,CAAC,IAAI,CAA0B,QAAgB,EAAE,UAAgC,EAAE;QACtF,MAAM,EAAC,OAAO,EAAC,GAAG,MAAM,KAAK,CAAC,IAAI,CAAC,oBAAoB,CAAC,MAAM,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC,CAAC;QAEpF,OAAO,OAAc,CAAC;IACxB,CAAC;IAED,KAAK,CAAC,GAAG,CAAc,QAAgB,EAAE,UAAgC,EAAE;QACzE,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,KAAK,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC,CAAC;QAEpF,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IAC3C,CAAC;IAED,KAAK,CAAC,IAAI,CAAc,QAAgB,EAAE,UAAgC,EAAE;QAC1E,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,MAAM,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC,CAAC;QAErF,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IAC3C,CAAC;IAED,KAAK,CAAC,GAAG,CAAU,QAAgB,EAAE,UAAgC,EAAE;QACrE,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,KAAK,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC,CAAC;QAEpF,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IAC3C,CAAC;IAED,KAAK,CAAC,KAAK,CAAU,QAAgB,EAAE,UAAgC,EAAE;QACvE,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,OAAO,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC,CAAC;QAEtF,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IAC3C,CAAC;IAED,KAAK,CAAC,MAAM,CAAU,QAAgB,EAAE,UAAgC,EAAE;QACxE,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,QAAQ,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC,CAAC;QAEvF,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IAC3C,CAAC;IAES,oBAAoB,CAAC,MAAc,EAAE,QAAgB,EAAE,OAA6B;QAC5F,OAAO,GAAG;YACR,MAAM;YACN,GAAG,EAAE,CAAC,IAAI,CAAC,IAAI,IAAI,EAAE,CAAC,GAAG,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,IAAI,EAAE,EAAE,EAAE,CAAC;YAC9D,GAAG,OAAO;YACV,MAAM,EAAE,OAAO,CAAC,MAAM,IAAI,OAAO,CAAC,EAAE;YACpC,IAAI,EAAE,OAAO,CAAC,IAAI;YAClB,OAAO,EAAE;gBACP,cAAc,EAAE,kBAAkB;gBAClC,MAAM,EAAE,kBAAkB;gBAC1B,GAAG,CAAC,OAAO,CAAC,OAAO,IAAI,EAAE,CAAC;aAC3B;SACF,CAAC;QAEF,IAAI,CAAC,cAAc,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;QAEvC,OAAO,OAAO,CAAC;IACjB,CAAC;IAES,cAAc,CAAC,QAAgB,EAAE,OAA6B;QACtE,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC,QAAQ,CAAC,CAAC;QAE9B,IAAI,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,EAAE;YACjC,MAAM,QAAQ,GAAG,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;YAC/C,QAAQ,QAAQ,EAAE;gBAChB,KAAK,OAAO;oBACV,OAAO,CAAC,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;oBACtD,OAAO,CAAC,KAAK,GAAG,KAAK,CAAC;oBACtB,MAAM;gBACR,KAAK,MAAM;oBACT,OAAO,CAAC,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;oBACrD,OAAO,CAAC,KAAK,GAAG,KAAK,CAAC;oBACtB,MAAM;gBACR;oBACE,MAAM;aACT;SACF;IACH,CAAC;IAES,KAAK,CAAC,IAAI,CAAC,OAA2B;QAC9C,MAAM,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;QAEvC,IAAI;YACF,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC;gBAC3B,gBAAgB,EAAE,eAAa,CAAC,mBAAmB;gBACnD,GAAG,OAAO;aACX,CAAC,CAAC;YAEH,IAAI,CAAC,SAAS,CAAC,EAAC,SAAS,EAAE,GAAG,OAAO,EAAC,CAAC,CAAC;YAExC,OAAO,QAAQ,CAAC;SACjB;QAAC,OAAO,KAAK,EAAE;YACd,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,EAAC,SAAS,EAAE,GAAG,OAAO,EAAC,CAAC,CAAC;YAC7C,MAAM,KAAK,CAAC;SACb;IACH,CAAC;IAES,WAAW,CAAC,MAAW,EAAE,OAA6B;QAC9D,MAAM,EAAC,WAAW,EAAC,GAAG,OAAO,CAAC;QAE9B,MAAM,IAAI,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC;QAElD,OAAO,WAAW,CAAC,CAAC,CAAC,EAAC,IAAI,EAAE,OAAO,EAAE,MAAM,EAAE,OAAO,EAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IAC/D,CAAC;CACF,CAAA;AAjHC;IAAC,MAAM,EAAE;8BACgB,aAAa;oDAAC;AAF5B,aAAa;IADzB,UAAU,EAAE;GACA,aAAa,CAkHzB;SAlHY,aAAa","sourcesContent":["import {Inject, Injectable} from \"@tsed/di\";\nimport axios, {AxiosRequestConfig, Method} from \"axios\";\nimport {cleanObject} from \"@tsed/core\";\nimport {stringify} from \"querystring\";\nimport {CliProxyAgent} from \"./CliProxyAgent\";\nimport {CliHttpLogClient} from \"./CliHttpLogClient\";\nimport {URL} from \"url\";\n\nexport interface CliHttpClientOptions extends AxiosRequestConfig, Record<string, unknown> {\n  qs?: Record<string, unknown>;\n  withHeaders?: boolean;\n}\n\n@Injectable()\nexport class CliHttpClient extends CliHttpLogClient {\n  @Inject()\n  protected cliProxyAgent: CliProxyAgent;\n\n  protected host: string;\n\n  static getParamsSerializer(params: any) {\n    return stringify(cleanObject(params));\n  }\n\n  async $onInit() {\n    await this.cliProxyAgent.resolveProxySettings();\n  }\n\n  async head<T = Record<string, any>>(endpoint: string, options: CliHttpClientOptions = {}): Promise<T> {\n    const {headers} = await axios(this.getRequestParameters(\"HEAD\", endpoint, options));\n\n    return headers as any;\n  }\n\n  async get<T = unknown>(endpoint: string, options: CliHttpClientOptions = {}): Promise<T> {\n    const result = await this.send(this.getRequestParameters(\"GET\", endpoint, options));\n\n    return this.mapResponse(result, options);\n  }\n\n  async post<T = unknown>(endpoint: string, options: CliHttpClientOptions = {}): Promise<T> {\n    const result = await this.send(this.getRequestParameters(\"POST\", endpoint, options));\n\n    return this.mapResponse(result, options);\n  }\n\n  async put<T = any>(endpoint: string, options: CliHttpClientOptions = {}): Promise<T> {\n    const result = await this.send(this.getRequestParameters(\"PUT\", endpoint, options));\n\n    return this.mapResponse(result, options);\n  }\n\n  async patch<T = any>(endpoint: string, options: CliHttpClientOptions = {}): Promise<T> {\n    const result = await this.send(this.getRequestParameters(\"PATCH\", endpoint, options));\n\n    return this.mapResponse(result, options);\n  }\n\n  async delete<T = any>(endpoint: string, options: CliHttpClientOptions = {}): Promise<T> {\n    const result = await this.send(this.getRequestParameters(\"DELETE\", endpoint, options));\n\n    return this.mapResponse(result, options);\n  }\n\n  protected getRequestParameters(method: Method, endpoint: string, options: CliHttpClientOptions) {\n    options = {\n      method,\n      url: (this.host || \"\") + endpoint.replace(this.host || \"\", \"\"),\n      ...options,\n      params: options.params || options.qs,\n      data: options.data,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        ...(options.headers || {})\n      }\n    };\n\n    this.configureProxy(endpoint, options);\n\n    return options;\n  }\n\n  protected configureProxy(endpoint: string, options: CliHttpClientOptions) {\n    const url = new URL(endpoint);\n\n    if (this.cliProxyAgent.hasProxy()) {\n      const protocol = url.protocol.replace(\":\", \"\");\n      switch (protocol) {\n        case \"https\":\n          options.httpsAgent = this.cliProxyAgent.get(protocol);\n          options.proxy = false;\n          break;\n        case \"http\":\n          options.httpAgent = this.cliProxyAgent.get(protocol);\n          options.proxy = false;\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  protected async send(options: AxiosRequestConfig) {\n    const startTime = new Date().getTime();\n\n    try {\n      const response = await axios({\n        paramsSerializer: CliHttpClient.getParamsSerializer,\n        ...options\n      });\n\n      this.onSuccess({startTime, ...options});\n\n      return response;\n    } catch (error) {\n      this.onError(error, {startTime, ...options});\n      throw error;\n    }\n  }\n\n  protected mapResponse(result: any, options: CliHttpClientOptions) {\n    const {withHeaders} = options;\n\n    const data = !withHeaders ? result?.data : result;\n\n    return withHeaders ? {data, headers: result?.headers} : data;\n  }\n}\n"]}