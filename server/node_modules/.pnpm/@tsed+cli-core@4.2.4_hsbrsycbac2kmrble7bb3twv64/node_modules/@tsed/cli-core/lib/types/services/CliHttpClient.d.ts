import { AxiosRequestConfig, Method } from "axios";
import { CliProxyAgent } from "./CliProxyAgent";
import { CliHttpLogClient } from "./CliHttpLogClient";
export interface CliHttpClientOptions extends AxiosRequestConfig, Record<string, unknown> {
    qs?: Record<string, unknown>;
    withHeaders?: boolean;
}
export declare class CliHttpClient extends CliHttpLogClient {
    protected cliProxyAgent: CliProxyAgent;
    protected host: string;
    static getParamsSerializer(params: any): string;
    $onInit(): Promise<void>;
    head<T = Record<string, any>>(endpoint: string, options?: CliHttpClientOptions): Promise<T>;
    get<T = unknown>(endpoint: string, options?: CliHttpClientOptions): Promise<T>;
    post<T = unknown>(endpoint: string, options?: CliHttpClientOptions): Promise<T>;
    put<T = any>(endpoint: string, options?: CliHttpClientOptions): Promise<T>;
    patch<T = any>(endpoint: string, options?: CliHttpClientOptions): Promise<T>;
    delete<T = any>(endpoint: string, options?: CliHttpClientOptions): Promise<T>;
    protected getRequestParameters(method: Method, endpoint: string, options: CliHttpClientOptions): CliHttpClientOptions;
    protected configureProxy(endpoint: string, options: CliHttpClientOptions): void;
    protected send(options: AxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    protected mapResponse(result: any, options: CliHttpClientOptions): any;
}
