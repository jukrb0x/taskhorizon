{"version":3,"file":"CliHttpLogClient.js","sourceRoot":"","sources":["../../../src/services/CliHttpLogClient.ts"],"names":[],"mappings":"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","sourcesContent":["// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport querystring from \"querystring\";\nimport {Inject, Opts} from \"@tsed/di\";\nimport {Logger} from \"@tsed/logger\";\nimport {getValue} from \"@tsed/core\";\nimport {logToCurl} from \"../utils/logToCurl\";\n\nexport interface BaseLogClientOptions {\n  callee: string;\n}\n\nexport class CliHttpLogClient {\n  callee: string;\n\n  @Inject()\n  protected logger: Logger;\n\n  constructor(@Opts options: Partial<BaseLogClientOptions> = {}) {\n    this.callee = options.callee || \"http\";\n  }\n\n  protected onSuccess(options: Record<string, unknown>) {\n    return this.logger.debug({\n      ...this.formatLog(options),\n      status: \"OK\"\n    });\n  }\n\n  protected onError(error: any, options: any) {\n    const origin = this.errorMapper(error);\n    this.logger.warn({\n      ...this.formatLog(options),\n      status: \"KO\",\n      callee_code: origin.code,\n      callee_error: origin.message,\n      callee_request_qs: options.params && querystring.stringify(options.params),\n      callee_request_headers: options.headers,\n      callee_request_body: options.data && JSON.stringify(options.data),\n      callee_response_headers: origin.headers,\n      callee_response_body: origin.body && JSON.stringify(origin.body),\n      callee_response_request_id: origin.x_request_id,\n      curl: this.logToCurl(options)\n    });\n  }\n\n  protected logToCurl(options: any) {\n    return logToCurl(options);\n  }\n\n  protected getStatusCodeFromError(error: any) {\n    return getValue(error, \"response.status\", getValue(error, \"response.statusCode\", getValue(error, \"status\")));\n  }\n\n  protected getHeadersFromError(error: any) {\n    return getValue(error, \"response.headers\", getValue(error, \"headers\"));\n  }\n\n  protected getResponseBodyFromError(error: any) {\n    return getValue(error, \"response.data\", getValue(error, \"data\"));\n  }\n\n  protected formatLog(options: Record<string, any>) {\n    const {startTime, url, method} = options;\n    const {callee} = this;\n    const duration = new Date().getTime() - startTime;\n\n    return {\n      callee,\n      url,\n      method,\n      callee_qs: options.params && querystring.stringify(options.params),\n      duration: isNaN(duration) ? undefined : duration\n    };\n  }\n\n  protected errorMapper(error: Error) {\n    const statusCode = this.getStatusCodeFromError(error);\n    const headers = this.getHeadersFromError(error);\n    const body = this.getResponseBodyFromError(error);\n\n    return {\n      message: error.message || statusCode,\n      code: statusCode,\n      headers,\n      body,\n      x_request_id: getValue(error, \"response.headers.x-request-id\", getValue(error, \"headers.x-request-id\"))\n    };\n  }\n}\n"]}