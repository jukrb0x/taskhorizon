{"version":3,"file":"getPackageJson.js","sourceRoot":"","sources":["../../../src/utils/getPackageJson.ts"],"names":[],"mappings":"AACA,OAAO,SAAS,MAAM,aAAa,CAAC;AACpC,OAAO,EAAC,OAAO,EAAE,IAAI,EAAC,MAAM,MAAM,CAAC;AACnC,OAAO,EAAE,MAAM,UAAU,CAAC;AAE1B,SAAS,YAAY,CAAC,aAA4B;IAChD,OAAO,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,OAAO,EAAE,OAAO,CAAC,EAAE,cAAc,CAAC,CAAC,CAAC,CAAC;AAC1H,CAAC;AAED,SAAS,mBAAmB,CAAC,aAA4B;IACvD,OAAO;QACL,IAAI,EAAE,aAAa,CAAC,IAAI;QACxB,OAAO,EAAE,OAAO;QAChB,WAAW,EAAE,EAAE;QACf,OAAO,EAAE,EAAE;QACX,YAAY,EAAE,EAAE;QAChB,eAAe,EAAE,EAAE;KACpB,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,cAAc,CAAC,aAA4B;IACzD,IAAI,YAAY,CAAC,aAAa,CAAC,EAAE;QAC/B,MAAM,MAAM,GAAG,SAAS,CAAC,IAAI,CAAC;YAC5B,GAAG,EAAE,aAAa,CAAC,OAAO,EAAE,OAAO;SACpC,CAAC,CAAC;QAEH,IAAI,MAAM,IAAI,MAAM,CAAC,IAAI,EAAE;YACzB,MAAM,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YAErC,aAAa,CAAC,GAAG,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;YAE3C,MAAM,GAAG,GAAG,EAAE,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,EAAE,EAAC,QAAQ,EAAE,MAAM,EAAC,CAAC,CAAC;YAE7D,OAAO,EAAC,GAAG,mBAAmB,CAAC,aAAa,CAAC,EAAE,GAAG,GAAG,EAAQ,CAAC;SAC/D;KACF;IAED,OAAO,mBAAmB,CAAC,aAAa,CAAC,CAAC;AAC5C,CAAC","sourcesContent":["import {Configuration} from \"@tsed/di\";\nimport readPkgUp from \"read-pkg-up\";\nimport {dirname, join} from \"path\";\nimport Fs from \"fs-extra\";\n\nfunction useReadPkgUp(configuration: Configuration) {\n  return !(process.argv.includes(\"init\") && !Fs.existsSync(join(String(configuration.project?.rootDir), \"package.json\")));\n}\n\nfunction getEmptyPackageJson(configuration: Configuration) {\n  return {\n    name: configuration.name,\n    version: \"1.0.0\",\n    description: \"\",\n    scripts: {},\n    dependencies: {},\n    devDependencies: {}\n  };\n}\n\nexport function getPackageJson(configuration: Configuration) {\n  if (useReadPkgUp(configuration)) {\n    const result = readPkgUp.sync({\n      cwd: configuration.project?.rootDir\n    });\n\n    if (result && result.path) {\n      const pkgPath = dirname(result.path);\n\n      configuration.set(\"project.root\", pkgPath);\n\n      const pkg = Fs.readJsonSync(result.path, {encoding: \"utf8\"});\n\n      return {...getEmptyPackageJson(configuration), ...pkg} as any;\n    }\n  }\n\n  return getEmptyPackageJson(configuration);\n}\n"]}