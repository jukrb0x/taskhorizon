"use strict";
var CliCore_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CliCore = void 0;
const tslib_1 = require("tslib");
const di_1 = require("@tsed/di");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const commander_1 = require("commander");
const path_1 = require("path");
const update_notifier_1 = tslib_1.__importDefault(require("update-notifier"));
const CliConfiguration_1 = require("./services/CliConfiguration");
const CliPackageJson_1 = require("./services/CliPackageJson");
const CliService_1 = require("./services/CliService");
const ProjectPackageJson_1 = require("./services/ProjectPackageJson");
const createInjector_1 = require("./utils/createInjector");
const loadPlugins_1 = require("./utils/loadPlugins");
const CliError_1 = require("./domains/CliError");
const semver_1 = tslib_1.__importDefault(require("semver"));
function isHelpManual(argv) {
    return argv.includes("-h") || argv.includes("--help");
}
let CliCore = CliCore_1 = class CliCore {
    injector;
    cliService;
    static checkNodeVersion(wanted, id) {
        if (!semver_1.default.satisfies(process.version, wanted)) {
            console.log(chalk_1.default.red("You are using Node " +
                process.version +
                ", but this version of " +
                id +
                " requires Node " +
                wanted +
                ".\nPlease upgrade your Node version."));
            process.exit(1);
        }
        return this;
    }
    static async create(settings, module = CliCore_1) {
        const injector = this.createInjector(settings);
        settings.plugins && (await (0, loadPlugins_1.loadPlugins)(injector));
        await this.loadInjector(injector, module);
        await injector.emit("$onReady");
        return injector.get(CliCore_1);
    }
    static async bootstrap(settings, module = CliCore_1) {
        const cli = await this.create(settings, module);
        return cli.bootstrap();
    }
    static async loadInjector(injector, module = CliCore_1) {
        await injector.emit("$beforeInit");
        injector.addProvider(CliCore_1, {
            useClass: module
        });
        await injector.load();
        await injector.invoke(module);
        await injector.emit("$afterInit");
        injector.settings.set("loaded", true);
    }
    static updateNotifier(pkg) {
        (0, update_notifier_1.default)({ pkg, updateCheckInterval: 0 }).notify();
        return this;
    }
    static createInjector(settings) {
        const argv = settings.argv || process.argv;
        return (0, createInjector_1.createInjector)({
            ...settings,
            name: settings.name || "tsed",
            argv,
            project: {
                rootDir: this.getProjectRoot(argv),
                srcDir: "src",
                scriptsDir: "scripts",
                ...(settings.project || {})
            }
        });
    }
    static getProjectRoot(argv) {
        if (!isHelpManual(argv)) {
            const projectRoot = new commander_1.Command().option("-r, --root-dir <path>", "Project root directory").allowUnknownOption(true).parse(argv).opts().rootDir || "";
            return (0, path_1.resolve)((0, path_1.join)(process.cwd(), projectRoot));
        }
        return process.cwd();
    }
    async bootstrap() {
        try {
            await this.cliService.parseArgs(this.injector.settings.get("argv"));
        }
        catch (er) {
            throw new CliError_1.CliError({ origin: er, cli: this });
        }
        return this;
    }
};
tslib_1.__decorate([
    (0, di_1.Inject)(),
    tslib_1.__metadata("design:type", di_1.InjectorService)
], CliCore.prototype, "injector", void 0);
tslib_1.__decorate([
    (0, di_1.Inject)(),
    tslib_1.__metadata("design:type", CliService_1.CliService)
], CliCore.prototype, "cliService", void 0);
CliCore = CliCore_1 = tslib_1.__decorate([
    (0, di_1.Module)({
        imports: [CliPackageJson_1.CliPackageJson, ProjectPackageJson_1.ProjectPackageJson, CliService_1.CliService, CliConfiguration_1.CliConfiguration]
    })
], CliCore);
exports.CliCore = CliCore;
//# sourceMappingURL=CliCore.js.map