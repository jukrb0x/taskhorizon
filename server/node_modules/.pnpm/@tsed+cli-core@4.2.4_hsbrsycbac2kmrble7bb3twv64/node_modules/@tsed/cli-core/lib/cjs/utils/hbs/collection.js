"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.helpers = void 0;
const tslib_1 = require("tslib");
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
const handlebars_utils_1 = tslib_1.__importDefault(require("handlebars-utils"));
const object_1 = require("./object");
const array_1 = require("./array");
const forEach = array_1.helpers.forEach;
const forOwn = object_1.helpers.forOwn;
exports.helpers = {};
/**
 * Inline, subexpression, or block helper that returns true (or the block)
 * if the given collection is empty, or false (or the inverse block, if
 * supplied) if the colleciton is not empty.
 *
 * ```handlebars
 * <!-- array: [] -->
 * {{#isEmpty array}}AAA{{else}}BBB{{/isEmpty}}
 * <!-- results in: 'AAA' -->
 *
 * <!-- array: [] -->
 * {{isEmpty array}}
 * <!-- results in: true -->
 * ```
 * @param {Object} `collection`
 * @param {Object} `options`
 * @return {String}
 * @block
 * @api public
 */
exports.helpers.isEmpty = function (collection, options) {
    if (!handlebars_utils_1.default.isOptions(options)) {
        options = collection;
        return handlebars_utils_1.default.fn(true, this, options);
    }
    if (Array.isArray(collection) && !collection.length) {
        return handlebars_utils_1.default.fn(true, this, options);
    }
    const keys = Object.keys(collection);
    const isEmpty = typeof collection === "object" && !keys.length;
    return handlebars_utils_1.default.value(isEmpty, this, options);
};
/**
 * Block helper that iterates over an array or object. If
 * an array is given, `.forEach` is called, or if an object
 * is given, `.forOwn` is called, otherwise the inverse block
 * is returned.
 *
 * @param {Object|Array} `collection` The collection to iterate over
 * @param {Object} `options`
 * @return {String}
 * @block
 * @api public
 */
exports.helpers.iterate = function (collection, options) {
    if (Array.isArray(collection)) {
        return forEach.apply(null, [collection, options]);
    }
    if (handlebars_utils_1.default.isObject(collection)) {
        return forOwn.apply(null, [collection, options]);
    }
    return options.inverse(this);
};
//# sourceMappingURL=collection.js.map