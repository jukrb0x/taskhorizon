{"version":3,"file":"CliPlugins.js","sourceRoot":"","sources":["../../../src/services/CliPlugins.ts"],"names":[],"mappings":"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","sourcesContent":["import {createSubTasks} from \"../utils/createTasksRunner\";\nimport chalk from \"chalk\";\nimport {Constant, Inject, Injectable, InjectorService} from \"@tsed/di\";\nimport {CommandStoreKeys} from \"../domains/CommandStoreKeys\";\nimport {loadPlugins} from \"../utils/loadPlugins\";\nimport {CliHooks} from \"./CliHooks\";\nimport {NpmRegistryClient} from \"./NpmRegistryClient\";\nimport {ProjectPackageJson} from \"./ProjectPackageJson\";\n\nfunction mapPlugins({package: {name, description = \"\", ...otherProps}}: any) {\n  return {\n    name: `${name} ${description}`.trim(),\n    value: name,\n    ...otherProps\n  };\n}\n\n@Injectable()\nexport class CliPlugins {\n  @Constant(\"name\")\n  name: string;\n\n  @Inject()\n  private npmRegistryClient: NpmRegistryClient;\n\n  @Inject()\n  private injector: InjectorService;\n\n  @Inject()\n  private cliHooks: CliHooks;\n\n  @Inject()\n  private packageJson: ProjectPackageJson;\n\n  async searchPlugins(keyword = \"\", options: any = {}) {\n    const result = await this.npmRegistryClient.search(this.getKeyword(keyword), options);\n\n    return result.filter(({package: {name}}: any) => this.isPlugin(name)).map(mapPlugins);\n  }\n\n  async loadPlugins() {\n    return loadPlugins(this.injector);\n  }\n\n  addPluginsDependencies(ctx: any) {\n    const plugins = Object.keys(this.packageJson.devDependencies).filter((name) => this.isPlugin(name));\n\n    const tasks = plugins.map((plugin) => {\n      return {\n        title: `Run plugin '${chalk.cyan(plugin)}'`,\n        task: () => this.cliHooks.emit(CommandStoreKeys.ADD, plugin, ctx)\n      };\n    });\n\n    return [\n      ...tasks,\n      {\n        title: \"Install\",\n        task: createSubTasks(() => this.packageJson.install(ctx), {...ctx, concurrent: false})\n      }\n    ];\n  }\n\n  protected getKeyword(keyword: string) {\n    return `@${this.name}/cli-plugin-${this.cleanKeyword(keyword)}`;\n  }\n\n  protected cleanKeyword(keyword: string) {\n    return keyword.replace(this.name, \"\").replace(\"@\", \"\").replace(\"/\", \"\").replace(\"cli-plugin-\", \"\");\n  }\n\n  private isPlugin(name: any) {\n    return name.startsWith(`@${this.name}/cli-plugin`) || name.includes(`${this.name}-cli-plugin`);\n  }\n}\n"]}