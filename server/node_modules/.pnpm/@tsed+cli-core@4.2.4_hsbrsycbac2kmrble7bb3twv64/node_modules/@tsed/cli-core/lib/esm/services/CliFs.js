import { __decorate } from "tslib";
import { Injectable } from "@tsed/di";
import Fs from "fs-extra";
import { join } from "path";
import { normalizePath } from "@tsed/core";
let CliFs = class CliFs {
    raw = Fs;
    exists(path) {
        return this.raw.existsSync(path);
    }
    join(...args) {
        return normalizePath(join(...args));
    }
    async readFile(file, encoding) {
        return this.raw.readFile(file, encoding);
    }
    writeFileSync(path, data, options) {
        return this.raw.writeFileSync(path, data, options);
    }
    writeFile(file, data, options) {
        return this.raw.writeFile(file, data, options);
    }
    ensureDir(path, options) {
        return this.raw.ensureDir(path, options);
    }
    ensureDirSync(path, options) {
        return this.raw.ensureDirSync(path, options);
    }
    findUpFile(root, file) {
        return [join(root, file), join(root, "..", file), join(root, "..", "..", file), join(root, "..", "..", "..", file)].find((path) => this.exists(path));
    }
    async importModule(mod, root = process.cwd()) {
        try {
            if (process.env.NODE_ENV === "development") {
                return await import(mod);
            }
        }
        catch (er) { }
        const path = this.findUpFile(root, join("node_modules", mod));
        if (path) {
            return import(path);
        }
        return import(mod);
    }
};
CliFs = __decorate([
    Injectable()
], CliFs);
export { CliFs };
//# sourceMappingURL=CliFs.js.map