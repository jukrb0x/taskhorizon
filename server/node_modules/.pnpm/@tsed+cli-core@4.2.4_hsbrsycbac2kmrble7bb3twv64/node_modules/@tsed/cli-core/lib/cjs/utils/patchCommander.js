"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const commander_1 = require("commander");
function at(n) {
    // ToInteger() abstract op
    n = Math.trunc(n) || 0;
    // Allow negative indexing from the end
    if (n < 0)
        n += this.length;
    // OOB access is guaranteed to return undefined
    if (n < 0 || n >= this.length)
        return undefined;
    // Otherwise, this is just normal property access
    return this[n];
}
const TypedArray = Reflect.getPrototypeOf(Int8Array);
for (const C of [Array, String, TypedArray]) {
    if (C) {
        Object.defineProperty(C.prototype, "at", { value: at, writable: true, enumerable: false, configurable: true });
    }
}
const helpInformation = commander_1.Command.prototype.helpInformation;
function colorizeSection(str, section) {
    // eslint-disable-next-line prefer-const
    let [before, after] = str.split(section);
    after = after
        .split("\n")
        .map((line) => {
        if (!line.match(/(\w+):$/)) {
            const [cmd, ...rest] = line.trim().split(" ");
            if (!cmd.startsWith("-")) {
                return [" ", chalk_1.default.bold(chalk_1.default.blue(cmd)), ...rest].join(" ");
            }
        }
        return line;
    })
        .join("\n");
    return [before, after].join(chalk_1.default.green(section));
}
commander_1.Command.prototype.helpInformation = function help() {
    let str = helpInformation.call(this);
    if (str.includes("Commands:")) {
        str = colorizeSection(str, "Commands:");
    }
    if (str.includes("Arguments:")) {
        str = colorizeSection(str, "Arguments:");
    }
    return ("\n" +
        str
            .replace("Usage:", chalk_1.default.green("Usage:"))
            .replace("Options:", chalk_1.default.green("Options:"))
            .replace(/<(\w+)>/gi, `<${chalk_1.default.yellow("$1")}>`)
            .replace(/\[(\w+)]/gi, `[${chalk_1.default.cyan("$1")}]`) +
        "\n");
};
//# sourceMappingURL=patchCommander.js.map