"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CliFs = void 0;
const tslib_1 = require("tslib");
const di_1 = require("@tsed/di");
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const path_1 = require("path");
const core_1 = require("@tsed/core");
let CliFs = class CliFs {
    raw = fs_extra_1.default;
    exists(path) {
        return this.raw.existsSync(path);
    }
    join(...args) {
        return (0, core_1.normalizePath)((0, path_1.join)(...args));
    }
    async readFile(file, encoding) {
        return this.raw.readFile(file, encoding);
    }
    writeFileSync(path, data, options) {
        return this.raw.writeFileSync(path, data, options);
    }
    writeFile(file, data, options) {
        return this.raw.writeFile(file, data, options);
    }
    ensureDir(path, options) {
        return this.raw.ensureDir(path, options);
    }
    ensureDirSync(path, options) {
        return this.raw.ensureDirSync(path, options);
    }
    findUpFile(root, file) {
        return [(0, path_1.join)(root, file), (0, path_1.join)(root, "..", file), (0, path_1.join)(root, "..", "..", file), (0, path_1.join)(root, "..", "..", "..", file)].find((path) => this.exists(path));
    }
    async importModule(mod, root = process.cwd()) {
        try {
            if (process.env.NODE_ENV === "development") {
                return await Promise.resolve().then(() => tslib_1.__importStar(require(mod)));
            }
        }
        catch (er) { }
        const path = this.findUpFile(root, (0, path_1.join)("node_modules", mod));
        if (path) {
            return Promise.resolve().then(() => tslib_1.__importStar(require(path)));
        }
        return Promise.resolve().then(() => tslib_1.__importStar(require(mod)));
    }
};
CliFs = tslib_1.__decorate([
    (0, di_1.Injectable)()
], CliFs);
exports.CliFs = CliFs;
//# sourceMappingURL=CliFs.js.map