{"version":3,"file":"Renderer.js","sourceRoot":"","sources":["../../../src/services/Renderer.ts"],"names":[],"mappings":"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","sourcesContent":["import {isString} from \"@tsed/core\";\nimport {Configuration, Constant, Inject, Injectable} from \"@tsed/di\";\nimport Consolidate from \"consolidate\";\nimport {existsSync} from \"fs-extra\";\nimport normalizePath from \"normalize-path\";\nimport globby from \"globby\";\nimport {dirname, join, relative} from \"path\";\nimport {Observable} from \"rxjs\";\nimport {CliFs} from \"./CliFs\";\nimport \"../utils/hbs\";\nimport {insertImport} from \"../utils/renderer/insertImport\";\nimport {insertAfter} from \"../utils/renderer/insertAfter\";\n\nexport interface RenderOptions {\n  path: string;\n  templateDir: string;\n  rootDir: string;\n  output: string;\n  baseDir: string;\n  basename: string;\n}\n\nexport abstract class Renderer {\n  @Configuration()\n  protected configuration: Configuration;\n\n  @Constant(\"templateDir\")\n  templateDir: string;\n\n  @Inject()\n  fs: CliFs;\n\n  abstract get rootDir(): string;\n\n  async render(path: string, data: any, options: Partial<RenderOptions> = {}) {\n    const {output, templateDir, rootDir} = this.mapOptions(path, options);\n    let content = \"\";\n\n    const file = normalizePath(join(templateDir, path));\n\n    if (path.endsWith(\".hbs\")) {\n      content = await Consolidate.handlebars(file, data);\n    } else {\n      content = await this.fs.readFile(file, {encoding: \"utf8\"});\n    }\n\n    return this.write(content, {output, rootDir});\n  }\n\n  async renderAll(paths: (string | RenderOptions)[], data: any, options: Partial<RenderOptions> = {}) {\n    let count = 0;\n\n    const mapOptions = (opts: string | RenderOptions): Partial<RenderOptions> & {path: string} => {\n      if (isString(opts)) {\n        return {...options, path: opts};\n      }\n\n      return {\n        ...options,\n        ...opts\n      };\n    };\n\n    return new Observable((observer) => {\n      observer.next(`[${count}/${paths.length}] Rendering files...`);\n\n      const promises = paths\n        .filter(Boolean)\n        .map(mapOptions)\n        .map(async ({path, ...opts}) => {\n          await this.render(path, data, opts);\n\n          count++;\n          observer.next(`[${count}/${paths.length}] Rendering files...`);\n        });\n\n      Promise.all(promises)\n        .then(() => {\n          observer.next(`[${count}/${paths.length}] Rendering files...`);\n          observer.complete();\n        })\n        .catch((err) => {\n          observer.error(err);\n        });\n    });\n  }\n\n  async write(content: string, options: any) {\n    const {output, rootDir = this.rootDir} = options;\n    const outputFile = join(...[rootDir, output].filter(Boolean));\n\n    await this.fs.ensureDir(dirname(outputFile));\n\n    return this.fs.writeFile(outputFile, content, {encoding: \"utf8\"});\n  }\n\n  templateExists(path: string, options: Partial<RenderOptions> = {}) {\n    const {templateDir} = this.mapOptions(path, options);\n\n    return existsSync(join(templateDir, path));\n  }\n\n  async scan(pattern: string[], options: any = {}): Promise<string[]> {\n    const result = await globby(\n      pattern.map((s: string) => normalizePath(s)),\n      {\n        ...options,\n        objectMode: true,\n        cwd: this.rootDir\n      }\n    );\n\n    return result.map((entry) => entry.path);\n  }\n\n  relativeFrom(path: string) {\n    return relative(dirname(join(this.rootDir, path)), this.rootDir);\n  }\n\n  async update(path: string, actions: {type?: string; content: string; pattern?: RegExp}[]) {\n    path = join(this.rootDir, path);\n    if (!this.fs.exists(path)) {\n      return;\n    }\n\n    const content: string = actions.reduce((fileContent, action) => {\n      switch (action.type) {\n        case \"import\":\n          return insertImport(fileContent, action.content);\n        case \"insert-after\":\n          return insertAfter(fileContent, action.content, action.pattern!);\n        default:\n          break;\n      }\n\n      return fileContent;\n    }, await this.fs.readFile(path, {encoding: \"utf8\"}));\n\n    return this.fs.writeFile(path, content, {encoding: \"utf8\"});\n  }\n\n  protected mapOptions(path: string, options: Partial<RenderOptions>) {\n    const {templateDir = this.templateDir, rootDir = this.rootDir} = options;\n    let {output = path} = options;\n\n    if (options.baseDir) {\n      output = normalizePath(join(\"/\", relative(options.baseDir, path)));\n    }\n\n    if (options.basename) {\n      output = normalizePath(join(dirname(output), options.basename));\n    }\n\n    output = output.replace(/\\.hbs$/, \"\");\n\n    return {output, templateDir, rootDir};\n  }\n}\n\n@Injectable()\nexport class RootRendererService extends Renderer {\n  get rootDir() {\n    return this.configuration.project?.rootDir as string;\n  }\n}\n\n@Injectable()\nexport class SrcRendererService extends Renderer {\n  get rootDir() {\n    return join(...([this.configuration.project?.rootDir, this.configuration.project?.srcDir].filter(Boolean) as string[]));\n  }\n}\n\n@Injectable()\nexport class ScriptsRendererService extends Renderer {\n  get rootDir() {\n    return join(...([this.configuration.project?.rootDir, this.configuration.project?.scriptsDir].filter(Boolean) as string[]));\n  }\n}\n"]}