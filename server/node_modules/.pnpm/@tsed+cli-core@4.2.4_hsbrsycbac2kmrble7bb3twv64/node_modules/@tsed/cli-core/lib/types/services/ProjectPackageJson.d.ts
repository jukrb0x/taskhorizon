import { Configuration } from "@tsed/di";
import { PackageJson } from "../interfaces/PackageJson";
import { PackageManager, ProjectPreferences } from "../interfaces/ProjectPreferences";
import { CliExeca } from "./CliExeca";
import { CliFs } from "./CliFs";
import { Options } from "execa";
export interface InstallOptions {
    packageManager?: PackageManager;
    [key: string]: any;
}
export declare class ProjectPackageJson {
    private configuration;
    rewrite: boolean;
    reinstall: boolean;
    protected cliExeca: CliExeca;
    protected fs: CliFs;
    private GH_TOKEN;
    private raw;
    constructor(configuration: Configuration);
    get path(): string;
    get dir(): string;
    set dir(dir: string);
    get name(): string;
    set name(name: string);
    get version(): string;
    get description(): string;
    get scripts(): {
        [key: string]: string;
    };
    get dependencies(): {
        [key: string]: string;
    };
    get devDependencies(): {
        [key: string]: string;
    };
    get allDependencies(): {
        [key: string]: string;
    };
    get preferences(): ProjectPreferences;
    toJSON(): PackageJson;
    read(): this;
    setRaw(pkg: any): void;
    getRunCmd(): "npm run" | "pnpm run" | "yarn run";
    addDevDependency(pkg: string, version?: string): this;
    addDevDependencies(modules: {
        [key: string]: string | undefined;
    }, scope?: any): this;
    addDependency(pkg: string, version?: string): this;
    addDependencies(modules: {
        [key: string]: string | undefined;
    }, ctx?: any): this;
    addScript(task: string, cmd: string): this;
    addScripts(scripts: {
        [key: string]: string;
    }): this;
    add(key: string, data: any): this;
    setPreference(key: keyof ProjectPreferences, value: any): void;
    set(key: string, value: any): void;
    get(key: string): any;
    write(): this;
    hasYarn(): boolean;
    install(options?: InstallOptions): ({
        title: string;
        skip: () => boolean;
        task: () => any;
    } | {
        title: string;
        enabled: () => boolean;
        task: () => void;
    } | {
        title: string;
        task: () => void;
        enabled?: undefined;
    })[];
    /**
     * Import a module from the project workspace
     * @param mod
     */
    importModule(mod: string): Promise<any>;
    runScript(npmTask: string, { ignoreError, ...opts }?: {
        ignoreError?: boolean;
    } & Options & Record<string, any>): import("rxjs").Observable<unknown>;
    getPackageManager(packageManager?: PackageManager): PackageManager;
    setGhToken(GH_TOKEN: string): void;
    protected installWithYarn({ verbose }: any): {
        title: string;
        skip: () => boolean;
        task: () => import("rxjs").Observable<unknown>;
    }[];
    protected installWithNpm({ verbose }: any): {
        title: string;
        skip: () => boolean;
        task: () => import("rxjs").Observable<any>;
    }[];
    protected installWithPnpm({ verbose }: any): {
        title: string;
        skip: () => boolean;
        task: () => import("rxjs").Observable<any>;
    }[];
    protected getPackageJson(): any;
}
