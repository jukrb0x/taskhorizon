"use strict";
var CliHttpClient_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CliHttpClient = void 0;
const tslib_1 = require("tslib");
const di_1 = require("@tsed/di");
const axios_1 = tslib_1.__importDefault(require("axios"));
const core_1 = require("@tsed/core");
const querystring_1 = require("querystring");
const CliProxyAgent_1 = require("./CliProxyAgent");
const CliHttpLogClient_1 = require("./CliHttpLogClient");
const url_1 = require("url");
let CliHttpClient = CliHttpClient_1 = class CliHttpClient extends CliHttpLogClient_1.CliHttpLogClient {
    cliProxyAgent;
    host;
    static getParamsSerializer(params) {
        return (0, querystring_1.stringify)((0, core_1.cleanObject)(params));
    }
    async $onInit() {
        await this.cliProxyAgent.resolveProxySettings();
    }
    async head(endpoint, options = {}) {
        const { headers } = await (0, axios_1.default)(this.getRequestParameters("HEAD", endpoint, options));
        return headers;
    }
    async get(endpoint, options = {}) {
        const result = await this.send(this.getRequestParameters("GET", endpoint, options));
        return this.mapResponse(result, options);
    }
    async post(endpoint, options = {}) {
        const result = await this.send(this.getRequestParameters("POST", endpoint, options));
        return this.mapResponse(result, options);
    }
    async put(endpoint, options = {}) {
        const result = await this.send(this.getRequestParameters("PUT", endpoint, options));
        return this.mapResponse(result, options);
    }
    async patch(endpoint, options = {}) {
        const result = await this.send(this.getRequestParameters("PATCH", endpoint, options));
        return this.mapResponse(result, options);
    }
    async delete(endpoint, options = {}) {
        const result = await this.send(this.getRequestParameters("DELETE", endpoint, options));
        return this.mapResponse(result, options);
    }
    getRequestParameters(method, endpoint, options) {
        options = {
            method,
            url: (this.host || "") + endpoint.replace(this.host || "", ""),
            ...options,
            params: options.params || options.qs,
            data: options.data,
            headers: {
                "Content-Type": "application/json",
                Accept: "application/json",
                ...(options.headers || {})
            }
        };
        this.configureProxy(endpoint, options);
        return options;
    }
    configureProxy(endpoint, options) {
        const url = new url_1.URL(endpoint);
        if (this.cliProxyAgent.hasProxy()) {
            const protocol = url.protocol.replace(":", "");
            switch (protocol) {
                case "https":
                    options.httpsAgent = this.cliProxyAgent.get(protocol);
                    options.proxy = false;
                    break;
                case "http":
                    options.httpAgent = this.cliProxyAgent.get(protocol);
                    options.proxy = false;
                    break;
                default:
                    break;
            }
        }
    }
    async send(options) {
        const startTime = new Date().getTime();
        try {
            const response = await (0, axios_1.default)({
                paramsSerializer: CliHttpClient_1.getParamsSerializer,
                ...options
            });
            this.onSuccess({ startTime, ...options });
            return response;
        }
        catch (error) {
            this.onError(error, { startTime, ...options });
            throw error;
        }
    }
    mapResponse(result, options) {
        const { withHeaders } = options;
        const data = !withHeaders ? result?.data : result;
        return withHeaders ? { data, headers: result?.headers } : data;
    }
};
tslib_1.__decorate([
    (0, di_1.Inject)(),
    tslib_1.__metadata("design:type", CliProxyAgent_1.CliProxyAgent)
], CliHttpClient.prototype, "cliProxyAgent", void 0);
CliHttpClient = CliHttpClient_1 = tslib_1.__decorate([
    (0, di_1.Injectable)()
], CliHttpClient);
exports.CliHttpClient = CliHttpClient;
//# sourceMappingURL=CliHttpClient.js.map