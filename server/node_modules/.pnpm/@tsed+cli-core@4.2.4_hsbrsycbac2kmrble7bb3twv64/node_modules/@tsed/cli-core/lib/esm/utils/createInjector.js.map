{"version":3,"file":"createInjector.js","sourceRoot":"","sources":["../../../src/utils/createInjector.ts"],"names":[],"mappings":"AAAA,OAAO,EAAyB,eAAe,EAAC,MAAM,UAAU,CAAC;AACjE,OAAO,EAAC,MAAM,EAAC,MAAM,cAAc,CAAC;AACpC,OAAO,EAAC,gBAAgB,EAAC,MAAM,8BAA8B,CAAC;AAC9D,OAAO,EAAC,kBAAkB,EAAC,MAAM,gCAAgC,CAAC;AAElE,IAAI,MAAc,CAAC;AAEnB,MAAM,UAAU,SAAS;IACvB,OAAO,MAAM,CAAC;AAChB,CAAC;AAED,SAAS,mBAAmB,CAAC,QAAyB;IACpD,QAAQ,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC;IAEvC,OAAO,QAAQ,CAAC,MAAM,CAAwC,gBAAgB,CAAC,CAAC;AAClF,CAAC;AAED,MAAM,UAAU,cAAc,CAAC,WAA4C,EAAE;IAC3E,MAAM,QAAQ,GAAG,IAAI,eAAe,EAAE,CAAC;IACvC,QAAQ,CAAC,QAAQ,GAAG,mBAAmB,CAAC,QAAQ,CAAC,CAAC;IAClD,MAAM,GAAG,QAAQ,CAAC,MAAM,GAAG,IAAI,MAAM,CAAC,QAAQ,CAAC,IAAI,IAAI,KAAK,CAAC,CAAC;IAE9D,QAAQ,CAAC,WAAW,CAAC,kBAAkB,CAAC,CAAC;IAEzC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IAEhC,0BAA0B;IAC1B,IAAI,QAAQ,CAAC,QAAQ,CAAC,GAAG,KAAK,MAAM,EAAE;QACpC,QAAQ,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;KACxB;SAAM;QACL,0BAA0B;QAC1B,QAAQ,CAAC,MAAM,CAAC,KAAK,GAAG,QAAQ,CAAC,QAAQ,CAAC,MAAM,EAAE,KAAK,IAAI,MAAM,CAAC;QAClE,QAAQ,CAAC,MAAM,CAAC,SAAS;aACtB,GAAG,CAAC,QAAQ,EAAE;YACb,IAAI,EAAE,QAAQ;YACd,MAAM,EAAE;gBACN,IAAI,EAAE,SAAS;gBACf,OAAO,EAAE,mBAAmB;aAC7B;YACD,MAAM,EAAE,CAAC,MAAM,EAAE,OAAO,CAAC;SAC1B,CAAC;aACD,GAAG,CAAC,QAAQ,EAAE;YACb,IAAI,EAAE,QAAQ;YACd,MAAM,EAAE;gBACN,IAAI,EAAE,SAAS;gBACf,OAAO,EAAE,uBAAuB;aACjC;YACD,MAAM,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,CAAC;SAC5C,CAAC,CAAC;KACN;IAED,OAAO,QAAQ,CAAC;AAClB,CAAC","sourcesContent":["import {DIConfigurationOptions, InjectorService} from \"@tsed/di\";\nimport {Logger} from \"@tsed/logger\";\nimport {CliConfiguration} from \"../services/CliConfiguration\";\nimport {ProjectPackageJson} from \"../services/ProjectPackageJson\";\n\nlet logger: Logger;\n\nexport function getLogger() {\n  return logger;\n}\n\nfunction createConfiguration(injector: InjectorService): CliConfiguration & TsED.Configuration {\n  injector.addProvider(CliConfiguration);\n\n  return injector.invoke<CliConfiguration & TsED.Configuration>(CliConfiguration);\n}\n\nexport function createInjector(settings: Partial<DIConfigurationOptions> = {}) {\n  const injector = new InjectorService();\n  injector.settings = createConfiguration(injector);\n  logger = injector.logger = new Logger(settings.name || \"CLI\");\n\n  injector.addProvider(ProjectPackageJson);\n\n  injector.settings.set(settings);\n\n  /* istanbul ignore next */\n  if (injector.settings.env === \"test\") {\n    injector.logger.stop();\n  } else {\n    /* istanbul ignore next */\n    injector.logger.level = injector.settings.logger?.level || \"warn\";\n    injector.logger.appenders\n      .set(\"stdout\", {\n        type: \"stdout\",\n        layout: {\n          type: \"pattern\",\n          pattern: \"[%d{hh:mm:ss}] %m\"\n        },\n        levels: [\"info\", \"debug\"]\n      })\n      .set(\"stderr\", {\n        type: \"stderr\",\n        layout: {\n          type: \"pattern\",\n          pattern: \"[%d{hh:mm:ss}][%p] %m\"\n        },\n        levels: [\"trace\", \"fatal\", \"error\", \"warn\"]\n      });\n  }\n\n  return injector;\n}\n"]}