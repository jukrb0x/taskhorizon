import { __decorate, __metadata } from "tslib";
import { Inject, Injectable } from "@tsed/di";
import { extname } from "path";
import Ajv from "ajv";
import { CliYaml } from "./CliYaml.js";
import { CliFs } from "./CliFs.js";
let CliLoadFile = class CliLoadFile {
    cliYaml;
    cliFs;
    #ajv;
    constructor() {
        const options = {
            verbose: false,
            coerceTypes: true,
            strict: false
        };
        this.#ajv = new Ajv(options);
    }
    /**
     * Load a configuration file from yaml, json
     */
    async loadFile(path, schema) {
        let config;
        const ext = extname(path);
        if ([".yml", ".yaml"].includes(ext)) {
            config = await this.cliYaml.read(path);
        }
        else if ([".json"].includes(ext)) {
            config = await JSON.parse(await this.cliFs.readFile(path, "utf8"));
        }
        else if (!config) {
            throw new Error("Unsupported format file");
        }
        if (schema) {
            const validate = this.#ajv.compile(schema);
            const isValid = validate(config);
            if (!isValid) {
                const [error] = validate.errors;
                throw new Error([
                    `${error.instancePath.replace(/\//gi, ".")} `,
                    error.message,
                    error.params?.allowedValues && `. Allowed values: ${error.params?.allowedValues}`
                ]
                    .filter(Boolean)
                    .join(""));
            }
        }
        return config;
    }
};
__decorate([
    Inject(),
    __metadata("design:type", CliYaml)
], CliLoadFile.prototype, "cliYaml", void 0);
__decorate([
    Inject(),
    __metadata("design:type", CliFs)
], CliLoadFile.prototype, "cliFs", void 0);
CliLoadFile = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [])
], CliLoadFile);
export { CliLoadFile };
//# sourceMappingURL=CliLoadFile.js.map