"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CliYaml = void 0;
const tslib_1 = require("tslib");
const di_1 = require("@tsed/di");
const js_yaml_1 = tslib_1.__importDefault(require("js-yaml"));
const path_1 = require("path");
const CliFs_1 = require("./CliFs");
const ProjectPackageJson_1 = require("./ProjectPackageJson");
let CliYaml = class CliYaml {
    projectPackageJson;
    fs;
    async read(path) {
        const file = !this.fs.exists(path) ? this.fs.findUpFile(this.projectPackageJson.dir, path) : path;
        if (file) {
            const content = await this.fs.readFile(file, { encoding: "utf8" });
            return js_yaml_1.default.load(content);
        }
        return {};
    }
    async write(path, obj) {
        const content = js_yaml_1.default.dump(obj);
        const file = this.fs.findUpFile(this.projectPackageJson.dir, path) || (0, path_1.join)(this.projectPackageJson.dir, path);
        return this.fs.writeFile(file, content, { encoding: "utf8" });
    }
};
tslib_1.__decorate([
    (0, di_1.Inject)(),
    tslib_1.__metadata("design:type", ProjectPackageJson_1.ProjectPackageJson)
], CliYaml.prototype, "projectPackageJson", void 0);
tslib_1.__decorate([
    (0, di_1.Inject)(),
    tslib_1.__metadata("design:type", CliFs_1.CliFs)
], CliYaml.prototype, "fs", void 0);
CliYaml = tslib_1.__decorate([
    (0, di_1.Injectable)()
], CliYaml);
exports.CliYaml = CliYaml;
//# sourceMappingURL=CliYaml.js.map