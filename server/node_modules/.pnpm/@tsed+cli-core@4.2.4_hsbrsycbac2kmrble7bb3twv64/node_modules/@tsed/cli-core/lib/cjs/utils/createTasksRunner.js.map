{"version":3,"file":"createTasksRunner.js","sourceRoot":"","sources":["../../../src/utils/createTasksRunner.ts"],"names":[],"mappings":";;;AAAA,mCAAuD;AAEvD,qCAAsC;AACtC,qDAA2C;AAE3C,MAAM,YAAa,SAAQ,eAAM;IAC/B,IAAI,CAAC,OAAe;QAClB,IAAA,0BAAS,GAAE,EAAE,KAAK,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;IACxC,CAAC;IAED,IAAI,CAAC,OAAe;QAClB,IAAA,0BAAS,GAAE,EAAE,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;IACvC,CAAC;IAED,OAAO,CAAC,OAAe;QACrB,IAAA,0BAAS,GAAE,EAAE,IAAI,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;IAC1C,CAAC;IAED,IAAI,CAAC,OAAe;QAClB,IAAA,0BAAS,GAAE,EAAE,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;IACvC,CAAC;IAED,KAAK,CAAC,OAAe;QACnB,IAAA,0BAAS,GAAE,EAAE,IAAI,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IACxC,CAAC;IAED,KAAK,CAAC,OAAe;QACnB,IAAA,0BAAS,GAAE,EAAE,IAAI,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IACxC,CAAC;IAED,KAAK,CAAC,OAAe;QACnB,IAAA,0BAAS,GAAE,EAAE,IAAI,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IACxC,CAAC;IAED,QAAQ,CAAC,OAAe;QACtB,IAAA,0BAAS,GAAE,EAAE,IAAI,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;IAC3C,CAAC;CACF;AAED,SAAS,UAAU,CAAC,GAAgB;IAClC,MAAM,cAAc,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IAC1D,MAAM,eAAe,GAAG,cAAc;QACpC,CAAC,CAAC;YACE,MAAM,EAAE,YAAY;SACrB;QACH,CAAC,CAAC,EAAE,CAAC;IACP,OAAO;QACL,GAAG,GAAG;QACN,cAAc,EAAE,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,MAAM;QAC/C,gBAAgB,EAAE,cAAc;QAChC,QAAQ,EAAE,cAAc,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS;QAChD,qBAAqB,EAAE,eAAe;QACtC,eAAe;KAChB,CAAC;AACJ,CAAC;AAED,SAAgB,WAAW,CAAC,KAAY,EAAE,GAAgB;IACxD,OAAO,IAAI,cAAK,CAAC,KAAY,EAAE,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC;AAClD,CAAC;AAFD,kCAEC;AAED,SAAgB,cAAc,CAAC,KAAgE,EAAE,IAAiB;IAChH,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC;IAExB,OAAO,KAAK,EAAE,GAAQ,EAAE,IAAgC,EAAE,EAAE;QAC1D,IAAI,IAAA,iBAAU,EAAC,KAAK,CAAC,EAAE;YACrB,KAAK,GAAG,MAAM,KAAK,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;SAChC;QAED,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;IACpC,CAAC,CAAC;AACJ,CAAC;AAVD,wCAUC;AAED,SAAgB,iBAAiB,CAAC,KAAY,EAAE,GAAgB;IAC9D,OAAO,WAAW,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,GAAU,CAAC,CAAC;AACjD,CAAC;AAFD,8CAEC","sourcesContent":["import {Listr, ListrTaskWrapper, Logger} from \"listr2\";\nimport type {TaskOptions, Tasks} from \"../interfaces/Tasks\";\nimport {isFunction} from \"@tsed/core\";\nimport {getLogger} from \"./createInjector\";\n\nclass CustomLogger extends Logger {\n  fail(message: string) {\n    getLogger()?.error(\"[FAIL]\", message);\n  }\n\n  skip(message: string) {\n    getLogger()?.info(\"[SKIP]\", message);\n  }\n\n  success(message: string) {\n    getLogger()?.info(\"[SUCCESS]\", message);\n  }\n\n  data(message: string) {\n    getLogger()?.info(\"[DATA]\", message);\n  }\n\n  start(message: string) {\n    getLogger()?.info(\"[START]\", message);\n  }\n\n  title(message: string) {\n    getLogger()?.info(\"[TITLE]\", message);\n  }\n\n  retry(message: string) {\n    getLogger()?.info(\"[RETRY]\", message);\n  }\n\n  rollback(message: string) {\n    getLogger()?.info(\"[ROLLBACK]\", message);\n  }\n}\n\nfunction getOptions(ctx: TaskOptions): any {\n  const useRawRenderer = !(!ctx.verbose && !process.env.CI);\n  const rendererOptions = useRawRenderer\n    ? {\n        logger: CustomLogger\n      }\n    : {};\n  return {\n    ...ctx,\n    rendererSilent: process.env.NODE_ENV === \"test\",\n    rendererFallback: useRawRenderer,\n    renderer: useRawRenderer ? \"verbose\" : \"default\",\n    nonTTYRendererOptions: rendererOptions,\n    rendererOptions\n  };\n}\n\nexport function createTasks(tasks: Tasks, ctx: TaskOptions) {\n  return new Listr(tasks as any, getOptions(ctx));\n}\n\nexport function createSubTasks(tasks: Tasks | ((ctx: any, task: any) => Tasks | Promise<Tasks>), opts: TaskOptions) {\n  opts = getOptions(opts);\n\n  return async (ctx: any, task: ListrTaskWrapper<any, any>) => {\n    if (isFunction(tasks)) {\n      tasks = await tasks(ctx, task);\n    }\n\n    return task.newListr(tasks, opts);\n  };\n}\n\nexport function createTasksRunner(tasks: Tasks, ctx: TaskOptions) {\n  return createTasks(tasks, ctx).run(ctx as any);\n}\n"]}