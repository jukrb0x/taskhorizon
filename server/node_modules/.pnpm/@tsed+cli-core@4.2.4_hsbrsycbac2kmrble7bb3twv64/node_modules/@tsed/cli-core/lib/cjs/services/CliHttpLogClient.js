"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CliHttpLogClient = void 0;
const tslib_1 = require("tslib");
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const querystring_1 = tslib_1.__importDefault(require("querystring"));
const di_1 = require("@tsed/di");
const logger_1 = require("@tsed/logger");
const core_1 = require("@tsed/core");
const logToCurl_1 = require("../utils/logToCurl");
let CliHttpLogClient = class CliHttpLogClient {
    callee;
    logger;
    constructor(options = {}) {
        this.callee = options.callee || "http";
    }
    onSuccess(options) {
        return this.logger.debug({
            ...this.formatLog(options),
            status: "OK"
        });
    }
    onError(error, options) {
        const origin = this.errorMapper(error);
        this.logger.warn({
            ...this.formatLog(options),
            status: "KO",
            callee_code: origin.code,
            callee_error: origin.message,
            callee_request_qs: options.params && querystring_1.default.stringify(options.params),
            callee_request_headers: options.headers,
            callee_request_body: options.data && JSON.stringify(options.data),
            callee_response_headers: origin.headers,
            callee_response_body: origin.body && JSON.stringify(origin.body),
            callee_response_request_id: origin.x_request_id,
            curl: this.logToCurl(options)
        });
    }
    logToCurl(options) {
        return (0, logToCurl_1.logToCurl)(options);
    }
    getStatusCodeFromError(error) {
        return (0, core_1.getValue)(error, "response.status", (0, core_1.getValue)(error, "response.statusCode", (0, core_1.getValue)(error, "status")));
    }
    getHeadersFromError(error) {
        return (0, core_1.getValue)(error, "response.headers", (0, core_1.getValue)(error, "headers"));
    }
    getResponseBodyFromError(error) {
        return (0, core_1.getValue)(error, "response.data", (0, core_1.getValue)(error, "data"));
    }
    formatLog(options) {
        const { startTime, url, method } = options;
        const { callee } = this;
        const duration = new Date().getTime() - startTime;
        return {
            callee,
            url,
            method,
            callee_qs: options.params && querystring_1.default.stringify(options.params),
            duration: isNaN(duration) ? undefined : duration
        };
    }
    errorMapper(error) {
        const statusCode = this.getStatusCodeFromError(error);
        const headers = this.getHeadersFromError(error);
        const body = this.getResponseBodyFromError(error);
        return {
            message: error.message || statusCode,
            code: statusCode,
            headers,
            body,
            x_request_id: (0, core_1.getValue)(error, "response.headers.x-request-id", (0, core_1.getValue)(error, "headers.x-request-id"))
        };
    }
};
tslib_1.__decorate([
    (0, di_1.Inject)(),
    tslib_1.__metadata("design:type", logger_1.Logger)
], CliHttpLogClient.prototype, "logger", void 0);
CliHttpLogClient = tslib_1.__decorate([
    tslib_1.__param(0, di_1.Opts),
    tslib_1.__metadata("design:paramtypes", [Object])
], CliHttpLogClient);
exports.CliHttpLogClient = CliHttpLogClient;
//# sourceMappingURL=CliHttpLogClient.js.map