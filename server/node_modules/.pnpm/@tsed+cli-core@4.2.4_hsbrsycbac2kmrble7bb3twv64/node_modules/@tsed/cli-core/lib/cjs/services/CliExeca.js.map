{"version":3,"file":"CliExeca.js","sourceRoot":"","sources":["../../../src/services/CliExeca.ts"],"names":[],"mappings":";;;;AAAA,iCAAoC;AAEpC,0DAA0B;AAC1B,8CAAiD;AACjD,6DAA6D;AAC7D,aAAa;AACb,0DAA0B;AAC1B,oEAA+D;AAGxD,IAAM,QAAQ,GAAd,MAAM,QAAQ;IACV,GAAG,GAAG,eAAK,CAAC;IAErB;;;;;OAKG;IACH,GAAG,CAAC,GAAW,EAAE,IAAc,EAAE,IAAc;QAC7C,MAAM,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QACrC,MAAM,MAAM,GAAG,IAAA,uCAAkB,EAAC,EAAE,CAAC,MAAO,CAAC,IAAI,CAAC,IAAA,eAAK,GAAE,CAAC,EAAE,EAAC,KAAK,EAAE,EAAE,EAAC,CAAC,CAAC;QACzE,MAAM,MAAM,GAAG,IAAA,uCAAkB,EAAC,EAAE,CAAC,MAAO,CAAC,IAAI,CAAC,IAAA,eAAK,GAAE,CAAC,EAAE,EAAC,KAAK,EAAE,EAAE,EAAC,CAAC,CAAC;QAEzE,OAAO,MAAM,CAAC,IAAI,CAAC,IAAA,qBAAS,EAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,IAAA,kBAAM,EAAC,OAAO,CAAC,CAAC,CAAC;IAC9D,CAAC;IAED,OAAO,CAAC,GAAW,EAAE,IAAc,EAAE,IAAkB;QACrD,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;IACxC,CAAC;IAED,KAAK,CAAC,QAAQ,CAAC,GAAW,EAAE,IAAc,EAAE,IAAkB;QAC5D,OAAO,CAAC,MAAM,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC;IAClD,CAAC;IAED,GAAG,CAAC,GAAW,EAAE,IAAc,EAAE,IAAkB;QACjD,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,MAAM,CAAC;IAC/C,CAAC;CACF,CAAA;AA5BY,QAAQ;IADpB,IAAA,eAAU,GAAE;GACA,QAAQ,CA4BpB;AA5BY,4BAAQ","sourcesContent":["import {Injectable} from \"@tsed/di\";\nimport type {Options, SyncOptions} from \"execa\";\nimport execa from \"execa\";\nimport {filter, mergeWith} from \"rxjs/operators\";\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nimport split from \"split\";\nimport {streamToObservable} from \"../utils/streamToObservable\";\n\n@Injectable()\nexport class CliExeca {\n  readonly raw = execa;\n\n  /**\n   *\n   * @param cmd\n   * @param args\n   * @param opts\n   */\n  run(cmd: string, args: string[], opts?: Options) {\n    const cp = this.raw(cmd, args, opts);\n    const stdout = streamToObservable(cp.stdout!.pipe(split()), {await: cp});\n    const stderr = streamToObservable(cp.stderr!.pipe(split()), {await: cp});\n\n    return stdout.pipe(mergeWith(stderr)).pipe(filter(Boolean));\n  }\n\n  runSync(cmd: string, args: string[], opts?: SyncOptions) {\n    return this.raw.sync(cmd, args, opts);\n  }\n\n  async getAsync(cmd: string, args: string[], opts?: SyncOptions) {\n    return (await this.raw(cmd, args, opts)).stdout;\n  }\n\n  get(cmd: string, args: string[], opts?: SyncOptions) {\n    return this.raw.sync(cmd, args, opts).stdout;\n  }\n}\n"]}