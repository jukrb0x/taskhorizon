/// <reference types="node" />
import type { Options, SyncOptions } from "execa";
import execa from "execa";
export declare class CliExeca {
    readonly raw: {
        (file: string, arguments?: readonly string[] | undefined, options?: Options<string> | undefined): execa.ExecaChildProcess<string>;
        (file: string, arguments?: readonly string[] | undefined, options?: Options<null> | undefined): execa.ExecaChildProcess<Buffer>;
        (file: string, options?: Options<string> | undefined): execa.ExecaChildProcess<string>;
        (file: string, options?: Options<null> | undefined): execa.ExecaChildProcess<Buffer>;
        sync(file: string, arguments?: readonly string[] | undefined, options?: SyncOptions<string> | undefined): execa.ExecaSyncReturnValue<string>;
        sync(file: string, arguments?: readonly string[] | undefined, options?: SyncOptions<null> | undefined): execa.ExecaSyncReturnValue<Buffer>;
        sync(file: string, options?: SyncOptions<string> | undefined): execa.ExecaSyncReturnValue<string>;
        sync(file: string, options?: SyncOptions<null> | undefined): execa.ExecaSyncReturnValue<Buffer>;
        command(command: string, options?: Options<string> | undefined): execa.ExecaChildProcess<string>;
        command(command: string, options?: Options<null> | undefined): execa.ExecaChildProcess<Buffer>;
        commandSync(command: string, options?: SyncOptions<string> | undefined): execa.ExecaSyncReturnValue<string>;
        commandSync(command: string, options?: SyncOptions<null> | undefined): execa.ExecaSyncReturnValue<Buffer>;
        node(scriptPath: string, arguments?: readonly string[] | undefined, options?: execa.NodeOptions<string> | undefined): execa.ExecaChildProcess<string>;
        node(scriptPath: string, arguments?: readonly string[] | undefined, options?: Options<null> | undefined): execa.ExecaChildProcess<Buffer>;
        node(scriptPath: string, options?: Options<string> | undefined): execa.ExecaChildProcess<string>;
        node(scriptPath: string, options?: Options<null> | undefined): execa.ExecaChildProcess<Buffer>;
    };
    /**
     *
     * @param cmd
     * @param args
     * @param opts
     */
    run(cmd: string, args: string[], opts?: Options): import("rxjs").Observable<any>;
    runSync(cmd: string, args: string[], opts?: SyncOptions): execa.ExecaSyncReturnValue<string>;
    getAsync(cmd: string, args: string[], opts?: SyncOptions): Promise<string>;
    get(cmd: string, args: string[], opts?: SyncOptions): string;
}
