import { __decorate, __metadata } from "tslib";
import { createSubTasks } from "../utils/createTasksRunner.js";
import chalk from "chalk";
import { Constant, Inject, Injectable, InjectorService } from "@tsed/di";
import { CommandStoreKeys } from "../domains/CommandStoreKeys.js";
import { loadPlugins } from "../utils/loadPlugins.js";
import { CliHooks } from "./CliHooks.js";
import { NpmRegistryClient } from "./NpmRegistryClient.js";
import { ProjectPackageJson } from "./ProjectPackageJson.js";
function mapPlugins({ package: { name, description = "", ...otherProps } }) {
    return {
        name: `${name} ${description}`.trim(),
        value: name,
        ...otherProps
    };
}
let CliPlugins = class CliPlugins {
    name;
    npmRegistryClient;
    injector;
    cliHooks;
    packageJson;
    async searchPlugins(keyword = "", options = {}) {
        const result = await this.npmRegistryClient.search(this.getKeyword(keyword), options);
        return result.filter(({ package: { name } }) => this.isPlugin(name)).map(mapPlugins);
    }
    async loadPlugins() {
        return loadPlugins(this.injector);
    }
    addPluginsDependencies(ctx) {
        const plugins = Object.keys(this.packageJson.devDependencies).filter((name) => this.isPlugin(name));
        const tasks = plugins.map((plugin) => {
            return {
                title: `Run plugin '${chalk.cyan(plugin)}'`,
                task: () => this.cliHooks.emit(CommandStoreKeys.ADD, plugin, ctx)
            };
        });
        return [
            ...tasks,
            {
                title: "Install",
                task: createSubTasks(() => this.packageJson.install(ctx), { ...ctx, concurrent: false })
            }
        ];
    }
    getKeyword(keyword) {
        return `@${this.name}/cli-plugin-${this.cleanKeyword(keyword)}`;
    }
    cleanKeyword(keyword) {
        return keyword.replace(this.name, "").replace("@", "").replace("/", "").replace("cli-plugin-", "");
    }
    isPlugin(name) {
        return name.startsWith(`@${this.name}/cli-plugin`) || name.includes(`${this.name}-cli-plugin`);
    }
};
__decorate([
    Constant("name"),
    __metadata("design:type", String)
], CliPlugins.prototype, "name", void 0);
__decorate([
    Inject(),
    __metadata("design:type", NpmRegistryClient)
], CliPlugins.prototype, "npmRegistryClient", void 0);
__decorate([
    Inject(),
    __metadata("design:type", InjectorService)
], CliPlugins.prototype, "injector", void 0);
__decorate([
    Inject(),
    __metadata("design:type", CliHooks)
], CliPlugins.prototype, "cliHooks", void 0);
__decorate([
    Inject(),
    __metadata("design:type", ProjectPackageJson)
], CliPlugins.prototype, "packageJson", void 0);
CliPlugins = __decorate([
    Injectable()
], CliPlugins);
export { CliPlugins };
//# sourceMappingURL=CliPlugins.js.map