import { __decorate, __metadata } from "tslib";
import tunnel from "tunnel";
import { Configuration, Inject, Injectable, Value } from "@tsed/di";
import { CliExeca } from "./CliExeca.js";
import { camelCase } from "change-case";
import { URL } from "url";
function cast(value) {
    if (["undefined"].includes(value)) {
        return undefined;
    }
    if (["null"].includes(value)) {
        return null;
    }
    if (["false"].includes(value)) {
        return false;
    }
    if (["true"].includes(value)) {
        return false;
    }
    return value;
}
let CliProxyAgent = class CliProxyAgent {
    proxySettings;
    cliExeca;
    hasProxy() {
        return !!this.proxySettings.url;
    }
    get(type) {
        if (this.hasProxy()) {
            const { strictSsl = true } = this.proxySettings;
            const url = new URL(this.proxySettings.url);
            const protocol = url.protocol.replace(":", "");
            const options = {
                proxy: {
                    host: url.hostname,
                    port: (url.port ? +url.port : undefined),
                    proxyAuth: url.username && url.password ? `${url.username}:${url.password}` : undefined,
                    rejectUnauthorized: strictSsl
                }
            };
            const method = camelCase([type, "over", protocol].join(" "));
            if (tunnel[method]) {
                return tunnel[method](options);
            }
        }
        return null;
    }
    async resolveProxySettings() {
        if (this.hasProxy()) {
            return;
        }
        const result = await Promise.all([
            this.cliExeca.getAsync("npm", ["config", "get", "proxy"]),
            this.cliExeca.getAsync("npm", ["config", "get", "http-proxy"]),
            this.cliExeca.getAsync("npm", ["config", "get", "https-proxy"]),
            this.cliExeca.getAsync("npm", ["config", "get", "strict-ssl"])
        ]);
        const [proxy, httpProxy, httpsProxy, strictSsl] = result.map(cast);
        const url = httpsProxy || httpProxy || proxy;
        if (url) {
            this.proxySettings = {
                url,
                strictSsl: cast(strictSsl) !== false
            };
        }
    }
};
__decorate([
    Value("proxy", {}),
    __metadata("design:type", Object)
], CliProxyAgent.prototype, "proxySettings", void 0);
__decorate([
    Inject(),
    __metadata("design:type", CliExeca)
], CliProxyAgent.prototype, "cliExeca", void 0);
CliProxyAgent = __decorate([
    Injectable(),
    Configuration({
        proxy: {
            url: process.env.HTTPS_PROXY || process.env.HTTP_PROXY,
            strictSsl: process.env.NODE_TLS_REJECT_UNAUTHORIZED !== undefined ? process.env.NODE_TLS_REJECT_UNAUTHORIZED !== "0" : true
        }
    })
], CliProxyAgent);
export { CliProxyAgent };
//# sourceMappingURL=CliProxyAgent.js.map