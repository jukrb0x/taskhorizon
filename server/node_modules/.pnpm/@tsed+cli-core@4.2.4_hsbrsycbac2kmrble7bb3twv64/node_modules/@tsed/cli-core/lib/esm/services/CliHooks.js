import { __decorate, __metadata } from "tslib";
import { Inject, Injectable, InjectorService } from "@tsed/di";
let CliHooks = class CliHooks {
    injector;
    async emit(hookName, cmd, ...args) {
        const providers = this.injector.getProviders();
        let results = [];
        for (const provider of providers) {
            if (provider.useClass) {
                const instance = this.injector.get(provider.token);
                if (provider.store.has(hookName)) {
                    const props = provider.store.get(hookName)[cmd];
                    if (props) {
                        for (const propertyKey of props) {
                            results = results.concat(await instance[propertyKey](...args));
                        }
                    }
                }
            }
        }
        return results.filter((o) => o !== undefined);
    }
};
__decorate([
    Inject(),
    __metadata("design:type", InjectorService)
], CliHooks.prototype, "injector", void 0);
CliHooks = __decorate([
    Injectable()
], CliHooks);
export { CliHooks };
//# sourceMappingURL=CliHooks.js.map