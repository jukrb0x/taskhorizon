{"version":3,"file":"collection.js","sourceRoot":"","sources":["../../../../src/utils/hbs/collection.ts"],"names":[],"mappings":"AAAA,6DAA6D;AAC7D,aAAa;AACb,OAAO,IAAI,MAAM,kBAAkB,CAAC;AACpC,OAAO,EAAC,OAAO,IAAI,MAAM,EAAC,MAAM,UAAU,CAAC;AAC3C,OAAO,EAAC,OAAO,IAAI,KAAK,EAAC,MAAM,SAAS,CAAC;AAEzC,MAAM,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC;AAC9B,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;AAC7B,MAAM,CAAC,MAAM,OAAO,GAAQ,EAAE,CAAC;AAE/B;;;;;;;;;;;;;;;;;;;GAmBG;AAEH,OAAO,CAAC,OAAO,GAAG,UAAU,UAAe,EAAE,OAAY;IACvD,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE;QAC5B,OAAO,GAAG,UAAU,CAAC;QACrB,OAAO,IAAI,CAAC,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;KACrC;IAED,IAAI,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE;QACnD,OAAO,IAAI,CAAC,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;KACrC;IAED,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IACrC,MAAM,OAAO,GAAG,OAAO,UAAU,KAAK,QAAQ,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;IAC/D,OAAO,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;AAC5C,CAAC,CAAC;AAEF;;;;;;;;;;;GAWG;AAEH,OAAO,CAAC,OAAO,GAAG,UAAU,UAAe,EAAE,OAAY;IACvD,IAAI,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;QAC7B,OAAO,OAAO,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC,CAAC;KACnD;IACD,IAAI,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE;QAC7B,OAAO,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC,CAAC;KAClD;IACD,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AAC/B,CAAC,CAAC","sourcesContent":["// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nimport util from \"handlebars-utils\";\nimport {helpers as object} from \"./object\";\nimport {helpers as array} from \"./array\";\n\nconst forEach = array.forEach;\nconst forOwn = object.forOwn;\nexport const helpers: any = {};\n\n/**\n * Inline, subexpression, or block helper that returns true (or the block)\n * if the given collection is empty, or false (or the inverse block, if\n * supplied) if the colleciton is not empty.\n *\n * ```handlebars\n * <!-- array: [] -->\n * {{#isEmpty array}}AAA{{else}}BBB{{/isEmpty}}\n * <!-- results in: 'AAA' -->\n *\n * <!-- array: [] -->\n * {{isEmpty array}}\n * <!-- results in: true -->\n * ```\n * @param {Object} `collection`\n * @param {Object} `options`\n * @return {String}\n * @block\n * @api public\n */\n\nhelpers.isEmpty = function (collection: any, options: any) {\n  if (!util.isOptions(options)) {\n    options = collection;\n    return util.fn(true, this, options);\n  }\n\n  if (Array.isArray(collection) && !collection.length) {\n    return util.fn(true, this, options);\n  }\n\n  const keys = Object.keys(collection);\n  const isEmpty = typeof collection === \"object\" && !keys.length;\n  return util.value(isEmpty, this, options);\n};\n\n/**\n * Block helper that iterates over an array or object. If\n * an array is given, `.forEach` is called, or if an object\n * is given, `.forOwn` is called, otherwise the inverse block\n * is returned.\n *\n * @param {Object|Array} `collection` The collection to iterate over\n * @param {Object} `options`\n * @return {String}\n * @block\n * @api public\n */\n\nhelpers.iterate = function (collection: any, options: any) {\n  if (Array.isArray(collection)) {\n    return forEach.apply(null, [collection, options]);\n  }\n  if (util.isObject(collection)) {\n    return forOwn.apply(null, [collection, options]);\n  }\n  return options.inverse(this);\n};\n"]}