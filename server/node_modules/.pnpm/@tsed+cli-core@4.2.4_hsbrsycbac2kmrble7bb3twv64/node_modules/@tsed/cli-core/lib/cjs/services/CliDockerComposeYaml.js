"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CliDockerComposeYaml = void 0;
const tslib_1 = require("tslib");
const di_1 = require("@tsed/di");
const change_case_1 = require("change-case");
const CliYaml_1 = require("./CliYaml");
const core_1 = require("@tsed/core");
let CliDockerComposeYaml = class CliDockerComposeYaml {
    cliYaml;
    async read() {
        return this.cliYaml.read("docker-compose.yml");
    }
    async write(obj) {
        return this.cliYaml.write("docker-compose.yml", obj);
    }
    async addDatabaseService(name, database) {
        const dockerCompose = await this.read();
        if (dockerCompose) {
            let value;
            switch (database) {
                case "mysql":
                case "mariadb":
                    value = {
                        image: database === "mysql" ? "mysql:8.0.28-oracle" : "mariadb:10.7.3",
                        ports: ["3306:3306"],
                        environment: {
                            MYSQL_ROOT_PASSWORD: "admin",
                            MYSQL_USER: "test",
                            MYSQL_PASSWORD: "test",
                            MYSQL_DATABASE: "test"
                        }
                    };
                    break;
                case "postgres":
                    value = {
                        image: "postgres:9.6.1",
                        ports: ["5432:5432"],
                        environment: {
                            POSTGRES_USER: "test",
                            POSTGRES_PASSWORD: "test",
                            POSTGRES_DB: "test"
                        }
                    };
                    break;
                case "cockroachdb":
                    value = {
                        image: "cockroachdb/cockroach:v2.1.4",
                        command: "start --insecure",
                        ports: ["26257:26257"]
                    };
                    break;
                case "mssql":
                    value = {
                        image: "mcr.microsoft.com/mssql/server:2017-latest",
                        command: "start --insecure",
                        ports: ["1433:1433"],
                        environment: {
                            SA_PASSWORD: "Admin12345",
                            ACCEPT_EULA: "Y"
                        }
                    };
                    break;
                case "mongodb":
                    value = {
                        image: "mongo:5.0.8",
                        ports: ["27017:27017"]
                    };
                    break;
            }
            (0, core_1.setValue)(dockerCompose, `services.${(0, change_case_1.snakeCase)(name)}`, value);
            await this.write(dockerCompose);
        }
    }
};
tslib_1.__decorate([
    (0, di_1.Inject)(),
    tslib_1.__metadata("design:type", CliYaml_1.CliYaml)
], CliDockerComposeYaml.prototype, "cliYaml", void 0);
CliDockerComposeYaml = tslib_1.__decorate([
    (0, di_1.Injectable)()
], CliDockerComposeYaml);
exports.CliDockerComposeYaml = CliDockerComposeYaml;
//# sourceMappingURL=CliDockerComposeYaml.js.map