"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadPlugins = void 0;
const tslib_1 = require("tslib");
const di_1 = require("@tsed/di");
const listr2_1 = require("listr2");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const CliFs_1 = require("../services/CliFs");
const ProjectPackageJson_1 = require("../services/ProjectPackageJson");
const all = (promises) => Promise.all(promises);
async function loadPlugins(injector) {
    const name = injector.settings.get("name");
    const rootDir = injector.settings.get("project.rootDir");
    const projectPackageJson = injector.invoke(ProjectPackageJson_1.ProjectPackageJson);
    const fs = injector.invoke(CliFs_1.CliFs);
    const promises = Object.keys(projectPackageJson.allDependencies)
        .filter((mod) => mod.startsWith(`@${name}/cli-plugin`) || mod.includes(`${name}-cli-plugin`))
        .map(async (mod) => {
        try {
            const { default: plugin } = await fs.importModule(mod, rootDir);
            if (!injector.has(plugin)) {
                const provider = di_1.GlobalProviders.get(plugin)?.clone();
                if (provider?.imports.length) {
                    await all(provider.imports.map(async (token) => {
                        injector.add(token, di_1.GlobalProviders.get(token)?.clone());
                        if (injector.settings.get("loaded")) {
                            await injector.invoke(token);
                        }
                    }));
                }
                injector.add(plugin, provider);
                if (injector.settings.get("loaded")) {
                    await injector.invoke(plugin);
                }
            }
            injector.logger.info(chalk_1.default.green(listr2_1.figures.tick), mod, "module loaded");
        }
        catch (er) {
            injector.logger.warn(chalk_1.default.red(listr2_1.figures.cross), "Fail to load plugin", mod);
        }
    });
    await all(promises);
}
exports.loadPlugins = loadPlugins;
//# sourceMappingURL=loadPlugins.js.map