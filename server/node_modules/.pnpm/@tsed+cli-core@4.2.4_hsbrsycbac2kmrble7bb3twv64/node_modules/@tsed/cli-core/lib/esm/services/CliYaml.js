import { __decorate, __metadata } from "tslib";
import { Inject, Injectable } from "@tsed/di";
import JsYaml from "js-yaml";
import { join } from "path";
import { CliFs } from "./CliFs.js";
import { ProjectPackageJson } from "./ProjectPackageJson.js";
let CliYaml = class CliYaml {
    projectPackageJson;
    fs;
    async read(path) {
        const file = !this.fs.exists(path) ? this.fs.findUpFile(this.projectPackageJson.dir, path) : path;
        if (file) {
            const content = await this.fs.readFile(file, { encoding: "utf8" });
            return JsYaml.load(content);
        }
        return {};
    }
    async write(path, obj) {
        const content = JsYaml.dump(obj);
        const file = this.fs.findUpFile(this.projectPackageJson.dir, path) || join(this.projectPackageJson.dir, path);
        return this.fs.writeFile(file, content, { encoding: "utf8" });
    }
};
__decorate([
    Inject(),
    __metadata("design:type", ProjectPackageJson)
], CliYaml.prototype, "projectPackageJson", void 0);
__decorate([
    Inject(),
    __metadata("design:type", CliFs)
], CliYaml.prototype, "fs", void 0);
CliYaml = __decorate([
    Injectable()
], CliYaml);
export { CliYaml };
//# sourceMappingURL=CliYaml.js.map