import { Listr, Logger } from "listr2";
import { isFunction } from "@tsed/core";
import { getLogger } from "./createInjector.js";
class CustomLogger extends Logger {
    fail(message) {
        getLogger()?.error("[FAIL]", message);
    }
    skip(message) {
        getLogger()?.info("[SKIP]", message);
    }
    success(message) {
        getLogger()?.info("[SUCCESS]", message);
    }
    data(message) {
        getLogger()?.info("[DATA]", message);
    }
    start(message) {
        getLogger()?.info("[START]", message);
    }
    title(message) {
        getLogger()?.info("[TITLE]", message);
    }
    retry(message) {
        getLogger()?.info("[RETRY]", message);
    }
    rollback(message) {
        getLogger()?.info("[ROLLBACK]", message);
    }
}
function getOptions(ctx) {
    const useRawRenderer = !(!ctx.verbose && !process.env.CI);
    const rendererOptions = useRawRenderer
        ? {
            logger: CustomLogger
        }
        : {};
    return {
        ...ctx,
        rendererSilent: process.env.NODE_ENV === "test",
        rendererFallback: useRawRenderer,
        renderer: useRawRenderer ? "verbose" : "default",
        nonTTYRendererOptions: rendererOptions,
        rendererOptions
    };
}
export function createTasks(tasks, ctx) {
    return new Listr(tasks, getOptions(ctx));
}
export function createSubTasks(tasks, opts) {
    opts = getOptions(opts);
    return async (ctx, task) => {
        if (isFunction(tasks)) {
            tasks = await tasks(ctx, task);
        }
        return task.newListr(tasks, opts);
    };
}
export function createTasksRunner(tasks, ctx) {
    return createTasks(tasks, ctx).run(ctx);
}
//# sourceMappingURL=createTasksRunner.js.map