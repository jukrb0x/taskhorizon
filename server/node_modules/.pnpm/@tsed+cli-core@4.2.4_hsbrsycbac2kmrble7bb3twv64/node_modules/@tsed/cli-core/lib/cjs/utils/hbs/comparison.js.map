{"version":3,"file":"comparison.js","sourceRoot":"","sources":["../../../../src/utils/hbs/comparison.ts"],"names":[],"mappings":"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","sourcesContent":["import {isNumber} from \"@tsed/core\";\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nimport util from \"handlebars-utils\";\n\nexport const helpers: any = {};\n\nconst contains = (val: any, obj: any, start?: number) => {\n  if (val == null || obj == null || !isNumber(val.length)) {\n    return false;\n  }\n  return val.indexOf(obj, start) !== -1;\n};\n/**\n * Helper that renders the block if **both** of the given values\n * are truthy. If an inverse block is specified it will be rendered\n * when falsy. Works as a block helper, inline helper or\n * subexpression.\n *\n * ```handlebars\n * <!-- {great: true, magnificent: true} -->\n * {{#and great magnificent}}A{{else}}B{{/and}}\n * <!-- results in: 'A' -->\n * ```\n * @param {any} `a`\n * @param {any} `b`\n * @param {Object} `options` Handlebars provided options object\n * @return {String}\n * @block\n * @api public\n */\n\nhelpers.and = (...args: any[]) => {\n  const len = args.length - 1;\n  const options = args[len];\n  let val = true;\n\n  for (let i = 0; i < len; i++) {\n    if (!args[i]) {\n      val = false;\n      break;\n    }\n  }\n\n  return util.value(val, this, options);\n};\n\n/**\n * Render a block when a comparison of the first and third\n * arguments returns true. The second argument is\n * the [arithemetic operator][operators] to use. You may also\n * optionally specify an inverse block to render when falsy.\n *\n * @param `a`\n * @param `operator` The operator to use. Operators must be enclosed in quotes: `\">\"`, `\"=\"`, `\"<=\"`, and so on.\n * @param `b`\n * @param {Object} `options` Handlebars provided options object\n * @return {String} Block, or if specified the inverse block is rendered if falsey.\n * @block\n * @api public\n */\n\nhelpers.compare = function (a: any, operator: any, b: any, options: any) {\n  /*eslint eqeqeq: 0*/\n\n  if (arguments.length < 4) {\n    throw new Error(\"handlebars Helper {{compare}} expects 4 arguments\");\n  }\n\n  let result;\n  switch (operator) {\n    case \"==\":\n      result = a == b;\n      break;\n    case \"===\":\n      result = a === b;\n      break;\n    case \"!=\":\n      result = a != b;\n      break;\n    case \"!==\":\n      result = a !== b;\n      break;\n    case \"<\":\n      result = a < b;\n      break;\n    case \">\":\n      result = a > b;\n      break;\n    case \"<=\":\n      result = a <= b;\n      break;\n    case \">=\":\n      result = a >= b;\n      break;\n    case \"typeof\":\n      result = typeof a === b;\n      break;\n    default: {\n      throw new Error(\"helper {{compare}}: invalid operator: `\" + operator + \"`\");\n    }\n  }\n\n  return util.value(result, this, options);\n};\n\n/**\n * Block helper that renders the block if `collection` has the\n * given `value`, using strict equality (`===`) for comparison,\n * otherwise the inverse block is rendered (if specified). If a\n * `startIndex` is specified and is negative, it is used as the\n * offset from the end of the collection.\n *\n * ```handlebars\n * <!-- array = ['a', 'b', 'c'] -->\n * {{#contains array \"d\"}}\n *   This will not be rendered.\n * {{else}}\n *   This will be rendered.\n * {{/contains}}\n * ```\n * @param {Array|Object|String} `collection` The collection to iterate over.\n * @param {any} `value` The value to check for.\n * @param {Number} `[startIndex=0]` Optionally define the starting index.\n * @param {Object} `options` Handlebars provided options object.\n * @block\n * @api public\n */\n\nhelpers.contains = function (collection: any, value: any, startIndex: number | undefined, options: any) {\n  if (typeof startIndex === \"object\") {\n    options = startIndex;\n    startIndex = undefined;\n  }\n  const val = contains(collection, value, startIndex);\n  return util.value(val, this, options);\n};\n\n/**\n * Returns the first value that is not undefined, otherwise the \"default\" value is returned.\n *\n * @param {any} `value`\n * @param {any} `defaultValue`\n * @return {String}\n * @alias .or\n * @api public\n */\n\nhelpers.default = (...args: any[]) => {\n  for (let i = 0; i < args.length - 1; i++) {\n    if (args[i] != null) return args[i];\n  }\n  return \"\";\n};\n\n/**\n * Block helper that renders a block if `a` is **equal to** `b`.\n * If an inverse block is specified it will be rendered when falsy.\n * You may optionally use the `compare=\"\"` hash argument for the\n * second value.\n *\n * @param {String} `a`\n * @param {String} `b`\n * @param {Object} `options` Handlebars provided options object\n * @return {String} Block, or inverse block if specified and falsey.\n * @alias is\n * @block\n * @api public\n */\n\nhelpers.eq = function (a: any, b: any, options: any) {\n  if (arguments.length === 2) {\n    options = b;\n    b = options.hash.compare;\n  }\n  return util.value(a === b, this, options);\n};\n\n/**\n * Block helper that renders a block if `a` is **greater than** `b`.\n *\n * If an inverse block is specified it will be rendered when falsy.\n * You may optionally use the `compare=\"\"` hash argument for the\n * second value.\n *\n * @param {String} `a`\n * @param {String} `b`\n * @param {Object} `options` Handlebars provided options object\n * @return {String} Block, or inverse block if specified and falsey.\n * @block\n * @api public\n */\n\nhelpers.gt = function (a: any, b: any, options: any) {\n  if (arguments.length === 2) {\n    options = b;\n    b = options.hash.compare;\n  }\n  return util.value(a > b, this, options);\n};\n\n/**\n * Block helper that renders a block if `a` is **greater than or\n * equal to** `b`.\n *\n * If an inverse block is specified it will be rendered when falsy.\n * You may optionally use the `compare=\"\"` hash argument for the\n * second value.\n *\n * @param {String} `a`\n * @param {String} `b`\n * @param {Object} `options` Handlebars provided options object\n * @return {String} Block, or inverse block if specified and falsey.\n * @block\n * @api public\n */\n\nhelpers.gte = function (a: any, b: any, options: any) {\n  if (arguments.length === 2) {\n    options = b;\n    b = options.hash.compare;\n  }\n  return util.value(a >= b, this, options);\n};\n\n/**\n * Block helper that renders a block if `a` is **equal to** `b`.\n * If an inverse block is specified it will be rendered when falsy.\n * Similar to [eq](#eq) but does not do strict equality.\n *\n * @param {any} `a`\n * @param {any} `b`\n * @param {Object} `options` Handlebars provided options object\n * @return {String}\n * @block\n * @api public\n */\nhelpers.is = function (a: any, b: any, options: any) {\n  if (arguments.length === 2) {\n    options = b;\n    b = options.hash.compare;\n  }\n  return util.value(a == b, this, options);\n};\n\n/**\n * Block helper that renders a block if `a` is **not equal to** `b`.\n * If an inverse block is specified it will be rendered when falsy.\n * Similar to [unlessEq](#unlesseq) but does not use strict equality for\n * comparisons.\n *\n * @param {String} `a`\n * @param {String} `b`\n * @param {Object} `options` Handlebars provided options object\n * @return {String}\n * @block\n * @api public\n */\n\nhelpers.isnt = function (a: any, b: any, options: any) {\n  if (arguments.length === 2) {\n    options = b;\n    b = options.hash.compare;\n  }\n  return util.value(a != b, this, options);\n};\n\n/**\n * Block helper that renders a block if `a` is **less than** `b`.\n *\n * If an inverse block is specified it will be rendered when falsy.\n * You may optionally use the `compare=\"\"` hash argument for the\n * second value.\n *\n * @param {Object} `context`\n * @param {Object} `options` Handlebars provided options object\n * @return {String} Block, or inverse block if specified and falsey.\n * @block\n * @api public\n */\n\nhelpers.lt = function (a: any, b: any, options: any) {\n  if (arguments.length === 2) {\n    options = b;\n    b = options.hash.compare;\n  }\n  return util.value(a < b, this, options);\n};\n\n/**\n * Block helper that renders a block if `a` is **less than or\n * equal to** `b`.\n *\n * If an inverse block is specified it will be rendered when falsy.\n * You may optionally use the `compare=\"\"` hash argument for the\n * second value.\n *\n * @param {Sring} `a`\n * @param {Sring} `b`\n * @param {Object} `options` Handlebars provided options object\n * @return {String} Block, or inverse block if specified and falsey.\n * @block\n * @api public\n */\n\nhelpers.lte = function (a: any, b: any, options: any) {\n  if (arguments.length === 2) {\n    options = b;\n    b = options.hash.compare;\n  }\n  return util.value(a <= b, this, options);\n};\n\n/**\n * Block helper that renders a block if **neither of** the given values\n * are truthy. If an inverse block is specified it will be rendered\n * when falsy.\n *\n * @param {any} `a`\n * @param {any} `b`\n * @param `options` Handlebars options object\n * @return {String} Block, or inverse block if specified and falsey.\n * @block\n * @api public\n */\n\nhelpers.neither = function (a: any, b: any, options: any) {\n  return util.value(!a && !b, this, options);\n};\n\n/**\n * Returns true if `val` is falsey. Works as a block or inline helper.\n *\n * @param {String} `val`\n * @param {Object} `options` Handlebars provided options object\n * @return {String}\n * @block\n * @api public\n */\n\nhelpers.not = function (val: any, options: any) {\n  return util.value(!val, this, options);\n};\n\n/**\n * Block helper that renders a block if **any of** the given values\n * is truthy. If an inverse block is specified it will be rendered\n * when falsy.\n *\n * ```handlebars\n * {{#or a b c}}\n *   If any value is true this will be rendered.\n * {{/or}}\n * ```\n *\n * @param {...any} `arguments` Variable number of arguments\n * @param {Object} `options` Handlebars options object\n * @return {String} Block, or inverse block if specified and falsey.\n * @block\n * @api public\n */\n\nhelpers.or = function (...args: any[]) {\n  const len = args.length - 1;\n  const options = args[len];\n  let val = false;\n\n  for (let i = 0; i < len; i++) {\n    if (args[i]) {\n      val = true;\n      break;\n    }\n  }\n  return util.value(val, this, options);\n};\n\n/**\n * Block helper that always renders the inverse block **unless `a` is\n * is equal to `b`**.\n *\n * @param {String} `a`\n * @param {String} `b`\n * @param {Object} `options` Handlebars provided options object\n * @return {String} Inverse block by default, or block if falsey.\n * @block\n * @api public\n */\n\nhelpers.unlessEq = function (a: any, b: any, options: any) {\n  if (util.isOptions(b)) {\n    options = b;\n    b = options.hash.compare;\n  }\n  return util.value(a !== b, this, options);\n};\n\n/**\n * Block helper that always renders the inverse block **unless `a` is\n * is greater than `b`**.\n *\n * @param {Object} `a` The default value\n * @param {Object} `b` The value to compare\n * @param {Object} `options` Handlebars provided options object\n * @return {String} Inverse block by default, or block if falsey.\n * @block\n * @api public\n */\n\nhelpers.unlessGt = function (a: any, b: any, options: any) {\n  if (util.isOptions(b)) {\n    options = b;\n    b = options.hash.compare;\n  }\n  return util.value(a <= b, this, options);\n};\n\n/**\n * Block helper that always renders the inverse block **unless `a` is\n * is less than `b`**.\n *\n * @param {Object} `a` The default value\n * @param {Object} `b` The value to compare\n * @param {Object} `options` Handlebars provided options object\n * @return {String} Block, or inverse block if specified and falsey.\n * @block\n * @api public\n */\n\nhelpers.unlessLt = function (a: any, b: any, options: any) {\n  if (util.isOptions(b)) {\n    options = b;\n    b = options.hash.compare;\n  }\n  return util.value(a >= b, this, options);\n};\n\n/**\n * Block helper that always renders the inverse block **unless `a` is\n * is greater than or equal to `b`**.\n *\n * @param {any} `a`\n * @param {any} `b`\n * @param {Object} `options` Handlebars provided options object\n * @return {String} Block, or inverse block if specified and falsey.\n * @block\n * @api public\n */\n\nhelpers.unlessGteq = function (a: any, b: any, options: any) {\n  if (util.isOptions(b)) {\n    options = b;\n    b = options.hash.compare;\n  }\n  return util.value(a < b, this, options);\n};\n\n/**\n * Block helper that always renders the inverse block **unless `a` is\n * is less than or equal to `b`**.\n *\n * @param {any} `a`\n * @param {any} `b`\n * @param {Object} `options` Handlebars provided options object\n * @return {String} Block, or inverse block if specified and falsey.\n * @block\n * @api public\n */\n\nhelpers.unlessLteq = function (a: any, b: any, options: any) {\n  if (util.isOptions(b)) {\n    options = b;\n    b = options.hash.compare;\n  }\n  return util.value(a > b, this, options);\n};\n"]}