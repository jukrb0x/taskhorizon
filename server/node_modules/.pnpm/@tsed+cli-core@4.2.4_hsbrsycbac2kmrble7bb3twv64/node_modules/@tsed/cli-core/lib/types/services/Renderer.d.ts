import { Configuration } from "@tsed/di";
import { Observable } from "rxjs";
import { CliFs } from "./CliFs";
import "../utils/hbs";
export interface RenderOptions {
    path: string;
    templateDir: string;
    rootDir: string;
    output: string;
    baseDir: string;
    basename: string;
}
export declare abstract class Renderer {
    protected configuration: Configuration;
    templateDir: string;
    fs: CliFs;
    abstract get rootDir(): string;
    render(path: string, data: any, options?: Partial<RenderOptions>): Promise<void>;
    renderAll(paths: (string | RenderOptions)[], data: any, options?: Partial<RenderOptions>): Promise<Observable<unknown>>;
    write(content: string, options: any): Promise<void>;
    templateExists(path: string, options?: Partial<RenderOptions>): boolean;
    scan(pattern: string[], options?: any): Promise<string[]>;
    relativeFrom(path: string): string;
    update(path: string, actions: {
        type?: string;
        content: string;
        pattern?: RegExp;
    }[]): Promise<void>;
    protected mapOptions(path: string, options: Partial<RenderOptions>): {
        output: string;
        templateDir: string;
        rootDir: string;
    };
}
export declare class RootRendererService extends Renderer {
    get rootDir(): string;
}
export declare class SrcRendererService extends Renderer {
    get rootDir(): string;
}
export declare class ScriptsRendererService extends Renderer {
    get rootDir(): string;
}
