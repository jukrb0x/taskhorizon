{"version":3,"file":"CliYaml.js","sourceRoot":"","sources":["../../../src/services/CliYaml.ts"],"names":[],"mappings":";;;;AAAA,iCAA4C;AAC5C,8DAA6B;AAC7B,+BAA0B;AAC1B,mCAA8B;AAC9B,6DAAwD;AAGjD,IAAM,OAAO,GAAb,MAAM,OAAO;IAER,kBAAkB,CAAqB;IAGvC,EAAE,CAAQ;IAEpB,KAAK,CAAC,IAAI,CAAC,IAAY;QACrB,MAAM,IAAI,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,kBAAkB,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;QAElG,IAAI,IAAI,EAAE;YACR,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAC,QAAQ,EAAE,MAAM,EAAC,CAAC,CAAC;YAEjE,OAAO,iBAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SAC7B;QAED,OAAO,EAAE,CAAC;IACZ,CAAC;IAED,KAAK,CAAC,KAAK,CAAC,IAAY,EAAE,GAAQ;QAChC,MAAM,OAAO,GAAG,iBAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAEjC,MAAM,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,kBAAkB,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,IAAA,WAAI,EAAC,IAAI,CAAC,kBAAkB,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;QAE9G,OAAO,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,IAAI,EAAE,OAAO,EAAE,EAAC,QAAQ,EAAE,MAAM,EAAC,CAAC,CAAC;IAC9D,CAAC;CACF,CAAA;AAzBC;IAAC,IAAA,WAAM,GAAE;sCACqB,uCAAkB;mDAAC;AAEjD;IAAC,IAAA,WAAM,GAAE;sCACK,aAAK;mCAAC;AALT,OAAO;IADnB,IAAA,eAAU,GAAE;GACA,OAAO,CA0BnB;AA1BY,0BAAO","sourcesContent":["import {Inject, Injectable} from \"@tsed/di\";\nimport JsYaml from \"js-yaml\";\nimport {join} from \"path\";\nimport {CliFs} from \"./CliFs\";\nimport {ProjectPackageJson} from \"./ProjectPackageJson\";\n\n@Injectable()\nexport class CliYaml {\n  @Inject()\n  protected projectPackageJson: ProjectPackageJson;\n\n  @Inject()\n  protected fs: CliFs;\n\n  async read(path: string) {\n    const file = !this.fs.exists(path) ? this.fs.findUpFile(this.projectPackageJson.dir, path) : path;\n\n    if (file) {\n      const content = await this.fs.readFile(file, {encoding: \"utf8\"});\n\n      return JsYaml.load(content);\n    }\n\n    return {};\n  }\n\n  async write(path: string, obj: any) {\n    const content = JsYaml.dump(obj);\n\n    const file = this.fs.findUpFile(this.projectPackageJson.dir, path) || join(this.projectPackageJson.dir, path);\n\n    return this.fs.writeFile(file, content, {encoding: \"utf8\"});\n  }\n}\n"]}