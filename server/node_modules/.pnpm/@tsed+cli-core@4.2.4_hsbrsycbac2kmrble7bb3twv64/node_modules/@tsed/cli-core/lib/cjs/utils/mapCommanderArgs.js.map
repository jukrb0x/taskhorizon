{"version":3,"file":"mapCommanderArgs.js","sourceRoot":"","sources":["../../../src/utils/mapCommanderArgs.ts"],"names":[],"mappings":";;;AAAA,qCAAkD;AAGlD,SAAS,QAAQ,CAAC,KAAU,EAAE,EAAC,IAAI,EAAE,QAAQ,EAA2C;IACtF,IAAI,CAAC,KAAK,EAAE;QACV,OAAO,KAAK,CAAC;KACd;IACD,QAAQ,IAAI,EAAE;QACZ,KAAK,MAAM;YACT,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;YACtB,MAAM;QACR,KAAK,MAAM;YACT,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC;YAC1B,MAAM;QACR,KAAK,OAAO;YACV,KAAK,GAAG,KAAK,KAAK,MAAM,CAAC;YACzB,MAAM;QACR,KAAK,KAAK;YACR,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;iBAClB,KAAK,CAAC,GAAG,CAAC;iBACV,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,QAAQ,CAAC,KAAK,EAAE,EAAC,IAAI,EAAE,QAAQ,EAAC,CAAC,CAAC,CAAC;YACrD,MAAM;KACT;IAED,OAAO,KAAK,CAAC;AACf,CAAC;AAED,SAAgB,gBAAgB,CAAC,IAAiC,EAAE,WAAkB;IACpF,WAAW,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,IAAA,cAAO,EAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,IAAA,cAAO,EAAC,GAAG,CAAC,CAAC,CAAC;IACxF,IAAI,KAAK,GAAG,CAAC,CAAC;IAEd,OAAO,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,CAAC,GAAG,EAAE,EAAC,YAAY,EAAE,IAAI,EAAE,QAAQ,EAAC,CAAC,EAAE,EAAE;QACpF,MAAM,KAAK,GAAG,WAAW,CAAC,KAAK,CAAC,IAAI,YAAY,CAAC;QAEjD,KAAK,EAAE,CAAC;QAER,OAAO;YACL,GAAG,OAAO;YACV,CAAC,GAAG,CAAC,EAAE,QAAQ,CAAC,KAAK,EAAE,EAAC,IAAI,EAAE,QAAQ,EAAC,CAAC;SACzC,CAAC;IACJ,CAAC,EAAE,EAAE,CAAC,CAAC;AACT,CAAC;AAdD,4CAcC","sourcesContent":["import {isClass, Type, isArray} from \"@tsed/core\";\nimport {CommandArg} from \"../interfaces/CommandParameters\";\n\nfunction mapValue(value: any, {type, itemType}: {type?: Type<any>; itemType?: Type<any>}) {\n  if (!value) {\n    return value;\n  }\n  switch (type) {\n    case String:\n      value = String(value);\n      break;\n    case Number:\n      value = parseFloat(value);\n      break;\n    case Boolean:\n      value = value === \"true\";\n      break;\n    case Array:\n      value = String(value)\n        .split(\",\")\n        .map((value) => mapValue(value, {type: itemType}));\n      break;\n  }\n\n  return value;\n}\n\nexport function mapCommanderArgs(args: {[arg: string]: CommandArg}, commandArgs: any[]): any {\n  commandArgs = commandArgs.filter((arg) => !isClass(arg)).filter((arg) => !isArray(arg));\n  let index = 0;\n\n  return Object.entries(args).reduce((options, [arg, {defaultValue, type, itemType}]) => {\n    const value = commandArgs[index] || defaultValue;\n\n    index++;\n\n    return {\n      ...options,\n      [arg]: mapValue(value, {type, itemType})\n    };\n  }, {});\n}\n"]}