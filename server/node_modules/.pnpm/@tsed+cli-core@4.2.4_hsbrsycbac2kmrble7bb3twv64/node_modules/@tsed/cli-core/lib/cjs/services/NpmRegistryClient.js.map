{"version":3,"file":"NpmRegistryClient.js","sourceRoot":"","sources":["../../../src/services/NpmRegistryClient.ts"],"names":[],"mappings":";;;;;AAAA,iCAA4C;AAC5C,sDAAsB;AACtB,wEAAwC;AAExC,mDAA8C;AAE9C,MAAM,IAAI,GAAG,IAAA,sBAAY,GAAE,CAAC;AAC5B,MAAM,6BAA6B,GAAG,8DAA8D,CAAC;AACrG,MAAM,qBAAqB,GAAG,kBAAkB,CAAC;AAEjD,SAAgB,SAAS,CAAC,OAAe,EAAE,MAAc;IACvD,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;QAC7B,OAAO,OAAO,GAAG,MAAM,CAAC;KACzB;IAED,OAAO,OAAO,CAAC;AACjB,CAAC;AAND,8BAMC;AAEY,QAAA,eAAe,GAAG,KAAK,CAAC;AAG9B,IAAM,iBAAiB,yBAAvB,MAAM,iBAAiB;IAEpB,UAAU,CAAgB;IAElC,MAAM,CAAC,UAAU,CAAC,IAAY;QAC5B,kFAAkF;QAClF,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,uBAAe,CAAC,CAAC;IAC5C,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,QAAgB,EAAE,OAAY,EAAE;QAC5C,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC;QACvC,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QAE1D,MAAM,OAAO,GAAG;YACd,MAAM,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC,0EAA0E;YACzH,GAAG,IAAI,CAAC,OAAO;SAChB,CAAC;QAEF,IAAI;YACF,OAAO,MAAM,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,UAAU,EAAE;gBAC3C,GAAG,IAAI;gBACP,OAAO;aACR,CAAC,CAAC;SACJ;QAAC,OAAO,KAAK,EAAE;YACd,IAAI,IAAI,CAAC,KAAK,EAAE;gBACd,MAAM,IAAI,OAAO,CAAC,CAAC,OAAY,EAAE,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;gBAC9D,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC;gBAChB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;gBAEvB,OAAO,IAAI,CAAC,OAAO,CAAC,mBAAiB,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE,IAAI,CAAC,CAAC;aACnE;YAED,MAAM,KAAK,CAAC;SACb;IACH,CAAC;IAED,aAAa,CAAC,QAAgB,EAAE,QAAgB;QAC9C,IAAI,QAAQ,GAAG,QAAQ,CAAC;QAExB,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;YACzC,QAAQ,GAAG,aAAG,CAAC,OAAO,CAAC,SAAS,CAAC,QAAQ,EAAE,GAAG,CAAC,EAAE,QAAQ,CAAC,CAAC;SAC5D;QAED,IAAI,6BAA6B,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;YAChD,QAAQ,GAAG,QAAQ,CAAC,OAAO,CAAC,YAAY,EAAE,UAAU,CAAC,CAAC;SACvD;QAED,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,MAAM,CAAC,IAAY,EAAE,UAAuG,EAAE;QAClI,MAAM,EAAC,OAAO,EAAE,MAAM,EAAC,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE;YAC1D,OAAO,EAAE;gBACP,iBAAiB,EAAE,MAAM;aAC1B;YACD,EAAE,EAAE;gBACF,IAAI;gBACJ,IAAI,EAAE,GAAG;gBACT,IAAI,EAAE,CAAC;gBACP,OAAO,EAAE,IAAI;gBACb,UAAU,EAAE,IAAI;gBAChB,WAAW,EAAE,GAAG;gBAChB,GAAG,OAAO;aACX;SACF,CAAC,CAAC;QAEH,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,KAAK,CAAC,IAAI,CAAC,WAAmB,EAAE,KAAK,GAAG,CAAC;QACvC,IAAI;YACF,OAAO,MAAM,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE;gBACrC,OAAO,EAAE;oBACP,iBAAiB,EAAE,MAAM;iBAC1B;gBACD,UAAU,EAAE,KAAK;gBACjB,KAAK;aACN,CAAC,CAAC;SACJ;QAAC,OAAO,EAAE,EAAE;YACX,OAAO,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;SACvD;IACH,CAAC;IAEO,KAAK,CAAC,QAAQ,CAAC,WAAmB;QACxC,MAAM,CAAC,EAAC,OAAO,EAAE,GAAG,EAAC,CAAC,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;QAExD,OAAO;YACL,GAAG,GAAG;YACN,WAAW,EAAE;gBACX,MAAM,EAAE,GAAG,CAAC,OAAO;aACpB;YACD,QAAQ,EAAE;gBACR,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE;oBACb,IAAI,EAAE,WAAW;oBACjB,OAAO,EAAE,GAAG,CAAC,OAAO;oBACpB,YAAY,EAAE,EAAE;oBAChB,eAAe,EAAE,EAAE;iBACpB;aACF;SACF,CAAC;IACJ,CAAC;CACF,CAAA;AAzGC;IAAC,IAAA,WAAM,EAAC,6BAAa,CAAC;sCACF,6BAAa;qDAAC;AAFvB,iBAAiB;IAD7B,IAAA,eAAU,GAAE;GACA,iBAAiB,CA0G7B;AA1GY,8CAAiB","sourcesContent":["import {Inject, Injectable} from \"@tsed/di\";\nimport url from \"url\";\nimport registry_url from \"registry-url\";\nimport {PackageInfo} from \"../interfaces/PackageJson\";\nimport {CliHttpClient} from \"./CliHttpClient\";\n\nconst HOST = registry_url();\nconst REGEX_REGISTRY_ENFORCED_HTTPS = /^https?:\\/\\/([^\\/]+\\.)?(yarnpkg\\.com|npmjs\\.(org|com))(\\/|$)/;\nconst REGEX_REGISTRY_PREFIX = /^(https?:)?\\/\\//i;\n\nexport function addSuffix(pattern: string, suffix: string): string {\n  if (!pattern.endsWith(suffix)) {\n    return pattern + suffix;\n  }\n\n  return pattern;\n}\n\nexport const SCOPE_SEPARATOR = \"%2f\";\n\n@Injectable()\nexport class NpmRegistryClient {\n  @Inject(CliHttpClient)\n  private httpClient: CliHttpClient;\n\n  static escapeName(name: string): string {\n    // scoped packages contain slashes and the npm registry expects them to be escaped\n    return name.replace(\"/\", SCOPE_SEPARATOR);\n  }\n\n  async request(pathname: string, opts: any = {}): Promise<any> {\n    const registry = opts.registry || HOST;\n    const requestUrl = this.getRequestUrl(registry, pathname);\n\n    const headers = {\n      Accept: opts.unfiltered ? \"application/json\" : \"application/vnd.npm.install-v1+json; q=1.0, application/json; q=0.8, */*\",\n      ...opts.headers\n    };\n\n    try {\n      return await this.httpClient.get(requestUrl, {\n        ...opts,\n        headers\n      });\n    } catch (error) {\n      if (opts.retry) {\n        await new Promise((resolve: any) => setTimeout(resolve, 200));\n        opts.retry -= 1;\n        opts.unfiltered = true;\n\n        return this.request(NpmRegistryClient.escapeName(pathname), opts);\n      }\n\n      throw error;\n    }\n  }\n\n  getRequestUrl(registry: string, pathname: string): string {\n    let resolved = pathname;\n\n    if (!REGEX_REGISTRY_PREFIX.test(pathname)) {\n      resolved = url.resolve(addSuffix(registry, \"/\"), pathname);\n    }\n\n    if (REGEX_REGISTRY_ENFORCED_HTTPS.test(resolved)) {\n      resolved = resolved.replace(/^http:\\/\\//, \"https://\");\n    }\n\n    return resolved;\n  }\n\n  /**\n   * Search a module on npm registry\n   * @param text\n   * @param options\n   */\n  async search(text: string, options: {size?: number; from?: number; quality?: number; popularity?: number; maintenance?: number} = {}) {\n    const {objects: result} = await this.request(`-/v1/search`, {\n      headers: {\n        \"Accept-Encoding\": \"gzip\"\n      },\n      qs: {\n        text,\n        size: 100,\n        from: 0,\n        quality: 0.65,\n        popularity: 0.98,\n        maintenance: 0.5,\n        ...options\n      }\n    });\n\n    return result;\n  }\n\n  async info(packageName: string, retry = 0): Promise<PackageInfo> {\n    try {\n      return await this.request(packageName, {\n        headers: {\n          \"Accept-Encoding\": \"gzip\"\n        },\n        unfiltered: false,\n        retry\n      });\n    } catch (er) {\n      return retry == 0 ? this.fallback(packageName) : null;\n    }\n  }\n\n  private async fallback(packageName: string) {\n    const [{package: pkg}] = await this.search(packageName);\n\n    return {\n      ...pkg,\n      \"dist-tags\": {\n        latest: pkg.version\n      },\n      versions: {\n        [pkg.version]: {\n          name: packageName,\n          version: pkg.version,\n          dependencies: {},\n          devDependencies: {}\n        }\n      }\n    };\n  }\n}\n"]}