"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CliLoadFile = void 0;
const tslib_1 = require("tslib");
const di_1 = require("@tsed/di");
const path_1 = require("path");
const ajv_1 = tslib_1.__importDefault(require("ajv"));
const CliYaml_1 = require("./CliYaml");
const CliFs_1 = require("./CliFs");
let CliLoadFile = class CliLoadFile {
    cliYaml;
    cliFs;
    #ajv;
    constructor() {
        const options = {
            verbose: false,
            coerceTypes: true,
            strict: false
        };
        this.#ajv = new ajv_1.default(options);
    }
    /**
     * Load a configuration file from yaml, json
     */
    async loadFile(path, schema) {
        let config;
        const ext = (0, path_1.extname)(path);
        if ([".yml", ".yaml"].includes(ext)) {
            config = await this.cliYaml.read(path);
        }
        else if ([".json"].includes(ext)) {
            config = await JSON.parse(await this.cliFs.readFile(path, "utf8"));
        }
        else if (!config) {
            throw new Error("Unsupported format file");
        }
        if (schema) {
            const validate = this.#ajv.compile(schema);
            const isValid = validate(config);
            if (!isValid) {
                const [error] = validate.errors;
                throw new Error([
                    `${error.instancePath.replace(/\//gi, ".")} `,
                    error.message,
                    error.params?.allowedValues && `. Allowed values: ${error.params?.allowedValues}`
                ]
                    .filter(Boolean)
                    .join(""));
            }
        }
        return config;
    }
};
tslib_1.__decorate([
    (0, di_1.Inject)(),
    tslib_1.__metadata("design:type", CliYaml_1.CliYaml)
], CliLoadFile.prototype, "cliYaml", void 0);
tslib_1.__decorate([
    (0, di_1.Inject)(),
    tslib_1.__metadata("design:type", CliFs_1.CliFs)
], CliLoadFile.prototype, "cliFs", void 0);
CliLoadFile = tslib_1.__decorate([
    (0, di_1.Injectable)(),
    tslib_1.__metadata("design:paramtypes", [])
], CliLoadFile);
exports.CliLoadFile = CliLoadFile;
//# sourceMappingURL=CliLoadFile.js.map