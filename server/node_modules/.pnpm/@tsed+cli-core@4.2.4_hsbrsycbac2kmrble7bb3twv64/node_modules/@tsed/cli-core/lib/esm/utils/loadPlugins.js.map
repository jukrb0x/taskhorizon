{"version":3,"file":"loadPlugins.js","sourceRoot":"","sources":["../../../src/utils/loadPlugins.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,eAAe,EAAkB,MAAM,UAAU,CAAC;AAC1D,OAAO,EAAC,OAAO,EAAC,MAAM,QAAQ,CAAC;AAC/B,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAC,KAAK,EAAC,MAAM,mBAAmB,CAAC;AACxC,OAAO,EAAC,kBAAkB,EAAC,MAAM,gCAAgC,CAAC;AAElE,MAAM,GAAG,GAAG,CAAC,QAAe,EAAE,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;AAEvD,MAAM,CAAC,KAAK,UAAU,WAAW,CAAC,QAAyB;IACzD,MAAM,IAAI,GAAG,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IAC3C,MAAM,OAAO,GAAG,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;IAEzD,MAAM,kBAAkB,GAAG,QAAQ,CAAC,MAAM,CAAqB,kBAAkB,CAAC,CAAC;IACnF,MAAM,EAAE,GAAG,QAAQ,CAAC,MAAM,CAAQ,KAAK,CAAC,CAAC;IAEzC,MAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,eAAe,CAAC;SAC7D,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,IAAI,aAAa,CAAC,IAAI,GAAG,CAAC,QAAQ,CAAC,GAAG,IAAI,aAAa,CAAC,CAAC;SAC5F,GAAG,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE;QACjB,IAAI;YACF,MAAM,EAAC,OAAO,EAAE,MAAM,EAAC,GAAG,MAAM,EAAE,CAAC,YAAY,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;YAE9D,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;gBACzB,MAAM,QAAQ,GAAG,eAAe,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,KAAK,EAAE,CAAC;gBAEtD,IAAI,QAAQ,EAAE,OAAO,CAAC,MAAM,EAAE;oBAC5B,MAAM,GAAG,CACP,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE;wBACnC,QAAQ,CAAC,GAAG,CAAC,KAAK,EAAE,eAAe,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;wBAEzD,IAAI,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;4BACnC,MAAM,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;yBAC9B;oBACH,CAAC,CAAC,CACH,CAAC;iBACH;gBAED,QAAQ,CAAC,GAAG,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;gBAE/B,IAAI,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;oBACnC,MAAM,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;iBAC/B;aACF;YACD,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,eAAe,CAAC,CAAC;SACvE;QAAC,OAAO,EAAE,EAAE;YACX,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,qBAAqB,EAAE,GAAG,CAAC,CAAC;SAC5E;IACH,CAAC,CAAC,CAAC;IAEL,MAAM,GAAG,CAAC,QAAQ,CAAC,CAAC;AACtB,CAAC","sourcesContent":["import {GlobalProviders, InjectorService} from \"@tsed/di\";\nimport {figures} from \"listr2\";\nimport chalk from \"chalk\";\nimport {CliFs} from \"../services/CliFs\";\nimport {ProjectPackageJson} from \"../services/ProjectPackageJson\";\n\nconst all = (promises: any[]) => Promise.all(promises);\n\nexport async function loadPlugins(injector: InjectorService) {\n  const name = injector.settings.get(\"name\");\n  const rootDir = injector.settings.get(\"project.rootDir\");\n\n  const projectPackageJson = injector.invoke<ProjectPackageJson>(ProjectPackageJson);\n  const fs = injector.invoke<CliFs>(CliFs);\n\n  const promises = Object.keys(projectPackageJson.allDependencies)\n    .filter((mod) => mod.startsWith(`@${name}/cli-plugin`) || mod.includes(`${name}-cli-plugin`))\n    .map(async (mod) => {\n      try {\n        const {default: plugin} = await fs.importModule(mod, rootDir);\n\n        if (!injector.has(plugin)) {\n          const provider = GlobalProviders.get(plugin)?.clone();\n\n          if (provider?.imports.length) {\n            await all(\n              provider.imports.map(async (token) => {\n                injector.add(token, GlobalProviders.get(token)?.clone());\n\n                if (injector.settings.get(\"loaded\")) {\n                  await injector.invoke(token);\n                }\n              })\n            );\n          }\n\n          injector.add(plugin, provider);\n\n          if (injector.settings.get(\"loaded\")) {\n            await injector.invoke(plugin);\n          }\n        }\n        injector.logger.info(chalk.green(figures.tick), mod, \"module loaded\");\n      } catch (er) {\n        injector.logger.warn(chalk.red(figures.cross), \"Fail to load plugin\", mod);\n      }\n    });\n\n  await all(promises);\n}\n"]}