{"version":3,"file":"CliDockerComposeYaml.js","sourceRoot":"","sources":["../../../src/services/CliDockerComposeYaml.ts"],"names":[],"mappings":";;;;AAAA,iCAA4C;AAC5C,6CAAsC;AACtC,uCAAkC;AAClC,qCAAoC;AAG7B,IAAM,oBAAoB,GAA1B,MAAM,oBAAoB;IAErB,OAAO,CAAU;IAE3B,KAAK,CAAC,IAAI;QACR,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;IACjD,CAAC;IAED,KAAK,CAAC,KAAK,CAAC,GAAQ;QAClB,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,oBAAoB,EAAE,GAAG,CAAC,CAAC;IACvD,CAAC;IAED,KAAK,CAAC,kBAAkB,CAAC,IAAY,EAAE,QAAgB;QACrD,MAAM,aAAa,GAAQ,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;QAC7C,IAAI,aAAa,EAAE;YACjB,IAAI,KAAU,CAAC;YACf,QAAQ,QAAQ,EAAE;gBAChB,KAAK,OAAO,CAAC;gBACb,KAAK,SAAS;oBACZ,KAAK,GAAG;wBACN,KAAK,EAAE,QAAQ,KAAK,OAAO,CAAC,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,gBAAgB;wBACtE,KAAK,EAAE,CAAC,WAAW,CAAC;wBACpB,WAAW,EAAE;4BACX,mBAAmB,EAAE,OAAO;4BAC5B,UAAU,EAAE,MAAM;4BAClB,cAAc,EAAE,MAAM;4BACtB,cAAc,EAAE,MAAM;yBACvB;qBACF,CAAC;oBACF,MAAM;gBACR,KAAK,UAAU;oBACb,KAAK,GAAG;wBACN,KAAK,EAAE,gBAAgB;wBACvB,KAAK,EAAE,CAAC,WAAW,CAAC;wBACpB,WAAW,EAAE;4BACX,aAAa,EAAE,MAAM;4BACrB,iBAAiB,EAAE,MAAM;4BACzB,WAAW,EAAE,MAAM;yBACpB;qBACF,CAAC;oBACF,MAAM;gBACR,KAAK,aAAa;oBAChB,KAAK,GAAG;wBACN,KAAK,EAAE,8BAA8B;wBACrC,OAAO,EAAE,kBAAkB;wBAC3B,KAAK,EAAE,CAAC,aAAa,CAAC;qBACvB,CAAC;oBACF,MAAM;gBACR,KAAK,OAAO;oBACV,KAAK,GAAG;wBACN,KAAK,EAAE,4CAA4C;wBACnD,OAAO,EAAE,kBAAkB;wBAC3B,KAAK,EAAE,CAAC,WAAW,CAAC;wBACpB,WAAW,EAAE;4BACX,WAAW,EAAE,YAAY;4BACzB,WAAW,EAAE,GAAG;yBACjB;qBACF,CAAC;oBACF,MAAM;gBACR,KAAK,SAAS;oBACZ,KAAK,GAAG;wBACN,KAAK,EAAE,aAAa;wBACpB,KAAK,EAAE,CAAC,aAAa,CAAC;qBACvB,CAAC;oBACF,MAAM;aACT;YAED,IAAA,eAAQ,EAAC,aAAa,EAAE,YAAY,IAAA,uBAAS,EAAC,IAAI,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;YAC9D,MAAM,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;SACjC;IACH,CAAC;CACF,CAAA;AAtEC;IAAC,IAAA,WAAM,GAAE;sCACU,iBAAO;qDAAC;AAFhB,oBAAoB;IADhC,IAAA,eAAU,GAAE;GACA,oBAAoB,CAuEhC;AAvEY,oDAAoB","sourcesContent":["import {Inject, Injectable} from \"@tsed/di\";\nimport {snakeCase} from \"change-case\";\nimport {CliYaml} from \"./CliYaml\";\nimport {setValue} from \"@tsed/core\";\n\n@Injectable()\nexport class CliDockerComposeYaml {\n  @Inject()\n  protected cliYaml: CliYaml;\n\n  async read() {\n    return this.cliYaml.read(\"docker-compose.yml\");\n  }\n\n  async write(obj: any) {\n    return this.cliYaml.write(\"docker-compose.yml\", obj);\n  }\n\n  async addDatabaseService(name: string, database: string) {\n    const dockerCompose: any = await this.read();\n    if (dockerCompose) {\n      let value: any;\n      switch (database) {\n        case \"mysql\":\n        case \"mariadb\":\n          value = {\n            image: database === \"mysql\" ? \"mysql:8.0.28-oracle\" : \"mariadb:10.7.3\",\n            ports: [\"3306:3306\"],\n            environment: {\n              MYSQL_ROOT_PASSWORD: \"admin\",\n              MYSQL_USER: \"test\",\n              MYSQL_PASSWORD: \"test\",\n              MYSQL_DATABASE: \"test\"\n            }\n          };\n          break;\n        case \"postgres\":\n          value = {\n            image: \"postgres:9.6.1\",\n            ports: [\"5432:5432\"],\n            environment: {\n              POSTGRES_USER: \"test\",\n              POSTGRES_PASSWORD: \"test\",\n              POSTGRES_DB: \"test\"\n            }\n          };\n          break;\n        case \"cockroachdb\":\n          value = {\n            image: \"cockroachdb/cockroach:v2.1.4\",\n            command: \"start --insecure\",\n            ports: [\"26257:26257\"]\n          };\n          break;\n        case \"mssql\":\n          value = {\n            image: \"mcr.microsoft.com/mssql/server:2017-latest\",\n            command: \"start --insecure\",\n            ports: [\"1433:1433\"],\n            environment: {\n              SA_PASSWORD: \"Admin12345\",\n              ACCEPT_EULA: \"Y\"\n            }\n          };\n          break;\n        case \"mongodb\":\n          value = {\n            image: \"mongo:5.0.8\",\n            ports: [\"27017:27017\"]\n          };\n          break;\n      }\n\n      setValue(dockerCompose, `services.${snakeCase(name)}`, value);\n      await this.write(dockerCompose);\n    }\n  }\n}\n"]}