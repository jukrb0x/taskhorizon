{"version":3,"file":"CliLoadFile.js","sourceRoot":"","sources":["../../../src/services/CliLoadFile.ts"],"names":[],"mappings":";AAAA,OAAO,EAAC,MAAM,EAAE,UAAU,EAAC,MAAM,UAAU,CAAC;AAC5C,OAAO,EAAC,OAAO,EAAC,MAAM,MAAM,CAAC;AAC7B,OAAO,GAAa,MAAM,KAAK,CAAC;AAChC,OAAO,EAAC,OAAO,EAAC,MAAM,WAAW,CAAC;AAClC,OAAO,EAAC,KAAK,EAAC,MAAM,SAAS,CAAC;AAGvB,IAAM,WAAW,GAAjB,MAAM,WAAW;IAEZ,OAAO,CAAU;IAGjB,KAAK,CAAQ;IAEvB,IAAI,CAAM;IAEV;QACE,MAAM,OAAO,GAAG;YACd,OAAO,EAAE,KAAK;YACd,WAAW,EAAE,IAAI;YACjB,MAAM,EAAE,KAAK;SACd,CAAC;QAEF,IAAI,CAAC,IAAI,GAAG,IAAI,GAAG,CAAC,OAAO,CAAC,CAAC;IAC/B,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,QAAQ,CAAc,IAAY,EAAE,MAAe;QACvD,IAAI,MAAW,CAAC;QAChB,MAAM,GAAG,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;QAE1B,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;YACnC,MAAM,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACxC;aAAM,IAAI,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;YAClC,MAAM,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,MAAM,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC;SACpE;aAAM,IAAI,CAAC,MAAM,EAAE;YAClB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;SAC5C;QAED,IAAI,MAAM,EAAE;YACV,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YAE3C,MAAM,OAAO,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC;YAEjC,IAAI,CAAC,OAAO,EAAE;gBACZ,MAAM,CAAC,KAAK,CAAC,GAAG,QAAQ,CAAC,MAAO,CAAC;gBAEjC,MAAM,IAAI,KAAK,CACb;oBACE,GAAG,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,GAAG;oBAC7C,KAAK,CAAC,OAAO;oBACb,KAAK,CAAC,MAAM,EAAE,aAAa,IAAI,qBAAqB,KAAK,CAAC,MAAM,EAAE,aAAa,EAAE;iBAClF;qBACE,MAAM,CAAC,OAAO,CAAC;qBACf,IAAI,CAAC,EAAE,CAAC,CACZ,CAAC;aACH;SACF;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;CACF,CAAA;AAvDC;IAAC,MAAM,EAAE;8BACU,OAAO;4CAAC;AAE3B;IAAC,MAAM,EAAE;8BACQ,KAAK;0CAAC;AALZ,WAAW;IADvB,UAAU,EAAE;;GACA,WAAW,CAwDvB;SAxDY,WAAW","sourcesContent":["import {Inject, Injectable} from \"@tsed/di\";\nimport {extname} from \"path\";\nimport Ajv, {Schema} from \"ajv\";\nimport {CliYaml} from \"./CliYaml\";\nimport {CliFs} from \"./CliFs\";\n\n@Injectable()\nexport class CliLoadFile {\n  @Inject()\n  protected cliYaml: CliYaml;\n\n  @Inject()\n  protected cliFs: CliFs;\n\n  #ajv: Ajv;\n\n  constructor() {\n    const options = {\n      verbose: false,\n      coerceTypes: true,\n      strict: false\n    };\n\n    this.#ajv = new Ajv(options);\n  }\n\n  /**\n   * Load a configuration file from yaml, json\n   */\n  async loadFile<Model = any>(path: string, schema?: Schema): Promise<Model> {\n    let config: any;\n    const ext = extname(path);\n\n    if ([\".yml\", \".yaml\"].includes(ext)) {\n      config = await this.cliYaml.read(path);\n    } else if ([\".json\"].includes(ext)) {\n      config = await JSON.parse(await this.cliFs.readFile(path, \"utf8\"));\n    } else if (!config) {\n      throw new Error(\"Unsupported format file\");\n    }\n\n    if (schema) {\n      const validate = this.#ajv.compile(schema);\n\n      const isValid = validate(config);\n\n      if (!isValid) {\n        const [error] = validate.errors!;\n\n        throw new Error(\n          [\n            `${error.instancePath.replace(/\\//gi, \".\")} `,\n            error.message,\n            error.params?.allowedValues && `. Allowed values: ${error.params?.allowedValues}`\n          ]\n            .filter(Boolean)\n            .join(\"\")\n        );\n      }\n    }\n\n    return config;\n  }\n}\n"]}