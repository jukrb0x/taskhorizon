{"version":3,"file":"CliProxyAgent.js","sourceRoot":"","sources":["../../../src/services/CliProxyAgent.ts"],"names":[],"mappings":"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","sourcesContent":["import tunnel from \"tunnel\";\nimport {Configuration, Inject, Injectable, Value} from \"@tsed/di\";\nimport {CliExeca} from \"./CliExeca\";\nimport {camelCase} from \"change-case\";\nimport {URL} from \"url\";\n\nexport interface CliProxySettings {\n  url: string;\n  strictSsl: boolean;\n}\n\nfunction cast(value: any) {\n  if ([\"undefined\"].includes(value)) {\n    return undefined;\n  }\n  if ([\"null\"].includes(value)) {\n    return null;\n  }\n\n  if ([\"false\"].includes(value)) {\n    return false;\n  }\n\n  if ([\"true\"].includes(value)) {\n    return false;\n  }\n\n  return value;\n}\n\n@Injectable()\n@Configuration({\n  proxy: {\n    url: process.env.HTTPS_PROXY || process.env.HTTP_PROXY,\n    strictSsl: process.env.NODE_TLS_REJECT_UNAUTHORIZED !== undefined ? process.env.NODE_TLS_REJECT_UNAUTHORIZED !== \"0\" : true\n  }\n})\nexport class CliProxyAgent {\n  @Value(\"proxy\", {})\n  proxySettings: CliProxySettings;\n\n  @Inject()\n  protected cliExeca: CliExeca;\n\n  hasProxy() {\n    return !!this.proxySettings.url;\n  }\n\n  get(type: \"http\" | \"https\") {\n    if (this.hasProxy()) {\n      const {strictSsl = true} = this.proxySettings;\n      const url = new URL(this.proxySettings.url);\n      const protocol = url.protocol.replace(\":\", \"\");\n\n      const options = {\n        proxy: {\n          host: url.hostname,\n          port: (url.port ? +url.port : undefined) as any,\n          proxyAuth: url.username && url.password ? `${url.username}:${url.password}` : undefined,\n          rejectUnauthorized: strictSsl\n        }\n      };\n\n      const method = camelCase([type, \"over\", protocol].join(\" \"));\n\n      if ((tunnel as any)[method]) {\n        return (tunnel as any)[method](options);\n      }\n    }\n\n    return null;\n  }\n\n  async resolveProxySettings(): Promise<void> {\n    if (this.hasProxy()) {\n      return;\n    }\n\n    const result = await Promise.all([\n      this.cliExeca.getAsync(\"npm\", [\"config\", \"get\", \"proxy\"]),\n      this.cliExeca.getAsync(\"npm\", [\"config\", \"get\", \"http-proxy\"]),\n      this.cliExeca.getAsync(\"npm\", [\"config\", \"get\", \"https-proxy\"]),\n      this.cliExeca.getAsync(\"npm\", [\"config\", \"get\", \"strict-ssl\"])\n    ]);\n\n    const [proxy, httpProxy, httpsProxy, strictSsl] = result.map(cast);\n    const url = httpsProxy || httpProxy || proxy;\n\n    if (url) {\n      this.proxySettings = {\n        url,\n        strictSsl: cast(strictSsl) !== false\n      };\n    }\n  }\n}\n"]}