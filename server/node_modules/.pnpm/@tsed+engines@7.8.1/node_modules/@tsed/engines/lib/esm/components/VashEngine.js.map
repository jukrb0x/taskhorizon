{"version":3,"file":"VashEngine.js","sourceRoot":"","sources":["../../../src/components/VashEngine.ts"],"names":[],"mappings":";AAAA,OAAO,EAAC,SAAS,EAAC,MAAM,MAAM,CAAC;AAC/B,OAAO,EAAC,UAAU,EAAC,MAAM,0BAA0B,CAAC;AACpD,OAAO,EAAC,MAAM,EAAC,MAAM,UAAU,CAAC;AAGhC,IAAa,UAAU,GAAvB,MAAa,UAAW,SAAQ,MAAM;IACpC,OAAO,CAAC,QAAgB,EAAE,OAAY;QACpC,IAAI,OAAO,CAAC,OAAO,EAAE;YACnB,KAAK,MAAM,GAAG,IAAI,OAAO,CAAC,OAAO,EAAE;gBACjC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,OAAO,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,UAAU,EAAE;oBACtF,SAAS;iBACV;gBACD,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;aACjD;SACF;QAED,MAAM,OAAO,GAAG,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC,CAAC;QAElE,OAAO,KAAK,EAAE,OAAY,EAAE,EAAE;YAC5B,MAAM,GAAG,GAAG,MAAM,OAAO,CAAC,OAAO,CAAC,CAAC;YACnC,GAAG,CAAC,YAAY,EAAE,CAAC;YACnB,OAAO,GAAG,CAAC,QAAQ,EAAE,CAAC;QACxB,CAAC,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,QAAgB,EAAE,OAAY;QACzC,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;QAEhD,MAAM,GAAG,GAAG,MAAM,OAAO,CAAC,OAAO,CAAC,CAAC;QACnC,OAAO,GAAG,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;IAChC,CAAC;CACF,CAAA;AA1BY,UAAU;IADtB,UAAU,CAAC,MAAM,CAAC;GACN,UAAU,CA0BtB;SA1BY,UAAU","sourcesContent":["import {promisify} from \"util\";\nimport {ViewEngine} from \"../decorators/viewEngine\";\nimport {Engine} from \"./Engine\";\n\n@ViewEngine(\"vash\")\nexport class VashEngine extends Engine {\n  compile(template: string, options: any): (options: any) => Promise<string> {\n    if (options.helpers) {\n      for (const key in options.helpers) {\n        if (!options.helpers.hasOwnProperty(key) || typeof options.helpers[key] !== \"function\") {\n          continue;\n        }\n        this.engine.helpers[key] = options.helpers[key];\n      }\n    }\n\n    const compile = promisify(this.engine.compile(template, options));\n\n    return async (options: any) => {\n      const ctx = await compile(options);\n      ctx.finishLayout();\n      return ctx.toString();\n    };\n  }\n\n  async render(template: string, options: any) {\n    const compile = this.compile(template, options);\n\n    const tpl = await compile(options);\n    return tpl.replace(/\\n$/, \"\");\n  }\n}\n"]}