{"version":3,"file":"cache.js","sourceRoot":"","sources":["../../../src/utils/cache.ts"],"names":[],"mappings":"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","sourcesContent":["import fs from \"fs-extra\";\nimport {dirname, extname, isAbsolute, join} from \"path\";\n\nconst readCache: Map<string, string> = new Map();\nconst cacheStore: Map<string, any> = new Map();\n\nexport const requires: Map<string, any> = new Map();\n\nexport function getCachedEngine(name: string, toName: string = name) {\n  const mdl = requires.get(toName) || {};\n\n  return mdl.default || mdl;\n}\n\nexport async function importEngine(name: string, toName: string = name) {\n  if (!requires.has(toName)) {\n    await setEngine(name, toName);\n  }\n\n  return getCachedEngine(toName);\n}\n\nexport async function setEngine(name: string, toName: string = name) {\n  const mdl = await import(name);\n  requires.set(toName, mdl);\n}\n\nexport function setToCache(key: string, value: any) {\n  readCache.set(key, value);\n}\n\nexport function getFromCache(key: string) {\n  return readCache.get(key);\n}\n\n/**\n * Clear the cache.\n *\n * @api public\n */\n\nexport const clearCache = () => {\n  readCache.clear();\n  cacheStore.clear();\n};\n\n/**\n * Conditionally cache `compiled` template based\n * on the `options` filename and `.cache` boolean.\n *\n * @param {Object} options\n * @param {Function} compiled\n * @return {Function}\n */\nexport function cache(options: any, compiled?: any) {\n  // cachable\n  if (compiled && options.filename && options.cache) {\n    readCache.delete(options.filename);\n    cacheStore.set(options.filename, compiled);\n    return compiled;\n  }\n\n  // check cache\n  if (options.filename && options.cache) {\n    return cacheStore.get(options.filename);\n  }\n\n  return compiled;\n}\n\n/**\n * Read `path` with `options` with\n * callback `(err, str)`. When `options.cache`\n * is true the template string will be cached.\n *\n * @param path\n * @param {String} options\n */\nexport async function read(path: string, options: any): Promise<string> {\n  let str = readCache.get(path);\n\n  // cached (only if cached is a string and not a compiled template function)\n  if (options.cache && str && typeof str === \"string\") {\n    return str;\n  }\n\n  // read\n  str = await fs.readFile(path, \"utf8\");\n\n  // remove extraneous utf8 BOM marker\n  str = str.replace(/^\\uFEFF/, \"\");\n\n  if (options.cache) {\n    readCache.set(path, str);\n  }\n\n  return str;\n}\n\n/**\n * Read `path` with `options` with\n * callback `(err, str)`. When `options.cache`\n * is true the partial string will be cached.\n *\n * @param path\n * @param {String} options\n * @api private\n */\nexport async function readPartials(path: string, options: any): Promise<Record<string, string> | void> {\n  if (!options.partials) {\n    return;\n  }\n\n  const keys = Object.keys(options.partials);\n  const partials: Record<string, string> = {};\n\n  return new Promise((resolve, reject) => {\n    async function next(index: number): Promise<any> {\n      if (index === keys.length) {\n        return resolve(partials);\n      }\n\n      const key = keys[index];\n      const partialPath = options.partials[key];\n\n      if (partialPath === undefined || partialPath === null || partialPath === false) {\n        return next(++index);\n      }\n\n      let file;\n      if (isAbsolute(partialPath)) {\n        if (extname(partialPath) !== \"\") {\n          file = partialPath;\n        } else {\n          file = join(partialPath + extname(path));\n        }\n      } else {\n        file = join(dirname(path), partialPath + extname(path));\n      }\n\n      try {\n        partials[key] = await read(file, options);\n        next(++index);\n      } catch (err) {\n        reject(err);\n      }\n    }\n\n    next(0);\n  });\n}\n"]}