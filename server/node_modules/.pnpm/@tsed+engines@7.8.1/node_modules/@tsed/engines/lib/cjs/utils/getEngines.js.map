{"version":3,"file":"getEngines.js","sourceRoot":"","sources":["../../../src/utils/getEngines.ts"],"names":[],"mappings":";;;AACA,qEAAuD;AAWvD,MAAM,WAAW,GAAG,KAAK,EAAE,EAAO,EAAE,EAAmB,EAAE,EAAE;IACzD,IAAI;QACF,MAAM,IAAI,GAAG,MAAM,EAAE,EAAE,CAAC;QACxB,EAAE,IAAI,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QACrB,OAAO,IAAI,CAAC;KACb;IAAC,OAAO,EAAE,EAAE;QACX,IAAI,EAAE,EAAE;YACN,EAAE,CAAC,EAAE,CAAC,CAAC;SACR;aAAM;YACL,MAAM,EAAE,CAAC;SACV;KACF;AACH,CAAC,CAAC;AAEF,SAAgB,SAAS,CAAC,IAAY;IACpC,MAAM,EAAE,GAAG,KAAK,EAAE,IAAY,EAAE,OAAY,EAAE,EAAmB,EAAE,EAAE;QACnE,MAAM,MAAM,GAAG,0BAAO,CAAC,GAAG,CAAC,IAAI,CAAE,CAAC;QAClC,MAAM,MAAM,CAAC,OAAO,EAAE,CAAC;QAEvB,OAAO,WAAW,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,EAAE,OAAO,CAAC,EAAE,EAAE,CAAC,CAAC;IACjE,CAAC,CAAC;IAEF,EAAE,CAAC,MAAM,GAAG,KAAK,EAAE,QAAgB,EAAE,OAAsB,EAAE,EAAkB,EAAE,EAAE;QACjF,MAAM,MAAM,GAAG,0BAAO,CAAC,GAAG,CAAC,IAAI,CAAE,CAAC;QAClC,MAAM,MAAM,CAAC,OAAO,EAAE,CAAC;QAEvB,OAAO,WAAW,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,OAAO,CAAC,EAAE,EAAE,CAAC,CAAC;IACjE,CAAC,CAAC;IAEF,OAAO,EAAS,CAAC;AACnB,CAAC;AAhBD,8BAgBC;AAED,IAAI,YAAiB,CAAC;AAEtB,SAAgB,UAAU;IACxB,YAAY;QACV,YAAY;YACZ,0BAAO,CAAC,mBAAmB,EAAE,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;gBAChD,OAAO;oBACL,GAAG,GAAG;oBACN,CAAC,GAAG,CAAC,EAAE,SAAS,CAAC,GAAG,CAAC;iBACtB,CAAC;YACJ,CAAC,EAAE,EAAE,CAAC,CAAC;IAET,OAAO,YAAY,CAAC;AACtB,CAAC;AAXD,gCAWC","sourcesContent":["import {EngineOptions} from \"../components/Engine\";\nimport {engines} from \"../registries/EnginesContainer\";\n\nexport type RenderCallback = (err: Error | null, str?: string | any) => any;\nexport interface EngineFunction {\n  (path: string, options: any, cb: RenderCallback): void;\n  (path: string, options: any): Promise<string>;\n\n  render(template: string, options: any, cb: RenderCallback): void;\n  render(template: string, options: any): Promise<string>;\n}\n\nconst callbackify = async (fn: any, cb?: RenderCallback) => {\n  try {\n    const html = await fn();\n    cb && cb(null, html);\n    return html;\n  } catch (er) {\n    if (cb) {\n      cb(er);\n    } else {\n      throw er;\n    }\n  }\n};\n\nexport function getEngine(name: string): EngineFunction {\n  const cb = async (path: string, options: any, cb?: RenderCallback) => {\n    const engine = engines.get(name)!;\n    await engine.$onInit();\n\n    return callbackify(() => engine.renderFile(path, options), cb);\n  };\n\n  cb.render = async (template: string, options: EngineOptions, cb: RenderCallback) => {\n    const engine = engines.get(name)!;\n    await engine.$onInit();\n\n    return callbackify(() => engine.render(template, options), cb);\n  };\n\n  return cb as any;\n}\n\nlet localEngines: any;\n\nexport function getEngines(): Record<string, EngineFunction> {\n  localEngines =\n    localEngines ||\n    engines.getSupportedEngines().reduce((acc, key) => {\n      return {\n        ...acc,\n        [key]: getEngine(key)\n      };\n    }, {});\n\n  return localEngines;\n}\n"]}