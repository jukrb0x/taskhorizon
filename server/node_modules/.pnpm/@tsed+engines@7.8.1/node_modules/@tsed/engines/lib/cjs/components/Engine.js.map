{"version":3,"file":"Engine.js","sourceRoot":"","sources":["../../../src/components/Engine.ts"],"names":[],"mappings":"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","sourcesContent":["import {cache, getCachedEngine, importEngine, read, readPartials} from \"../utils/cache\";\n\nexport interface ViewEngineOptions {\n  requires?: string | string[];\n}\n\nexport interface EngineOptions {\n  cache?: boolean;\n\n  [otherOptions: string]: any;\n}\n\nexport class Engine {\n  protected driverName: string;\n\n  constructor(readonly name: string, readonly options: ViewEngineOptions) {}\n\n  get engine(): any {\n    return getCachedEngine(this.name);\n  }\n\n  async $onInit() {\n    await this.importEngine(this.name, this.options);\n  }\n\n  compile(template: string, options: EngineOptions) {\n    options = this.$cacheOptions(template, options, false);\n\n    return cache(options) || cache(options, this.$compile.call(this, template, options));\n  }\n\n  compileFile(file: string, options: EngineOptions) {\n    options = this.$cacheOptions(file, options, true);\n\n    return cache(options) || cache(options, this.$compileFile.call(this, file, options));\n  }\n\n  async render(template: string, options: EngineOptions) {\n    const compile = await this.compile(template, options);\n\n    return compile(options);\n  }\n\n  async renderFile(file: string, options: EngineOptions) {\n    const opts = await this.readPartials(file, options);\n    const compile = await this.compileFile(file, opts);\n\n    return compile(opts);\n  }\n\n  protected async readPartials(file: string, options: EngineOptions) {\n    options.filename = file;\n    const partials = await readPartials(file, options);\n\n    const opts = Object.assign({}, options);\n    opts.partials = partials;\n\n    return opts;\n  }\n\n  protected $cacheOptions(template: string, options: EngineOptions, fromFile?: boolean) {\n    return options;\n  }\n\n  protected $compile(template: string, options: EngineOptions): (options: EngineOptions) => Promise<string> {\n    return this.engine.compile(template, options);\n  }\n\n  protected async $compileFile(file: string, options: EngineOptions) {\n    const template = await read(file, options);\n    return this.$compile(template, options);\n  }\n\n  protected importEngine(name: string, options: ViewEngineOptions) {\n    const reqs = ([] as string[]).concat(options.requires || [name]);\n\n    const promises = reqs.map(async (req: string) => {\n      try {\n        await importEngine(req, name);\n        this.driverName = req;\n      } catch (er) {}\n    });\n\n    return Promise.all(promises);\n  }\n}\n"]}