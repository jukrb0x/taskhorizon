{"version":3,"file":"DustEngine.js","sourceRoot":"","sources":["../../../src/components/DustEngine.ts"],"names":[],"mappings":";;;;AAAA,0CAAoC;AACpC,+BAA6B;AAC7B,yDAAoD;AACpD,qCAAgC;AAChC,+BAA+B;AAK/B,IAAa,UAAU,GAAvB,MAAa,UAAW,SAAQ,eAAM;IAC5B,KAAK,GAAG,GAAG,CAAC;IACZ,GAAG,GAAG,MAAM,CAAC;IAErB,SAAS,CAAC,OAAY;QACpB,IAAI,OAAO,EAAE;YACX,IAAI,OAAO,CAAC,GAAG,EAAE;gBACf,IAAI,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC;aACxB;YACD,IAAI,OAAO,CAAC,KAAK,EAAE;gBACjB,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;aAC5B;YACD,IAAI,OAAO,CAAC,QAAQ,IAAI,OAAO,CAAC,QAAQ,CAAC,KAAK,EAAE;gBAC9C,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC;aACrC;SACF;QACD,IAAI,CAAC,OAAO,IAAI,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;YAAE,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,EAAE,CAAC;QAEpE,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,KAAK,EAAE,IAAY,EAAE,QAAa,EAAE,EAAE;YACzD,IAAI,IAAA,cAAO,EAAC,IAAI,CAAC,KAAK,EAAE,EAAE;gBACxB,IAAI,IAAI,IAAI,IAAI,CAAC,GAAG,EAAE,CAAC;aACxB;YACD,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;gBACnB,IAAI,GAAG,GAAG,IAAI,CAAC,KAAK,IAAI,IAAI,EAAE,CAAC;aAChC;YACD,IAAI;gBACF,QAAQ,CAAC,IAAI,EAAE,MAAM,IAAA,YAAI,EAAC,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC;aAC3C;YAAC,OAAO,EAAE,EAAE;gBACX,QAAQ,CAAC,EAAE,CAAC,CAAC;aACd;QACH,CAAC,CAAC;IACJ,CAAC;IAES,QAAQ,CAAC,QAAgB,EAAE,OAAY;QAC/C,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QAExB,IAAI,YAAY,CAAC;QAEjB,IAAI,OAAO,CAAC,QAAQ,EAAE;YACpB,YAAY,GAAG,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC;SAC3H;QAED,OAAO,IAAA,gBAAS,EAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAQ,CAAC;IACzE,CAAC;CACF,CAAA;AA5CY,UAAU;IAHtB,IAAA,uBAAU,EAAC,MAAM,EAAE;QAClB,QAAQ,EAAE,CAAC,gBAAgB,EAAE,iBAAiB,CAAC;KAChD,CAAC;GACW,UAAU,CA4CtB;AA5CY,gCAAU","sourcesContent":["import {read} from \"../utils/cache\";\nimport {extname} from \"path\";\nimport {ViewEngine} from \"../decorators/viewEngine\";\nimport {Engine} from \"./Engine\";\nimport {promisify} from \"util\";\n\n@ViewEngine(\"dust\", {\n  requires: [\"dustjs-helpers\", \"dustjs-linkedin\"]\n})\nexport class DustEngine extends Engine {\n  private views = \".\";\n  private ext = \"dust\";\n\n  configure(options: any) {\n    if (options) {\n      if (options.ext) {\n        this.ext = options.ext;\n      }\n      if (options.views) {\n        this.views = options.views;\n      }\n      if (options.settings && options.settings.views) {\n        this.views = options.settings.views;\n      }\n    }\n    if (!options || (options && !options.cache)) this.engine.cache = {};\n\n    this.engine.onLoad = async (path: string, callback: any) => {\n      if (extname(path) === \"\") {\n        path += `.${this.ext}`;\n      }\n      if (path[0] !== \"/\") {\n        path = `${this.views}/${path}`;\n      }\n      try {\n        callback(null, await read(path, options));\n      } catch (er) {\n        callback(er);\n      }\n    };\n  }\n\n  protected $compile(template: string, options: any) {\n    this.configure(options);\n\n    let templateName;\n\n    if (options.filename) {\n      templateName = options.filename.replace(new RegExp(\"^\" + this.views + \"/\"), \"\").replace(new RegExp(\"\\\\.\" + this.ext), \"\");\n    }\n\n    return promisify(this.engine.compileFn(template, templateName)) as any;\n  }\n}\n"]}