{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../../src/interfaces/interfaces.ts"],"names":[],"mappings":"","sourcesContent":["import type {BaseContext} from \"@tsed/di\";\nimport type {Cache, CachingConfig, Store} from \"cache-manager\";\nimport {FactoryStore} from \"cache-manager/dist/caching\";\nimport type {CacheManager} from \"../services/PlatformCache\";\n\n/**\n * @deprecated Since 2022-11. Use FactoryStore instead.\n */\nexport type PlatformCacheLegacyStoreFactory = {\n  create(...args: any[]): Promise<Store | any> | Store | any;\n};\n\nexport type PlatformCacheSettings<Config extends object = any, S extends Store = any> = CachingConfig<Config> & {\n  caches?: Cache[];\n  store?: \"memory\" | Store | PlatformCacheLegacyStoreFactory | FactoryStore<S, Config>;\n  max?: number;\n  keyResolver?: (args: any[], ctx: BaseContext) => string;\n\n  /**\n   * You may pass in any other arguments these will be passed on to the `create` method of your store,\n   * otherwise they will be ignored.\n   */\n  [key: string]: any;\n};\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  namespace TsED {\n    interface Configuration {\n      cache?: PlatformCacheSettings | false;\n    }\n  }\n}\n\nexport interface OnCreateCacheManager {\n  $onCreateCacheManager(cache: CacheManager): void | Promise<void>;\n}\n"]}