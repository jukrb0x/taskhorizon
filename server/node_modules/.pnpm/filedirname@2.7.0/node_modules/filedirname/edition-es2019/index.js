"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.filedirnameFromCaller = exports.filedirnameFromError = exports.filedirnameFromPath = void 0;
const url_1 = require("url");
const path_1 = require("path");
const get_current_line_1 = __importStar(require("get-current-line"));
/** Fetch the file and directory paths from a path, uri, or `import.meta.url` */
function filedirnameFromPath(path) {
    let file;
    if (path.includes('://')) {
        // is a url, e.g. file://, or https://
        const url = new url_1.URL(path);
        file = url.protocol === 'file:' ? url_1.fileURLToPath(url) : url.href;
    }
    else {
        // is already a typical path
        file = path;
    }
    const directory = path_1.dirname(file);
    return [file, directory];
}
exports.filedirnameFromPath = filedirnameFromPath;
/** Fetch the file and directory paths from an Error instance. */
function filedirnameFromError(error) {
    return filedirnameFromPath(get_current_line_1.getFileFromError(error));
}
exports.filedirnameFromError = filedirnameFromError;
/** Fetch the file and directory paths from the caller. */
function filedirnameFromCaller() {
    return filedirnameFromPath(get_current_line_1.default({
        method: 'filedirname',
        frames: 0,
        immediate: false,
    }).file);
}
exports.filedirnameFromCaller = filedirnameFromCaller;
/** Fetch the file and directory paths from one of the overloads. */
function filedirname(arg) {
    // nothing
    if (arg == null) {
        return filedirnameFromCaller();
    }
    // string
    if (typeof arg === 'string') {
        return filedirnameFromPath(arg);
    }
    // error
    return filedirnameFromError(arg);
}
exports.default = filedirname;
