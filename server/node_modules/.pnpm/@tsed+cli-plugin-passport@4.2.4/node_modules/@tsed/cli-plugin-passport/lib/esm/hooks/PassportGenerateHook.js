var PassportGenerateHook_1;
import { __decorate, __metadata } from "tslib";
import { ProvidersInfoService } from "@tsed/cli";
import { Inject, OnExec, OnPrompt, ProjectPackageJson, SrcRendererService } from "@tsed/cli-core";
import { Injectable } from "@tsed/di";
import { paramCase } from "change-case";
import { PassportClient } from "../services/PassportClient.js";
import { TEMPLATE_DIR } from "../utils/templateDir.js";
let PassportGenerateHook = PassportGenerateHook_1 = class PassportGenerateHook {
    providersInfoService;
    projectPackageJson;
    srcRenderService;
    passportClient;
    packages;
    constructor(providersInfoService) {
        this.providersInfoService = providersInfoService;
        providersInfoService.add({
            name: "Protocol",
            value: "protocol",
            model: "{{symbolName}}.protocol"
        }, PassportGenerateHook_1);
    }
    async onGeneratePrompt() {
        this.packages = await this.passportClient.getPackages();
        const list = this.packages.map((item) => {
            return {
                name: `${item.name} - ${item.description}`,
                value: item.name
            };
        });
        return [
            {
                type: "autocomplete",
                name: "passportPackage",
                message: "Which passport package ?",
                when(state) {
                    return ["protocol"].includes(state.type);
                },
                source: async (state, keyword) => {
                    if (keyword) {
                        return list.filter((item) => item.name.toLowerCase().includes(keyword.toLowerCase()));
                    }
                    return list;
                }
            }
        ];
    }
    onGenerateExec(ctx) {
        if (this.providersInfoService.isMyProvider(ctx.type, PassportGenerateHook_1)) {
            ctx = this.mapOptions(ctx);
            const { passportPackage, symbolPath } = ctx;
            this.projectPackageJson.addDependency(ctx.passportPackage, this.getPassportPackageVersion(passportPackage));
            return [
                {
                    title: `Generate ${ctx.type} file to '${symbolPath}.ts'`,
                    task: () => this.srcRenderService.render(this.getTemplate(passportPackage), ctx, {
                        output: `${symbolPath}.ts`,
                        templateDir: TEMPLATE_DIR
                    })
                }
            ];
        }
        return [];
    }
    mapOptions(options) {
        return {
            ...options,
            protocolName: paramCase(options.name),
            passportPackage: options.passportPackage
        };
    }
    getTemplate(passportPackage) {
        const template = `${passportPackage}.protocol.hbs`;
        return this.srcRenderService.templateExists(template, { templateDir: TEMPLATE_DIR }) ? template : "generic.protocol.hbs";
    }
    getPassportPackageVersion(passportPackage) {
        const passportPkgDetails = this.packages.find((pkg) => pkg.name === passportPackage);
        return passportPkgDetails ? passportPkgDetails["dist-tags"]?.latest : undefined;
    }
};
__decorate([
    Inject(),
    __metadata("design:type", ProjectPackageJson)
], PassportGenerateHook.prototype, "projectPackageJson", void 0);
__decorate([
    Inject(),
    __metadata("design:type", SrcRendererService)
], PassportGenerateHook.prototype, "srcRenderService", void 0);
__decorate([
    Inject(),
    __metadata("design:type", PassportClient)
], PassportGenerateHook.prototype, "passportClient", void 0);
__decorate([
    OnPrompt("generate"),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], PassportGenerateHook.prototype, "onGeneratePrompt", null);
__decorate([
    OnExec("generate"),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Array)
], PassportGenerateHook.prototype, "onGenerateExec", null);
PassportGenerateHook = PassportGenerateHook_1 = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [ProvidersInfoService])
], PassportGenerateHook);
export { PassportGenerateHook };
//# sourceMappingURL=PassportGenerateHook.js.map