"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SwaggerModule = void 0;
const tslib_1 = require("tslib");
const common_1 = require("@tsed/common");
const platform_router_1 = require("@tsed/platform-router");
const fs_1 = tslib_1.__importDefault(require("fs"));
const path_1 = require("path");
const core_1 = require("@tsed/core");
const swagger_ui_dist_1 = require("swagger-ui-dist");
const cssMiddleware_1 = require("./middlewares/cssMiddleware");
const indexMiddleware_1 = require("./middlewares/indexMiddleware");
const jsMiddleware_1 = require("./middlewares/jsMiddleware");
const redirectMiddleware_1 = require("./middlewares/redirectMiddleware");
const SwaggerService_1 = require("./services/SwaggerService");
/**
 * @ignore
 */
let SwaggerModule = class SwaggerModule {
    injector;
    app;
    configuration;
    swaggerService;
    env;
    loaded = false;
    get settings() {
        return [].concat(this.configuration.get("swagger")).filter((o) => !!o);
    }
    /**
     *
     */
    $onRoutesInit() {
        if (this.loaded) {
            return;
        }
        const urls = this.getUrls();
        this.settings.forEach((conf) => {
            const { path = "/" } = conf;
            this.app.get(path, (0, platform_router_1.useContextHandler)((0, redirectMiddleware_1.redirectMiddleware)(path)));
            this.app.use(path, this.createRouter(conf, urls));
        });
        this.loaded = true;
    }
    $onReady() {
        // istanbul ignore next
        if (this.configuration.getBestHost) {
            const host = this.configuration.getBestHost();
            const url = host.toString();
            const displayLog = (conf) => {
                const { path = "/", fileName = "swagger.json", doc } = conf;
                this.injector.logger.info(`[${doc || "default"}] Swagger JSON is available on ${url}${(0, core_1.normalizePath)(path, fileName)}`);
                this.injector.logger.info(`[${doc || "default"}] Swagger UI is available on ${url}${path}/`);
            };
            this.settings.forEach((conf) => {
                displayLog(conf);
            });
        }
        this.generateSpecFiles();
    }
    generateSpecFiles() {
        return Promise.all(this.settings.map(async (conf) => {
            const { outFile } = conf;
            if (this.env === core_1.Env.PROD || outFile) {
                const spec = await this.swaggerService.getOpenAPISpec(conf);
                if (outFile) {
                    return fs_1.default.writeFile(outFile, JSON.stringify(spec, null, 2), { encoding: "utf8" }, () => { });
                }
            }
        }));
    }
    getUrls() {
        return this.settings.reduce((acc, conf) => {
            const { path = "/", fileName = "swagger.json", doc, hidden } = conf;
            if (!hidden) {
                acc.push({ url: (0, core_1.normalizePath)(path, fileName), name: doc || path });
            }
            return acc;
        }, []);
    }
    /**
     *
     * @param conf
     * @param urls
     */
    createRouter(conf, urls) {
        const { disableSpec = false, fileName = "swagger.json", cssPath, jsPath, viewPath = (0, path_1.join)(__dirname, "../views/index.ejs") } = conf;
        const router = new platform_router_1.PlatformRouter(this.injector);
        if (!disableSpec) {
            router.get((0, core_1.normalizePath)("/", fileName), (0, platform_router_1.useContextHandler)(this.middlewareSwaggerJson(conf)));
        }
        if (viewPath) {
            if (cssPath) {
                router.get("/main.css", (0, platform_router_1.useContextHandler)((0, cssMiddleware_1.cssMiddleware)(cssPath)));
            }
            if (jsPath) {
                router.get("/main.js", (0, platform_router_1.useContextHandler)((0, jsMiddleware_1.jsMiddleware)(jsPath)));
            }
            router.get("/", (0, platform_router_1.useContextHandler)((0, indexMiddleware_1.indexMiddleware)(viewPath, { urls, ...conf })));
            router.statics("/", { root: (0, swagger_ui_dist_1.absolutePath)() });
        }
        return router;
    }
    middlewareSwaggerJson(conf) {
        return async (ctx) => {
            ctx.response.status(200).body(await this.swaggerService.getOpenAPISpec(conf));
        };
    }
};
tslib_1.__decorate([
    (0, common_1.Inject)(),
    tslib_1.__metadata("design:type", common_1.InjectorService)
], SwaggerModule.prototype, "injector", void 0);
tslib_1.__decorate([
    (0, common_1.Inject)(),
    tslib_1.__metadata("design:type", common_1.PlatformApplication)
], SwaggerModule.prototype, "app", void 0);
tslib_1.__decorate([
    (0, common_1.Configuration)(),
    tslib_1.__metadata("design:type", Object)
], SwaggerModule.prototype, "configuration", void 0);
tslib_1.__decorate([
    (0, common_1.Inject)(),
    tslib_1.__metadata("design:type", SwaggerService_1.SwaggerService)
], SwaggerModule.prototype, "swaggerService", void 0);
tslib_1.__decorate([
    (0, common_1.Constant)("env"),
    tslib_1.__metadata("design:type", String)
], SwaggerModule.prototype, "env", void 0);
SwaggerModule = tslib_1.__decorate([
    (0, common_1.Module)()
], SwaggerModule);
exports.SwaggerModule = SwaggerModule;
//# sourceMappingURL=SwaggerModule.js.map