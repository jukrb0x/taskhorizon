import { __decorate, __metadata, __param } from "tslib";
import { Configuration, Injectable, InjectorService, Platform } from "@tsed/common";
import { generateSpec } from "@tsed/schema";
import { includeRoute } from "../utils/includeRoute.js";
let SwaggerService = class SwaggerService {
    injectorService;
    platform;
    configuration;
    #specs = new Map();
    constructor(injectorService, platform, configuration) {
        this.injectorService = injectorService;
        this.platform = platform;
        this.configuration = configuration;
    }
    async getOpenAPISpec(conf) {
        if (!this.#specs.has(conf.path)) {
            const { version = "1.0.0", acceptMimes } = this.configuration;
            const specPath = conf.specPath ? this.configuration.resolve(conf.specPath) : conf.specPath;
            const tokens = this.platform
                .getMountedControllers()
                .filter(({ route, provider }) => includeRoute(route, provider, conf))
                .map(({ route, provider }) => ({ token: provider.token, rootPath: route }));
            const spec = await generateSpec({
                tokens,
                ...conf,
                specPath,
                version,
                acceptMimes
            });
            this.#specs.set(conf.path, spec);
        }
        return this.#specs.get(conf.path);
    }
};
SwaggerService = __decorate([
    Injectable(),
    __param(2, Configuration()),
    __metadata("design:paramtypes", [InjectorService,
        Platform, Object])
], SwaggerService);
export { SwaggerService };
//# sourceMappingURL=SwaggerService.js.map