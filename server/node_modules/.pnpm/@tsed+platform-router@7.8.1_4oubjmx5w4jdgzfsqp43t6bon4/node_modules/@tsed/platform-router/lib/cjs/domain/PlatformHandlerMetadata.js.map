{"version":3,"file":"PlatformHandlerMetadata.js","sourceRoot":"","sources":["../../../src/domain/PlatformHandlerMetadata.ts"],"names":[],"mappings":"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","sourcesContent":["import {nameOf} from \"@tsed/core\";\nimport {InjectorService, Provider, ProviderScope, TokenProvider} from \"@tsed/di\";\nimport {ParamTypes} from \"@tsed/platform-params\";\nimport {EndpointMetadata, JsonEntityStore, JsonParameterStore} from \"@tsed/schema\";\nimport {PlatformHandlerType} from \"./PlatformHandlerType\";\nimport {SinglePathType} from \"./SinglePathType\";\n\nexport interface PlatformHandlerMetadataOpts extends Record<string, any> {\n  token?: TokenProvider;\n}\n\nexport interface PlatformHandlerMetadataProps {\n  provider?: Provider;\n  handler?: any;\n  opts?: PlatformHandlerMetadataOpts;\n  propertyKey?: string | symbol;\n  type?: PlatformHandlerType;\n}\n\nexport class PlatformHandlerMetadata {\n  path: SinglePathType;\n\n  readonly provider?: Provider;\n  readonly propertyKey: string | symbol;\n  readonly type: PlatformHandlerType = PlatformHandlerType.RAW_FN;\n  readonly hasNextFunction: boolean = false;\n  readonly opts: PlatformHandlerMetadataOpts = {};\n\n  #handler: any;\n\n  constructor(props: PlatformHandlerMetadataProps) {\n    const {propertyKey, type, provider, handler, opts} = props;\n\n    this.provider = provider;\n    this.type = type || handler.type || PlatformHandlerType.RAW_FN;\n    this.opts = opts || {};\n\n    this.#handler = propertyKey ? this.target.prototype[propertyKey] : handler;\n\n    if (propertyKey) {\n      this.propertyKey = propertyKey;\n      this.hasNextFunction = this.hasParamType(ParamTypes.NEXT_FN);\n\n      if (this.hasParamType(ParamTypes.ERR)) {\n        this.type = PlatformHandlerType.ERR_MIDDLEWARE;\n      }\n    } else {\n      if (this.#handler.length === 4) {\n        this.type = PlatformHandlerType.RAW_ERR_FN;\n      }\n      this.hasNextFunction = this.#handler.length >= 3;\n    }\n  }\n\n  get target() {\n    return this.provider?.useClass || this.#handler;\n  }\n\n  get token() {\n    return this.provider?.token || this.#handler;\n  }\n\n  get handler() {\n    return this.#handler;\n  }\n\n  get scope() {\n    return this.provider?.scope || ProviderScope.SINGLETON;\n  }\n\n  get hasErrorParam() {\n    return this.type === PlatformHandlerType.ERR_MIDDLEWARE || this.type === PlatformHandlerType.RAW_ERR_FN;\n  }\n\n  get store() {\n    return JsonEntityStore.fromMethod(this.provider!.useClass, this.propertyKey!);\n  }\n\n  static from(injector: InjectorService, input: any, opts: PlatformHandlerMetadataOpts = {}): PlatformHandlerMetadata {\n    if (input instanceof PlatformHandlerMetadata) {\n      return input;\n    }\n\n    if (input instanceof EndpointMetadata) {\n      const provider = injector.getProvider(opts.token)!;\n\n      return new PlatformHandlerMetadata({\n        provider,\n        type: PlatformHandlerType.ENDPOINT,\n        propertyKey: input.propertyKey,\n        opts\n      });\n    }\n\n    const provider = injector.getProvider(input);\n\n    if (provider) {\n      return new PlatformHandlerMetadata({\n        provider,\n        type: PlatformHandlerType.MIDDLEWARE,\n        propertyKey: \"use\",\n        opts\n      });\n    }\n\n    return new PlatformHandlerMetadata({\n      handler: input,\n      type: input.type,\n      opts\n    });\n  }\n\n  public getParams() {\n    return JsonParameterStore.getParams(this.target, this.propertyKey) || [];\n  }\n\n  public hasParamType(paramType: any): boolean {\n    return this.getParams().findIndex((p) => p.paramType === paramType) > -1;\n  }\n\n  public isInjectable() {\n    return !(this.isRawMiddleware() || this.isResponseFn());\n  }\n\n  public isRawMiddleware() {\n    return this.type === PlatformHandlerType.RAW_ERR_FN || this.type === PlatformHandlerType.RAW_FN;\n  }\n\n  public isEndpoint() {\n    return this.type === PlatformHandlerType.ENDPOINT;\n  }\n\n  public isCtxFn() {\n    return this.type === PlatformHandlerType.CTX_FN;\n  }\n\n  public isResponseFn() {\n    return this.type === PlatformHandlerType.RESPONSE_FN;\n  }\n\n  toString() {\n    return [nameOf(this.target), this.propertyKey].filter(Boolean).join(\".\");\n  }\n}\n"]}