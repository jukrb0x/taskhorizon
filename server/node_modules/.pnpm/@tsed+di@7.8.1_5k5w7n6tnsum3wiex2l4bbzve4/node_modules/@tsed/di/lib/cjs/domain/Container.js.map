{"version":3,"file":"Container.js","sourceRoot":"","sources":["../../../src/domain/Container.ts"],"names":[],"mappings":";;;AAGA,mEAA8D;AAC9D,yCAAoC;AAEpC,MAAa,SAAU,SAAQ,GAA4B;IACzD;;;;OAIG;IACI,GAAG,CAAC,KAAoB,EAAE,WAAkC,EAAE;QACnE,MAAM,QAAQ,GAAG,iCAAe,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,IAAI,IAAI,mBAAQ,CAAC,KAAK,CAAC,CAAC;QAE5E,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QAElC,OAAO,KAAK,CAAC,GAAG,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;IACpC,CAAC;IAED;;;;OAIG;IACI,WAAW,CAAC,KAAoB,EAAE,WAAkC,EAAE;QAC3E,OAAO,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;IACnC,CAAC;IAED;;;OAGG;IACI,WAAW,CAAC,KAAoB;QACrC,OAAO,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IAC1B,CAAC;IAED;;;;OAIG;IACI,WAAW,CAAC,KAAoB,EAAE,QAAkB;QACzD,OAAO,KAAK,CAAC,GAAG,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;IACpC,CAAC;IAED;;;;OAIG;IACI,WAAW,CAAgC,KAAoB;QACpE,OAAO,KAAK,CAAC,GAAG,CAAC,KAAK,CAAM,CAAC;IAC/B,CAAC;IAED;;;;;OAKG;IACI,YAAY,CAAC,IAA4B;QAC9C,OAAO,CAAC,GAAG,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC,EAAE,QAAQ,CAAC,EAAE,EAAE;YACnD,IAAI,QAAQ,CAAC,IAAI,KAAK,IAAI,IAAI,CAAC,IAAI,EAAE;gBACnC,OAAO,CAAC,GAAG,SAAS,EAAE,QAAQ,CAAC,CAAC;aACjC;YACD,OAAO,SAAS,CAAC;QACnB,CAAC,EAAE,EAAE,CAAC,CAAC;IACT,CAAC;IAEM,YAAY,CAAC,SAAuC;QACzD,SAAS,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;YAC7B,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE;gBACvC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,OAAO,EAAE,QAAQ,CAAC,KAAK,EAAE,CAAC,CAAC;aACtD;QACH,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AAvED,8BAuEC","sourcesContent":["import type {ProviderOpts} from \"../interfaces/ProviderOpts\";\nimport type {ProviderType} from \"./ProviderType\";\nimport type {TokenProvider} from \"../interfaces/TokenProvider\";\nimport {GlobalProviders} from \"../registries/GlobalProviders\";\nimport {Provider} from \"./Provider\";\n\nexport class Container extends Map<TokenProvider, Provider> {\n  /**\n   *\n   * @param token\n   * @param settings\n   */\n  public add(token: TokenProvider, settings: Partial<ProviderOpts> = {}): this {\n    const provider = GlobalProviders.get(token)?.clone() || new Provider(token);\n\n    Object.assign(provider, settings);\n\n    return super.set(token, provider);\n  }\n\n  /**\n   * Add a provider to the\n   * @param token\n   * @param settings\n   */\n  public addProvider(token: TokenProvider, settings: Partial<ProviderOpts> = {}): this {\n    return this.add(token, settings);\n  }\n\n  /**\n   *\n   * @param token\n   */\n  public hasProvider(token: TokenProvider) {\n    return super.has(token);\n  }\n\n  /**\n   * Add a provider to the\n   * @param token\n   * @param provider\n   */\n  public setProvider(token: TokenProvider, provider: Provider) {\n    return super.set(token, provider);\n  }\n\n  /**\n   * The getProvider() method returns a specified element from a Map object.\n   * @returns {T} Returns the element associated with the specified key or undefined if the key can't be found in the Map object.\n   * @param token\n   */\n  public getProvider<T extends Provider = Provider>(token: TokenProvider): T | undefined {\n    return super.get(token) as T;\n  }\n\n  /**\n   * Get all providers registered in the injector container.\n   *\n   * @param {ProviderType} type Filter the list by the given ProviderType.\n   * @returns {[TokenProvider , Provider<any>][]}\n   */\n  public getProviders(type?: ProviderType | string): Provider[] {\n    return [...this].reduce((providers, [_, provider]) => {\n      if (provider.type === type || !type) {\n        return [...providers, provider];\n      }\n      return providers;\n    }, []);\n  }\n\n  public addProviders(container: Map<TokenProvider, Provider>) {\n    container.forEach((provider) => {\n      if (!this.hasProvider(provider.provide)) {\n        this.setProvider(provider.provide, provider.clone());\n      }\n    });\n  }\n}\n"]}