{"version":3,"file":"InjectableProperties.js","sourceRoot":"","sources":["../../../src/interfaces/InjectableProperties.ts"],"names":[],"mappings":"","sourcesContent":["import type {InjectablePropertyType} from \"../domain/InjectablePropertyType\";\nimport type {LocalsContainer} from \"../domain/LocalsContainer\";\nimport type {TokenProvider} from \"./TokenProvider\";\nimport type {InjectorService} from \"../services/InjectorService\";\nimport type {InvokeOptions} from \"./InvokeOptions\";\n\nexport interface InjectableProperty {\n  propertyKey: string;\n}\n\nexport interface InjectablePropertyOptions extends InjectableProperty {\n  bindingType: InjectablePropertyType.METHOD | InjectablePropertyType.PROPERTY | InjectablePropertyType.INTERCEPTOR;\n  propertyType: string;\n  useType?: TokenProvider;\n  resolver: (injector: InjectorService, locals: LocalsContainer, options: Partial<InvokeOptions> & {options: any}) => () => any;\n  options?: any;\n}\n\nexport interface InjectablePropertyValue extends InjectableProperty {\n  bindingType: InjectablePropertyType.CONSTANT | InjectablePropertyType.VALUE;\n  expression: string;\n  defaultValue?: any;\n}\n\nexport interface InjectableProperties {\n  [key: string]: InjectablePropertyOptions | InjectablePropertyValue;\n}\n"]}