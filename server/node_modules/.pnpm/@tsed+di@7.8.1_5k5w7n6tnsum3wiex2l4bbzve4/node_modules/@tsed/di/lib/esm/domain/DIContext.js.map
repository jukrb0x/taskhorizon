{"version":3,"file":"DIContext.js","sourceRoot":"","sources":["../../../src/domain/DIContext.ts"],"names":[],"mappings":"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","sourcesContent":["import {InjectorService} from \"../services/InjectorService\";\nimport {runInContext} from \"../utils/asyncHookContext\";\nimport {ContextLogger, ContextLoggerOptions} from \"./ContextLogger\";\nimport {LocalsContainer} from \"./LocalsContainer\";\n\nexport interface DIContextOptions extends Omit<ContextLoggerOptions, \"dateStart\"> {\n  id: string;\n  injector: InjectorService;\n  logger: any;\n}\n\nexport class DIContext {\n  [x: string]: any;\n\n  #container?: LocalsContainer;\n  #cache?: Map<any, any>;\n  #logger?: ContextLogger;\n\n  constructor(public opts: DIContextOptions) {}\n\n  /**\n   * Logger attached to the context request.\n   */\n  get logger() {\n    this.#logger = this.#logger || new ContextLogger(this.opts);\n    return this.#logger;\n  }\n\n  /**\n   * Request id generated by @@contextMiddleware@@.\n   *\n   * ::: tip\n   * By default Ts.ED generate uuid like that `uuidv4().replace(/-/gi, \"\"))`.\n   * Dash are removed to simplify tracking logs in Kibana\n   * :::\n   *\n   * ::: tip\n   * Request id can by customized by changing the server configuration.\n   *\n   * ```typescript\n   * @Configuration({\n   *   logger: {\n   *     reqIdBuilder: createUniqId // give your own id generator function\n   *   }\n   * })\n   * class Server {\n   *\n   * }\n   * ```\n   * :::\n   *\n   */\n  get id() {\n    return this.opts.id;\n  }\n\n  get dateStart() {\n    return this.logger.dateStart;\n  }\n\n  get injector(): InjectorService {\n    return this.opts.injector!;\n  }\n\n  get env() {\n    return this.injector.settings.get(\"env\");\n  }\n\n  /**\n   * The request container used by the Ts.ED DI. It contains all services annotated with `@Scope(ProviderScope.REQUEST)`\n   */\n  get container() {\n    return (this.#container = this.#container || new LocalsContainer());\n  }\n\n  async destroy(): Promise<any> {\n    return Promise.all([this.#container?.destroy(), this.#logger?.flush()]);\n  }\n\n  async emit(eventName: string, ...args: any[]) {\n    return this.injector?.emit(eventName, ...args);\n  }\n\n  async runInContext(next: Function) {\n    return runInContext(this, next);\n  }\n\n  cache<Value = any>(key: string, cb: () => Value): Value {\n    if (!this.has(key)) {\n      this.set(key, cb());\n    }\n\n    return this.get(key);\n  }\n\n  async cacheAsync<Value = any>(key: string, cb: () => Promise<Value>): Promise<Value> {\n    if (!this.has(key)) {\n      this.set(key, await cb());\n    }\n\n    return this.get(key);\n  }\n\n  delete(key: any): boolean {\n    return !!this.#cache?.delete(key);\n  }\n\n  get<T = any>(key: any): T {\n    return this.#cache?.get(key);\n  }\n\n  has(key: any): boolean {\n    return !!this.#cache?.has(key);\n  }\n\n  set(key: any, value: any): this {\n    this.#cache = this.#cache || new Map<any, any>();\n    this.#cache.set(key, value);\n    return this;\n  }\n}\n\nexport type BaseContext = DIContext & TsED.Context;\n"]}