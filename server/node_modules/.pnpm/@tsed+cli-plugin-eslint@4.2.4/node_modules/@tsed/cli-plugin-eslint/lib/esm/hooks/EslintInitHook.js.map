{"version":3,"file":"EslintInitHook.js","sourceRoot":"","sources":["../../../src/hooks/EslintInitHook.ts"],"names":[],"mappings":"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","sourcesContent":["import {InitCmdContext} from \"@tsed/cli\";\nimport {Inject, Injectable, OnExec, OnPostInstall, ProjectPackageJson, RootRendererService} from \"@tsed/cli-core\";\nimport {TEMPLATE_DIR} from \"../utils/templateDir\";\n\n@Injectable()\nexport class EslintInitHook {\n  @Inject()\n  protected packageJson: ProjectPackageJson;\n\n  @Inject()\n  protected rootRenderer: RootRendererService;\n\n  @OnExec(\"init\")\n  onExec(ctx: InitCmdContext) {\n    if (!ctx.eslint) {\n      return [];\n    }\n\n    return [\n      {\n        title: \"Generate files for eslint\",\n        task: (ctx: any) => {\n          return this.rootRenderer.renderAll(\n            [\n              \".eslintrc.hbs\",\n              \".eslintignore.hbs\",\n              ctx.lintstaged && \".husky/_/.gitignore.hbs\",\n              ctx.lintstaged && \".husky/_/husky.sh.hbs\",\n              ctx.lintstaged && \".husky/.gitignore.hbs\",\n              ctx.lintstaged && \".husky/post-commit.hbs\",\n              ctx.lintstaged && \".husky/pre-commit.hbs\",\n              ctx.lintstaged && \".lintstagedrc.json.hbs\",\n              ctx.prettier && \".prettierignore.hbs\",\n              ctx.prettier && \".prettierrc.hbs\"\n            ],\n            ctx,\n            {\n              templateDir: `${TEMPLATE_DIR}/init`\n            }\n          );\n        }\n      },\n      {\n        title: \"Add dependencies\",\n        task: () => {\n          this.addScripts(ctx);\n          this.addDependencies(ctx);\n          this.addDevDependencies(ctx);\n        }\n      }\n    ];\n  }\n\n  @OnPostInstall(\"init\")\n  onPostInstall(ctx: InitCmdContext) {\n    return [\n      {\n        title: \"Add husky prepare task\",\n        skip: !ctx.lintstaged,\n        task: async () => {\n          this.packageJson\n            .read()\n            .addScripts({\n              prepare: \"is-ci || husky install\"\n            })\n            .write();\n\n          await this.packageJson.runScript(\"prepare\");\n        }\n      }\n    ];\n  }\n\n  addScripts(ctx: InitCmdContext) {\n    this.packageJson.addScripts({\n      \"test:lint\": \"eslint '**/*.{ts,js}'\",\n      \"test:lint:fix\": \"eslint '**/*.{ts,js}' --fix\"\n    });\n\n    if (ctx.prettier) {\n      this.packageJson.addScripts({\n        prettier: \"prettier '**/*.{ts,js,json,md,yml,yaml}' --write\"\n      });\n    }\n  }\n\n  addDependencies(ctx: InitCmdContext) {\n    this.packageJson.addDependencies({}, ctx);\n  }\n\n  addDevDependencies(ctx: InitCmdContext) {\n    this.packageJson.addDevDependencies(\n      {\n        eslint: \"latest\",\n        \"eslint-config-prettier\": \"latest\",\n        \"eslint-plugin-prettier\": \"latest\",\n        \"@typescript-eslint/parser\": \"latest\",\n        \"@typescript-eslint/eslint-plugin\": \"latest\"\n      },\n      ctx\n    );\n\n    if (ctx.lintstaged) {\n      this.packageJson.addDevDependencies(\n        {\n          \"is-ci\": \"latest\",\n          husky: \"latest\",\n          \"lint-staged\": \"latest\"\n        },\n        ctx\n      );\n    }\n\n    if (ctx.prettier) {\n      this.packageJson.addDevDependencies(\n        {\n          prettier: \"latest\"\n        },\n        ctx\n      );\n    }\n  }\n}\n"]}