import { __decorate, __metadata } from "tslib";
import { Inject, Injectable, OnExec, OnPostInstall, ProjectPackageJson, RootRendererService } from "@tsed/cli-core";
import { TEMPLATE_DIR } from "../utils/templateDir.js";
let EslintInitHook = class EslintInitHook {
    packageJson;
    rootRenderer;
    onExec(ctx) {
        if (!ctx.eslint) {
            return [];
        }
        return [
            {
                title: "Generate files for eslint",
                task: (ctx) => {
                    return this.rootRenderer.renderAll([
                        ".eslintrc.hbs",
                        ".eslintignore.hbs",
                        ctx.lintstaged && ".husky/_/.gitignore.hbs",
                        ctx.lintstaged && ".husky/_/husky.sh.hbs",
                        ctx.lintstaged && ".husky/.gitignore.hbs",
                        ctx.lintstaged && ".husky/post-commit.hbs",
                        ctx.lintstaged && ".husky/pre-commit.hbs",
                        ctx.lintstaged && ".lintstagedrc.json.hbs",
                        ctx.prettier && ".prettierignore.hbs",
                        ctx.prettier && ".prettierrc.hbs"
                    ], ctx, {
                        templateDir: `${TEMPLATE_DIR}/init`
                    });
                }
            },
            {
                title: "Add dependencies",
                task: () => {
                    this.addScripts(ctx);
                    this.addDependencies(ctx);
                    this.addDevDependencies(ctx);
                }
            }
        ];
    }
    onPostInstall(ctx) {
        return [
            {
                title: "Add husky prepare task",
                skip: !ctx.lintstaged,
                task: async () => {
                    this.packageJson
                        .read()
                        .addScripts({
                        prepare: "is-ci || husky install"
                    })
                        .write();
                    await this.packageJson.runScript("prepare");
                }
            }
        ];
    }
    addScripts(ctx) {
        this.packageJson.addScripts({
            "test:lint": "eslint '**/*.{ts,js}'",
            "test:lint:fix": "eslint '**/*.{ts,js}' --fix"
        });
        if (ctx.prettier) {
            this.packageJson.addScripts({
                prettier: "prettier '**/*.{ts,js,json,md,yml,yaml}' --write"
            });
        }
    }
    addDependencies(ctx) {
        this.packageJson.addDependencies({}, ctx);
    }
    addDevDependencies(ctx) {
        this.packageJson.addDevDependencies({
            eslint: "latest",
            "eslint-config-prettier": "latest",
            "eslint-plugin-prettier": "latest",
            "@typescript-eslint/parser": "latest",
            "@typescript-eslint/eslint-plugin": "latest"
        }, ctx);
        if (ctx.lintstaged) {
            this.packageJson.addDevDependencies({
                "is-ci": "latest",
                husky: "latest",
                "lint-staged": "latest"
            }, ctx);
        }
        if (ctx.prettier) {
            this.packageJson.addDevDependencies({
                prettier: "latest"
            }, ctx);
        }
    }
};
__decorate([
    Inject(),
    __metadata("design:type", ProjectPackageJson)
], EslintInitHook.prototype, "packageJson", void 0);
__decorate([
    Inject(),
    __metadata("design:type", RootRendererService)
], EslintInitHook.prototype, "rootRenderer", void 0);
__decorate([
    OnExec("init"),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], EslintInitHook.prototype, "onExec", null);
__decorate([
    OnPostInstall("init"),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], EslintInitHook.prototype, "onPostInstall", null);
EslintInitHook = __decorate([
    Injectable()
], EslintInitHook);
export { EslintInitHook };
//# sourceMappingURL=EslintInitHook.js.map