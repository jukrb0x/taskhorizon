{"version":3,"file":"Hooks.js","sourceRoot":"","sources":["../../../src/domain/Hooks.ts"],"names":[],"mappings":";;;AAAA,MAAa,KAAK;IAChB,UAAU,GAA+B,EAAE,CAAC;IAE5C;;;;OAIG;IACH,EAAE,CAAC,KAAa,EAAE,EAAY;QAC5B,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE;YAC3B,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;SAC7B;QAED,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAEhC,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;OAIG;IACH,GAAG,CAAC,KAAa,EAAE,EAAY;QAC7B,IAAI,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE;YAC1B,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,KAAK,EAAE,CAAC,CAAC;SAC/E;QAED,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;;OAKG;IACH,IAAI,CAAC,KAAa,EAAE,OAAc,EAAE,EAAE,WAAgB,IAAI;QACxD,MAAM,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;QAEzC,IAAI,SAAS,EAAE,MAAM,EAAE;YACrB,KAAK,MAAM,EAAE,IAAI,SAAS,EAAE;gBAC1B,EAAE,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,IAAI,CAAC,CAAC;aAC5B;SACF;IACH,CAAC;IAED;;;;;;OAMG;IACH,KAAK,CAAC,KAAa,EAAE,KAAU,EAAE,OAAc,EAAE,EAAE,WAAgB,IAAI;QACrE,MAAM,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;QAEzC,IAAI,SAAS,EAAE,MAAM,EAAE;YACrB,KAAK,MAAM,EAAE,IAAI,SAAS,EAAE;gBAC1B,KAAK,GAAG,EAAE,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,CAAC;aAC3C;SACF;QAED,OAAO,KAAK,CAAC;IACf,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,SAAS,CAAC,KAAa,EAAE,OAAc,EAAE,EAAE,WAAgB,IAAI;QACnE,MAAM,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;QAEzC,IAAI,SAAS,EAAE,MAAM,EAAE;YACrB,MAAM,QAAQ,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;YAEnE,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;SAC7B;IACH,CAAC;IAED;;;;;;OAMG;IACH,KAAK,CAAC,UAAU,CAAC,KAAa,EAAE,KAAU,EAAE,OAAc,EAAE,EAAE,WAAgB,IAAI;QAChF,MAAM,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;QAEzC,IAAI,SAAS,EAAE,MAAM,EAAE;YACrB,KAAK,MAAM,EAAE,IAAI,SAAS,EAAE;gBAC1B,KAAK,GAAG,MAAM,EAAE,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,CAAC;aACjD;SACF;QAED,OAAO,KAAK,CAAC;IACf,CAAC;IAED,OAAO;QACL,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;IACvB,CAAC;CACF;AAxGD,sBAwGC","sourcesContent":["export class Hooks {\n  #listeners: Record<string, Function[]> = {};\n\n  /**\n   * Listen a hook event\n   * @param event\n   * @param cb\n   */\n  on(event: string, cb: Function) {\n    if (!this.#listeners[event]) {\n      this.#listeners[event] = [];\n    }\n\n    this.#listeners[event].push(cb);\n\n    return this;\n  }\n\n  /**\n   * Remove a listener attached to an event\n   * @param event\n   * @param cb\n   */\n  off(event: string, cb: Function) {\n    if (this.#listeners[event]) {\n      this.#listeners[event] = this.#listeners[event].filter((item) => item === cb);\n    }\n\n    return this;\n  }\n\n  /**\n   * Trigger an event and call listener.\n   * @param event\n   * @param args\n   * @param callThis\n   */\n  emit(event: string, args: any[] = [], callThis: any = null): void {\n    const listeners = this.#listeners[event];\n\n    if (listeners?.length) {\n      for (const cb of listeners) {\n        cb.call(callThis, ...args);\n      }\n    }\n  }\n\n  /**\n   * Trigger an event, listener alter given value and return it.\n   * @param event\n   * @param value\n   * @param args\n   * @param callThis\n   */\n  alter(event: string, value: any, args: any[] = [], callThis: any = null): any {\n    const listeners = this.#listeners[event];\n\n    if (listeners?.length) {\n      for (const cb of listeners) {\n        value = cb.call(callThis, value, ...args);\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   * Trigger an event and call async listener.\n   * @param event\n   * @param args\n   * @param callThis\n   */\n  async asyncEmit(event: string, args: any[] = [], callThis: any = null): Promise<void> {\n    const listeners = this.#listeners[event];\n\n    if (listeners?.length) {\n      const promises = listeners.map((cb) => cb.call(callThis, ...args));\n\n      await Promise.all(promises);\n    }\n  }\n\n  /**\n   * Trigger an event, async listener alter given value and return it.\n   * @param event\n   * @param value\n   * @param args\n   * @param callThis\n   */\n  async asyncAlter(event: string, value: any, args: any[] = [], callThis: any = null): Promise<any> {\n    const listeners = this.#listeners[event];\n\n    if (listeners?.length) {\n      for (const cb of listeners) {\n        value = await cb.call(callThis, value, ...args);\n      }\n    }\n\n    return value;\n  }\n\n  destroy() {\n    this.#listeners = {};\n  }\n}\n"]}