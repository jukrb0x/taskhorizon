{"version":3,"file":"Store.js","sourceRoot":"","sources":["../../../src/domain/Store.ts"],"names":[],"mappings":"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","sourcesContent":["import {DecoratorTypes} from \"../domain/DecoratorTypes\";\nimport {decoratorTypeOf} from \"../utils/decorators/decoratorTypeOf\";\nimport {deepClone} from \"../utils/objects/deepClone\";\nimport {deepMerge} from \"../utils/objects/deepMerge\";\nimport {descriptorOf} from \"../utils/objects/descriptorOf\";\nimport {isSymbol} from \"../utils/objects/isSymbol\";\nimport {nameOf} from \"../utils/objects/nameOf\";\nimport {Metadata} from \"./Metadata\";\nimport type {Type} from \"./Type\";\n\n/**\n * @ignore\n */\nexport const CLASS_STORE = \"tsed:class:store\";\n/**\n * @ignore\n */\nexport const METHOD_STORE = \"tsed:method:store\";\n/**\n * @ignore\n */\nexport const PROPERTY_STORE = \"tsed:property:store\";\n/**\n * @ignore\n */\nexport const PARAM_STORE = \"tsed:param:store\";\n\nconst stores = new Map<symbol, Store>();\n\nfunction storeGet(key: string, ...args: any[]): Store {\n  if (isSymbol(args[0])) {\n    if (!stores.has(args[0])) {\n      stores.set(args[0], new Store());\n    }\n\n    return stores.get(args[0])!;\n  } else {\n    const registry = Metadata as any;\n\n    if (!registry.hasOwn(key, ...args)) {\n      registry.set(key, new Store(), ...args);\n    }\n\n    return registry.getOwn(key, ...args);\n  }\n}\n\nfunction defineStore(args: any[]): Store {\n  const [target, propertyKey, descriptor] = args;\n\n  switch (decoratorTypeOf(args)) {\n    case DecoratorTypes.PARAM_CTOR:\n    case DecoratorTypes.PARAM_STC:\n    case DecoratorTypes.PARAM:\n      const store = storeGet(PARAM_STORE, target, propertyKey);\n      if (!store.has(\"\" + descriptor)) {\n        store.set(\"\" + descriptor, new Store());\n      }\n\n      return store.get(\"\" + descriptor);\n    case DecoratorTypes.PROP:\n    case DecoratorTypes.PROP_STC:\n      return storeGet(PROPERTY_STORE, target, propertyKey);\n    case DecoratorTypes.METHOD:\n    case DecoratorTypes.METHOD_STC:\n      return storeGet(METHOD_STORE, target, propertyKey);\n    case DecoratorTypes.CLASS:\n      return storeGet(CLASS_STORE, target);\n  }\n}\n\nexport class Store {\n  private _entries = new Map<string, any>();\n  /**\n   * Create or get a Store from args {target + methodName + descriptor}\n   * @param args\n   * @returns {Store}\n   */\n  static from(...args: any[]): Store {\n    return defineStore(args);\n  }\n\n  /**\n   * Create store on the method.\n   * @param target\n   * @param {string} propertyKey\n   * @returns {Store}\n   */\n  static fromMethod(target: any, propertyKey: string | symbol): Store {\n    return Store.from(target, propertyKey, descriptorOf(target, propertyKey));\n  }\n\n  static mergeStoreFrom(target: Type<any>, source: Type<any>, ...args: any[]) {\n    const store = Store.from(target, ...args);\n\n    Store.from(source, ...args)._entries.forEach((value, key) => {\n      store.merge(key, value);\n    });\n\n    return store;\n  }\n\n  static mergeStoreMethodFrom(target: Type<any>, source: Type<any>, propertyKey: string | symbol) {\n    return this.mergeStoreFrom(target, source, propertyKey, descriptorOf(target, propertyKey));\n  }\n\n  /**\n   * The get() method returns a specified element from a Map object.\n   * @param key Required. The key of the element to return from the Map object.\n   * @param defaultValue\n   * @returns {T} Returns the element associated with the specified key or undefined if the key can't be found in the Map object.\n   */\n  get<T = any>(key: any, defaultValue?: any): T {\n    return this._entries.get(nameOf(key)) || defaultValue;\n  }\n\n  /**\n   * The has() method returns a boolean indicating whether an element with the specified key exists or not.\n   * @param key\n   * @returns {boolean}\n   */\n  has(key: any): boolean {\n    return this._entries.has(nameOf(key));\n  }\n\n  /**\n   * The set() method adds or updates an element with a specified key and value to a Map object.\n   * @param key Required. The key of the element to add to the Map object.\n   * @param metadata Required. The value of the element to add to the Map object.\n   */\n  set(key: any, metadata: any): Store {\n    this._entries.set(nameOf(key), metadata);\n\n    return this;\n  }\n\n  /**\n   * The delete() method removes the specified element from a Map object.\n   * @param key Required. The key of the element to remove from the Map object.\n   * @returns {boolean} Returns true if an element in the Map object existed and has been removed, or false if the element does not exist.\n   */\n  delete(key: string): boolean {\n    return this._entries.delete(nameOf(key));\n  }\n\n  /**\n   * Merge given value with existing value.\n   * @param key\n   * @param value\n   * @param inverse Change the merge order. Get the existing value and apply over given value\n   * @returns {Store}\n   */\n  merge(key: any, value: any, inverse: boolean = false): Store {\n    let _value_ = this.get(key);\n\n    if (_value_) {\n      value = deepClone(value);\n      _value_ = deepClone(_value_);\n      value = inverse ? deepMerge(value, _value_) : deepMerge(_value_, value);\n    }\n\n    this.set(key, value);\n\n    return this;\n  }\n\n  toJson() {\n    return [...this._entries.entries()].reduce((obj, [key, value]) => {\n      return {\n        ...obj,\n        [key]: value\n      };\n    }, {});\n  }\n}\n"]}