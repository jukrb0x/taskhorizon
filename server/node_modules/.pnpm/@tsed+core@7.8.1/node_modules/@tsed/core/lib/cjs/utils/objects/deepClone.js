"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deepClone = void 0;
const isArray_1 = require("./isArray");
const isDate_1 = require("./isDate");
const isFunction_1 = require("./isFunction");
const isNil_1 = require("./isNil");
const isPrimitive_1 = require("./isPrimitive");
const isSymbol_1 = require("./isSymbol");
const isBuffer_1 = require("./isBuffer");
const isRegExp_1 = require("./isRegExp");
const isBasicType = (source) => (0, isNil_1.isNil)(source) || (0, isPrimitive_1.isPrimitive)(source) || (0, isSymbol_1.isSymbol)(source) || (0, isFunction_1.isFunction)(source);
/**
 * Return a cloned value
 * @param source
 * @param stack
 */
function deepClone(source, stack = new WeakMap()) {
    let dest;
    if (isBasicType(source)) {
        return source;
    }
    if ((0, isBuffer_1.isBuffer)(source)) {
        const copy = Buffer.alloc(source.length);
        source.copy(copy);
        return copy;
    }
    if ((0, isDate_1.isDate)(source)) {
        return new Date(source);
    }
    if ((0, isRegExp_1.isRegExp)(source)) {
        return new RegExp(source);
    }
    const stacked = stack.get(source);
    if (stacked) {
        // See issue #1619
        // istanbul ignore next
        process.env.TSED_TRACK_CIRCULAR_REF && console.trace("Circular ref detected on deepClone", stacked);
        return stacked;
    }
    if ((0, isArray_1.isArray)(source)) {
        dest = [];
    }
    else {
        dest = {};
        stack.set(source, dest);
    }
    for (const key in source) {
        // Use getOwnPropertyDescriptor instead of source[key] to prevent from triggering setter/getter.
        const descriptor = Object.getOwnPropertyDescriptor(source, key);
        if (descriptor) {
            if (!(0, isFunction_1.isFunction)(descriptor.value)) {
                dest[key] = deepClone(descriptor.value, stack);
            }
            else {
                Object.defineProperty(dest, key, descriptor);
            }
        }
    }
    if (!(0, isArray_1.isArray)(source)) {
        const prototype = Reflect.getPrototypeOf(source);
        Reflect.setPrototypeOf(dest, prototype);
    }
    return dest;
}
exports.deepClone = deepClone;
//# sourceMappingURL=deepClone.js.map