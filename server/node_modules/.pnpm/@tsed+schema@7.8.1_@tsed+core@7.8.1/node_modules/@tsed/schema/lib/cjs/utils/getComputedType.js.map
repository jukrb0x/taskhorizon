{"version":3,"file":"getComputedType.js","sourceRoot":"","sources":["../../../src/utils/getComputedType.ts"],"names":[],"mappings":";;;AAAA,qCAWoB;AAEpB;;GAEG;AACH,SAAgB,eAAe,CAAC,MAAW;IACzC,IAAI,IAAA,gBAAS,EAAC,MAAM,CAAC,EAAE;QACrB,OAAO,MAAM,CAAC;KACf;IAED,IACE,IAAA,cAAO,EAAC,MAAM,CAAC;QACf,IAAA,eAAQ,EAAC,MAAM,CAAC;QAChB,IAAA,kCAA2B,EAAC,MAAM,CAAC;QACnC,IAAA,oBAAa,EAAC,MAAM,CAAC;QACrB,IAAA,aAAM,EAAC,MAAM,CAAC;QACd,IAAA,mBAAY,EAAC,MAAM,CAAC,EACpB;QACA,OAAO,IAAA,cAAO,EAAC,MAAM,CAAC,CAAC;KACxB;IAED,IAAI,IAAA,gBAAS,EAAC,MAAM,CAAC,EAAE;QACrB,OAAQ,MAAc,EAAE,CAAC;KAC1B;IAED,OAAO,MAAM,CAAC;AAChB,CAAC;AArBD,0CAqBC","sourcesContent":["import {\n  classOf,\n  isArrowFn,\n  isClass,\n  isClassObject,\n  isCollection,\n  isDate,\n  isPrimitiveOrPrimitiveClass,\n  isPromise,\n  isSymbol,\n  Type\n} from \"@tsed/core\";\n\n/**\n * @ignore\n */\nexport function getComputedType(target: any): Type<any> {\n  if (isPromise(target)) {\n    return Object;\n  }\n\n  if (\n    isClass(target) ||\n    isSymbol(target) ||\n    isPrimitiveOrPrimitiveClass(target) ||\n    isClassObject(target) ||\n    isDate(target) ||\n    isCollection(target)\n  ) {\n    return classOf(target);\n  }\n\n  if (isArrowFn(target)) {\n    return (target as any)();\n  }\n\n  return target;\n}\n"]}