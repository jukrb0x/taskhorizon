{"version":3,"file":"getOperationsStores.js","sourceRoot":"","sources":["../../../src/utils/getOperationsStores.ts"],"names":[],"mappings":"AACA,OAAO,EAAC,eAAe,EAAC,MAAM,2BAA2B,CAAC;AAE1D,OAAO,EAAC,qBAAqB,EAAC,MAAM,iCAAiC,CAAC;AACtE,OAAO,EAAC,kBAAkB,EAAC,MAAM,sBAAsB,CAAC;AACxD,OAAO,EAAC,kBAAkB,EAAC,MAAM,sBAAsB,CAAC;AAExD;;GAEG;AACH,MAAM,UAAU,mBAAmB,CAA8C,MAAuB;IACtG,MAAM,KAAK,GAAmB,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;IAEnF,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE;QACtB,MAAM,cAAc,GAAG,IAAI,qBAAqB,EAAE,CAAC;QACnD,KAAK,CAAC,WAAW,GAAG,IAAI,GAAG,EAAa,CAAC;QAEzC,kBAAkB,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,YAAY,EAAE,EAAE;YACjD,YAAY,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,SAAS,EAAE,EAAE;gBAC1C,IAAI,SAAS,YAAY,eAAe,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,GAAG,CAAC,SAAS,CAAC,WAAW,CAAC,EAAE;oBACzF,KAAK,CAAC,WAAW,CAAC,GAAG,CAAC,SAAS,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;iBACzD;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,KAAK,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,KAAsB,EAAE,EAAE;YACnD,KAAK,CAAC,SAAS,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,aAAa,EAAE,EAAE;gBACvD,cAAc,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC;YACjD,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,cAAc,CAAC,KAAK,EAAE,CAAC;KACxB;IAED,OAAO,KAAK,CAAC,WAAW,CAAC;AAC3B,CAAC","sourcesContent":["import {Type} from \"@tsed/core\";\nimport {JsonMethodStore} from \"../domain/JsonMethodStore\";\nimport type {JsonClassStore} from \"../domain/JsonClassStore\";\nimport {JsonOperationPathsMap} from \"../domain/JsonOperationPathsMap\";\nimport {getInheritedStores} from \"./getInheritedStores\";\nimport {getJsonEntityStore} from \"./getJsonEntityStore\";\n\n/**\n * @ignore\n */\nexport function getOperationsStores<T extends JsonMethodStore = JsonMethodStore>(target: Type<any> | any): Map<string, T> {\n  const store: JsonClassStore = target.isStore ? target : getJsonEntityStore(target);\n\n  if (!store.$operations) {\n    const operationPaths = new JsonOperationPathsMap();\n    store.$operations = new Map<string, T>();\n\n    getInheritedStores(store).forEach((currentStore) => {\n      currentStore.children.forEach((propStore) => {\n        if (propStore instanceof JsonMethodStore && !store.$operations.has(propStore.propertyKey)) {\n          store.$operations.set(propStore.propertyKey, propStore);\n        }\n      });\n    });\n\n    store.$operations.forEach((store: JsonMethodStore) => {\n      store.operation.operationPaths.forEach((operationPath) => {\n        operationPaths.setOperationPath(operationPath);\n      });\n    });\n\n    operationPaths.clear();\n  }\n\n  return store.$operations;\n}\n"]}