{"version":3,"file":"JsonParameter.js","sourceRoot":"","sources":["../../../src/domain/JsonParameter.ts"],"names":[],"mappings":"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","sourcesContent":["import {cleanObject, toMap, Type} from \"@tsed/core\";\nimport {OpenSpecHash, OpenSpecRef, OS3Example, OS3Parameter, OS3Schema} from \"@tsed/openspec\";\nimport {JsonSchemaOptions} from \"../interfaces/JsonSchemaOptions\";\nimport {execMapper} from \"../registries/JsonSchemaMapperContainer\";\nimport {NestedGenerics, popGenerics} from \"../utils/generics\";\nimport {JsonMap} from \"./JsonMap\";\nimport {formatParameterType, isParameterType, JsonParameterTypes} from \"./JsonParameterTypes\";\nimport {JsonSchema} from \"./JsonSchema\";\nimport {createRefName} from \"../utils/ref\";\n\nexport class JsonParameter extends JsonMap<OS3Parameter<JsonSchema>> implements NestedGenerics {\n  nestedGenerics: Type<any>[][] = [];\n  groups: string[];\n  $schema: JsonSchema;\n  expression: string;\n\n  getName() {\n    const name = this.get(\"name\");\n\n    if (this.get(\"in\") === \"files\") {\n      return name.split(\".\")[0];\n    }\n\n    return name;\n  }\n\n  name(name: string): this {\n    this.set(\"name\", name);\n\n    return this;\n  }\n\n  examples(examples: OpenSpecHash<OS3Example | OpenSpecRef>) {\n    super.set(\"examples\", examples);\n\n    return this;\n  }\n\n  description(description: string): this {\n    this.set(\"description\", description);\n\n    return this;\n  }\n\n  in(inType: string, expression: string | any = \"\"): this {\n    this.set(\"in\", formatParameterType(inType));\n    this.expression = expression;\n\n    return this;\n  }\n\n  required(required: boolean): this {\n    this.set(\"required\", required);\n\n    return this;\n  }\n\n  schema(schema: JsonSchema): this {\n    this.$schema = schema;\n\n    return this;\n  }\n\n  toJSON(options: JsonSchemaOptions = {}) {\n    if (!isParameterType(this.get(\"in\"))) {\n      return null;\n    }\n\n    const schemasContainer = toMap<string, OS3Schema>(options.schemas || {});\n\n    return this.build({...options, groups: this.groups}, schemasContainer);\n  }\n\n  private build(options: JsonSchemaOptions, schemasContainer: Map<string, OS3Schema>) {\n    const {type, schema, ...parameter} = super.toJSON(options);\n\n    const jsonSchema = execMapper(\"item\", this.$schema, {\n      ...options,\n      ...popGenerics(this)\n    });\n\n    parameter.required = parameter.required || this.get(\"in\") === JsonParameterTypes.PATH;\n\n    switch (this.get(\"in\")) {\n      case JsonParameterTypes.FILES:\n        return this.getFileSchema(jsonSchema, parameter);\n      case JsonParameterTypes.QUERY:\n        if (jsonSchema.$ref) {\n          if (!parameter.name) {\n            return this.refToParameters(parameter, options, schemasContainer);\n          }\n\n          parameter.style = \"deepObject\";\n        }\n        break;\n    }\n\n    parameter.schema = jsonSchema;\n\n    return parameter;\n  }\n\n  private getFileSchema(jsonSchema: any, parameter: Pick<any, string | number | symbol>) {\n    const schema = {\n      type: \"string\",\n      format: \"binary\",\n      oneOf: undefined\n    };\n\n    if (jsonSchema.type === \"array\") {\n      jsonSchema.items = cleanObject({\n        ...jsonSchema.items,\n        ...schema\n      });\n\n      parameter.schema = jsonSchema;\n    } else {\n      parameter.schema = cleanObject({\n        ...jsonSchema,\n        ...schema\n      });\n    }\n\n    return parameter;\n  }\n\n  private refToParameters(parameter: any, options: JsonSchemaOptions, schemasContainer: Map<string, OS3Schema>) {\n    const name = createRefName(this.$schema.getName(), options);\n    const schema = options.schemas![name];\n\n    if (options.schemas![name] && !schemasContainer.has(name)) {\n      delete options.schemas![this.$schema.getName()];\n    }\n\n    return Object.entries(schema.properties || {}).reduce((params, [key, {description, ...prop}]: [string, any]) => {\n      return [\n        ...params,\n        cleanObject({\n          ...parameter,\n          name: key,\n          required: (schema.required || []).includes(key),\n          description,\n          schema: prop,\n          style: prop.$ref ? \"deepObject\" : undefined\n        })\n      ];\n    }, []);\n  }\n}\n"]}