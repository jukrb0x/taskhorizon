"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.classMapper = void 0;
const JsonEntityStore_1 = require("../domain/JsonEntityStore");
const JsonSchemaMapperContainer_1 = require("../registries/JsonSchemaMapperContainer");
const generics_1 = require("../utils/generics");
const ref_1 = require("../utils/ref");
function classMapper(value, options) {
    const store = JsonEntityStore_1.JsonEntityStore.from(value.class);
    const name = (0, ref_1.createRefName)(store.schema.getName() || value.getName(), options);
    if (value.hasGenerics) {
        // Inline generic
        const { type, properties, additionalProperties, items, ...props } = value.toJSON(options);
        const schema = {
            ...(0, JsonSchemaMapperContainer_1.execMapper)("any", store.schema, {
                ...options,
                ...(0, generics_1.popGenerics)(value),
                root: false
            }),
            ...props
        };
        if (schema.title) {
            const name = (0, ref_1.createRefName)(schema.title, options);
            options.schemas[name] = schema;
            delete schema.title;
            return (0, ref_1.createRef)(name, value, options);
        }
        return schema;
    }
    if (options.schemas && !options.schemas[name]) {
        options.schemas[name] = {}; // avoid infinite calls
        options.schemas[name] = (0, JsonSchemaMapperContainer_1.execMapper)("any", store.schema, (0, generics_1.mapGenericsOptions)({
            ...options,
            root: false
        }));
    }
    return (0, ref_1.createRef)(name, value, options);
}
exports.classMapper = classMapper;
(0, JsonSchemaMapperContainer_1.registerJsonSchemaMapper)("class", classMapper);
//# sourceMappingURL=classMapper.js.map