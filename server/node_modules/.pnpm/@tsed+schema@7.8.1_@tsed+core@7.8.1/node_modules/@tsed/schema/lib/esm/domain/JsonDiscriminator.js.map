{"version":3,"file":"JsonDiscriminator.js","sourceRoot":"","sources":["../../../src/domain/JsonDiscriminator.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,WAAW,EAAO,MAAM,YAAY,CAAC;AAE7C,MAAM,OAAO,aAAa;IACxB,YAAY,CAAS;IACrB,IAAI,CAAY;IAChB,MAAM,GAAsB,IAAI,GAAG,EAAE,CAAC;IACtC,KAAK,GAAwB,IAAI,GAAG,EAAE,CAAC;IAEvC,YAAY,EACV,IAAI,EACJ,YAAY,EACZ,KAAK,EACL,MAAM,KAC0G,EAAE;QAClH,MAAM,CAAC,MAAM,CACX,IAAI,EACJ,WAAW,CAAC;YACV,IAAI;YACJ,YAAY;YACZ,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,SAAS;YACzC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,SAAS;SAC7C,CAAC,CACH,CAAC;IACJ,CAAC;IAED,GAAG,CAAC,IAAkB,EAAE,MAAgB;QACtC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;YACvB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAC/B,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QAE7B,OAAO,IAAI,CAAC;IACd,CAAC;IAED,OAAO,CAAC,kBAA0B;QAChC,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,kBAAkB,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC;IAC1D,CAAC;IAED,SAAS,CAAC,IAAU;QAClB,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IAC9B,CAAC;IAED,eAAe,CAAC,IAAe;QAC7B,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACpC,OAAO,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;IACxC,CAAC;IAED,QAAQ;QACN,OAAO,CAAC,GAAG,IAAI,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;IAC9C,CAAC;CACF","sourcesContent":["import {cleanObject, Type} from \"@tsed/core\";\n\nexport class Discriminator {\n  propertyName: string;\n  base: Type<any>;\n  values: Map<string, Type> = new Map();\n  types: Map<Type, string[]> = new Map();\n\n  constructor({\n    base,\n    propertyName,\n    types,\n    values\n  }: Partial<{base: Type<any>; propertyName: string; values: Map<string, Type<any>>; types: Map<Type, string[]>}> = {}) {\n    Object.assign(\n      this,\n      cleanObject({\n        base,\n        propertyName,\n        types: types ? new Map(types) : undefined,\n        values: values ? new Map(values) : undefined\n      })\n    );\n  }\n\n  add(type: Type<string>, values: string[]) {\n    values.forEach((value) => {\n      this.values.set(value, type);\n    });\n\n    this.types.set(type, values);\n\n    return this;\n  }\n\n  getType(discriminatorValue: string): Type<any> {\n    return this.values.get(discriminatorValue) || this.base;\n  }\n\n  getValues(type: Type) {\n    return this.types.get(type);\n  }\n\n  getDefaultValue(type: Type<any>) {\n    const values = this.types.get(type);\n    return values ? values[0] : undefined;\n  }\n\n  children() {\n    return [...new Set([...this.types.keys()])];\n  }\n}\n"]}