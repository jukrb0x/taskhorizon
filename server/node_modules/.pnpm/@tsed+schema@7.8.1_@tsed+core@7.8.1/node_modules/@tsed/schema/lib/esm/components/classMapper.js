import { JsonEntityStore } from "../domain/JsonEntityStore.js";
import { execMapper, registerJsonSchemaMapper } from "../registries/JsonSchemaMapperContainer.js";
import { mapGenericsOptions, popGenerics } from "../utils/generics.js";
import { createRef, createRefName } from "../utils/ref.js";
export function classMapper(value, options) {
    const store = JsonEntityStore.from(value.class);
    const name = createRefName(store.schema.getName() || value.getName(), options);
    if (value.hasGenerics) {
        // Inline generic
        const { type, properties, additionalProperties, items, ...props } = value.toJSON(options);
        const schema = {
            ...execMapper("any", store.schema, {
                ...options,
                ...popGenerics(value),
                root: false
            }),
            ...props
        };
        if (schema.title) {
            const name = createRefName(schema.title, options);
            options.schemas[name] = schema;
            delete schema.title;
            return createRef(name, value, options);
        }
        return schema;
    }
    if (options.schemas && !options.schemas[name]) {
        options.schemas[name] = {}; // avoid infinite calls
        options.schemas[name] = execMapper("any", store.schema, mapGenericsOptions({
            ...options,
            root: false
        }));
    }
    return createRef(name, value, options);
}
registerJsonSchemaMapper("class", classMapper);
//# sourceMappingURL=classMapper.js.map