{"version":3,"file":"serializeEnumValues.js","sourceRoot":"","sources":["../../../src/utils/serializeEnumValues.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,QAAQ,EAAE,IAAI,EAAC,MAAM,YAAY,CAAC;AAE1C,MAAM,CAAC,MAAM,aAAa,GAAG,CAAC,SAAc,EAAE,EAAE;IAC9C,IAAI,QAAQ,CAAC,SAAS,CAAC,IAAI,SAAS,KAAK,IAAI,EAAE;QAC7C,OAAO,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,CAAC,GAAQ,EAAE,CAAC,GAAG,EAAE,KAAK,CAAM,EAAE,EAAE;YACtE,IAAI,KAAK,CAAC,CAAC,GAAG,CAAC,EAAE;gBACf,OAAO,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;aAC1B;YAED,OAAO,GAAG,CAAC;QACb,CAAC,EAAE,EAAE,CAAC,CAAC;KACR;IAED,OAAO,SAAS,CAAC;AACnB,CAAC,CAAC;AAEF,MAAM,UAAU,mBAAmB,CAAC,UAAiB;IACnD,MAAM,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;IAEvF,MAAM,QAAQ,GAAG,CAAC,KAAU,EAAE,EAAE;QAC9B,OAAO,KAAK,KAAK,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,KAAK,CAAC;IAChD,CAAC,CAAC;IAEF,MAAM,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,GAAa,EAAE,KAAU,EAAE,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,GAAG,EAAE,CAAC,CAAC;IAEhG,OAAO,EAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE,KAAK,EAAC,CAAC;AACvC,CAAC","sourcesContent":["import {isObject, uniq} from \"@tsed/core\";\n\nexport const serializeEnum = (enumValue: any) => {\n  if (isObject(enumValue) && enumValue !== null) {\n    return Object.entries(enumValue).reduce((acc: any, [key, value]: any) => {\n      if (isNaN(+key)) {\n        return acc.concat(value);\n      }\n\n      return acc;\n    }, []);\n  }\n\n  return enumValue;\n};\n\nexport function serializeEnumValues(enumValues: any[]) {\n  const values = enumValues.reduce((acc, value) => acc.concat(serializeEnum(value)), []);\n\n  const getValue = (value: any) => {\n    return value === null ? \"null\" : typeof value;\n  };\n\n  const types = values.reduce((set: Set<any>, value: any) => set.add(getValue(value)), new Set());\n\n  return {values: uniq(values), types};\n}\n"]}