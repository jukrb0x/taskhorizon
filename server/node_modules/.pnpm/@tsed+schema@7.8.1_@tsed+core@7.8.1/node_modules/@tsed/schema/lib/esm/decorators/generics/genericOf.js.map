{"version":3,"file":"genericOf.js","sourceRoot":"","sources":["../../../../src/decorators/generics/genericOf.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,QAAQ,EAAO,MAAM,YAAY,CAAC;AAC1C,OAAO,EAAC,eAAe,EAAC,MAAM,8BAA8B,CAAC;AAC7D,OAAO,EAAC,MAAM,EAAC,MAAM,kBAAkB,CAAC;AAGxC;;GAEG;AACH,SAAS,MAAM,CAAC,IAAS;IACvB,OAAO,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,QAAQ,IAAI,IAAI,CAAC,CAAC;AAC/C,CAAC;AAYD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAiEG;AACH,MAAM,UAAU,SAAS,CAAC,GAAG,QAAwB;IACnD,MAAM,cAAc,GAAqB;QACvC,QAAQ,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;YACpB,IAAI,MAAM,CAAC,IAAI,CAAC,EAAE;gBAChB,OAAO,MAAM,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;aAC3C;YACD,OAAO,IAAI,CAAC;QACd,CAAC,CAAC;KACH,CAAC;IAEF,MAAM,SAAS,GAAG,CAAC,GAAG,IAAS,EAAE,EAAE;QACjC,MAAM,KAAK,GAAG,eAAe,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;QAC5C,KAAK,CAAC,cAAc,GAAG,cAAc,CAAC;IACxC,CAAC,CAAC;IAEF,SAAS,CAAC,MAAM,GAAG,CAAC,GAAG,QAAa,EAAE,EAAE;QACtC,cAAc,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAE9B,OAAO,SAAS,CAAC;IACnB,CAAC,CAAC;IAEF,OAAO,SAAS,CAAC;AACnB,CAAC","sourcesContent":["import {isObject, Type} from \"@tsed/core\";\nimport {JsonEntityStore} from \"../../domain/JsonEntityStore\";\nimport {string} from \"../../utils/from\";\nimport {GenericValue} from \"../../utils/generics\";\n\n/**\n * @ignore\n */\nfunction isEnum(type: any) {\n  return isObject(type) && !(\"toJSON\" in type);\n}\n\nexport interface GenericOfChainedDecorators {\n  (...args: any): any;\n\n  /**\n   * Declare a nested generic models\n   * @param generics\n   */\n  Nested(...generics: GenericValue[]): this;\n}\n\n/**\n * Set the types of a Generic class.\n *\n * ## Example\n *\n * ```typescript\n * class Product {\n *   @Property()\n *   label: string;\n * }\n *\n * @Generics(\"T\")\n * class Paginated<T> {\n *   @CollectionOf(\"T\")\n *   data: T[];\n *\n *   @Property()\n *   totalCount: number;\n * }\n *\n * class Payload {\n *    @GenericOf(Product)\n *    products: Paginated<Product>;\n * }\n * ```\n *\n * ## Example with nested generics\n *\n * ```typescript\n * class Product {\n *   @Property()\n *   label: string;\n * }\n *\n * @Generics(\"T\")\n * class Paginated<T> {\n *   @CollectionOf(\"T\")\n *   data: T[];\n *\n *   @Property()\n *   totalCount: number;\n * }\n *\n * @Generics(\"D\")\n * class Submission<D> {\n *   @Property()\n *   _id: string;\n *\n *   @Property(\"D\")\n *   data: D;\n * }\n *\n * class Payload {\n *    @GenericOf(Submissions).Nested(Product)\n *    submissions: Paginated<Submission<Product>>;\n * }\n * ```\n *\n * @param {Type<any>[]} generics\n * @decorator\n * @validation\n * @swagger\n * @schema\n * @input\n * @generics\n */\nexport function GenericOf(...generics: GenericValue[]): GenericOfChainedDecorators {\n  const nestedGenerics: GenericValue[][] = [\n    generics.map((type) => {\n      if (isEnum(type)) {\n        return string().enum(Object.values(type));\n      }\n      return type;\n    })\n  ];\n\n  const decorator = (...args: any) => {\n    const store = JsonEntityStore.from(...args);\n    store.nestedGenerics = nestedGenerics;\n  };\n\n  decorator.Nested = (...generics: any) => {\n    nestedGenerics.push(generics);\n\n    return decorator;\n  };\n\n  return decorator;\n}\n"]}