{"version":3,"file":"JsonEntityStore.js","sourceRoot":"","sources":["../../../src/domain/JsonEntityStore.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  ancestorsOf,\n  classOf,\n  decoratorTypeOf,\n  DecoratorTypes,\n  descriptorOf,\n  isArrayOrArrayClass,\n  isClass,\n  isCollection,\n  isDate,\n  isObject,\n  isPlainObject,\n  isPrimitiveOrPrimitiveClass,\n  nameOf,\n  prototypeOf,\n  Store,\n  Type\n} from \"@tsed/core\";\nimport type {JsonClassStore} from \"./JsonClassStore\";\nimport type {JsonMethodStore} from \"./JsonMethodStore\";\nimport type {JsonParameterStore} from \"./JsonParameterStore\";\nimport type {JsonPropertyStore} from \"./JsonPropertyStore\";\nimport type {JsonSchema} from \"./JsonSchema\";\n\n/**\n * @ignore\n */\nexport const JsonEntitiesContainer = new Map<DecoratorTypes, Type<JsonEntityStore>>();\n\nexport interface JsonEntityStoreOptions {\n  decoratorType: DecoratorTypes;\n  target: Type<any>;\n  propertyKey?: string | symbol;\n  index?: number;\n  descriptor?: any;\n  type?: Type<any>;\n  collectionType?: Type<any>;\n  beforeMiddlewares?: Function[];\n  middlewares?: Function[];\n  afterMiddlewares?: Function[];\n\n  [key: string]: any;\n}\n\nexport abstract class JsonEntityStore implements JsonEntityStoreOptions {\n  /**\n   * Original property key decorated by the decorator\n   */\n  readonly propertyKey: string | symbol;\n  /**\n   * Alias of the property\n   */\n  readonly propertyName: string;\n  /**\n   * Parameter index\n   */\n  readonly index: number;\n  /**\n   * Method's descriptor\n   */\n  readonly descriptor: PropertyDescriptor;\n  /**\n   * Decorator type used to declare the JsonSchemaStore.\n   */\n  readonly decoratorType: DecoratorTypes;\n  /**\n   * Type of the collection (Array, Map, Set, etc...)\n   */\n  public collectionType: Type<any>;\n  public token: Type<any>;\n  readonly store: Store;\n  readonly isStore = true;\n  readonly parent: JsonEntityStore;\n  readonly target: Type<any>;\n  /**\n   *\n   */\n  protected _type: Type<any>;\n  /**\n   * Ref to JsonSchema\n   */\n  protected _schema: JsonSchema;\n\n  [key: string]: any;\n\n  constructor(options: JsonEntityStoreOptions) {\n    const {target, propertyKey, descriptor, index, decoratorType} = options;\n    this.target = target;\n    this.propertyKey = propertyKey!;\n    this.propertyName = String(propertyKey);\n    this.descriptor = descriptor;\n    this.index = index!;\n    this.decoratorType = decoratorType;\n    this.token = target;\n    this.store = options.store;\n    this.parent = this;\n  }\n\n  /**\n   * Return the class name of the entity.\n   * @returns {string}\n   */\n  get targetName(): string {\n    return nameOf(this.token);\n  }\n\n  get isCollection(): boolean {\n    return !!this.collectionType;\n  }\n\n  get isArray() {\n    return isArrayOrArrayClass(this.collectionType);\n  }\n\n  get discriminatorAncestor(): JsonEntityStore | undefined {\n    const ancestors = ancestorsOf(this.target);\n    const ancestor = ancestors.find((ancestor) => JsonEntityStore.from(ancestor).schema.isDiscriminator);\n    return ancestor && JsonEntityStore.from(ancestor);\n  }\n\n  get isPrimitive() {\n    return isPrimitiveOrPrimitiveClass(this._type);\n  }\n\n  get isDate() {\n    return isDate(this.computedType);\n  }\n\n  get isObject() {\n    return isObject(this.computedType);\n  }\n\n  get isClass() {\n    return isClass(this.computedType);\n  }\n\n  /**\n   * Return the JsonSchema\n   */\n  get schema(): JsonSchema {\n    return this._schema;\n  }\n\n  get nestedGenerics(): Type<any>[][] {\n    return this.schema.nestedGenerics;\n  }\n\n  set nestedGenerics(nestedGenerics: Type<any>[][]) {\n    this.schema.nestedGenerics = nestedGenerics;\n  }\n\n  get type(): Type<any> | any {\n    return this._type;\n  }\n\n  /**\n   * Get original type without transformation\n   * @param value\n   */\n  set type(value: Type<any> | any) {\n    this._type = value;\n    this.build();\n  }\n\n  /**\n   * Return the itemSchema computed type. if the type is a function used for recursive model, the function will be called to\n   * get the right type.\n   */\n  get computedType() {\n    return this.itemSchema.getComputedType();\n  }\n\n  get itemSchema(): JsonSchema {\n    return this.isCollection ? this.schema.itemSchema() : this.schema;\n  }\n\n  get parentSchema(): JsonSchema {\n    return this.parent.schema;\n  }\n\n  get isDiscriminatorChild() {\n    return this.schema.isDiscriminator && this.discriminatorAncestor?.schema.discriminator().base !== this.target;\n  }\n\n  static from<T extends JsonClassStore = JsonClassStore>(target: Type<any>): T;\n\n  static from<T extends JsonPropertyStore = JsonPropertyStore>(target: Type<any> | any, propertyKey: string | symbol): T;\n\n  static from<T extends JsonParameterStore = JsonParameterStore>(target: Type<any> | any, propertyKey: string | symbol, index: number): T;\n\n  static from<T extends JsonMethodStore = JsonMethodStore>(\n    target: Type<any> | any,\n    propertyKey: string | symbol,\n    descriptor: PropertyDescriptor\n  ): T;\n\n  static from<T extends JsonEntityStore = JsonEntityStore>(...args: any[]): T;\n\n  static from<T extends JsonEntityStore = JsonEntityStore>(...args: any[]): T {\n    if (args[0].isStore) {\n      return args[0] as T;\n    }\n\n    const target = args[0];\n\n    if (args.length > 1) {\n      args[0] = prototypeOf(args[0]);\n    }\n\n    const store = Store.from(...args);\n\n    if (!store.has(\"JsonEntityStore\")) {\n      const decoratorType = decoratorTypeOf(args);\n      const entityStore = JsonEntitiesContainer.get(decoratorType);\n\n      // istanbul ignore next\n      if (!entityStore) {\n        throw Error(\"Unsupported json entity type\");\n      }\n\n      const jsonSchemaStore = new entityStore({\n        store,\n        decoratorType,\n        target: classOf(target),\n        propertyKey: args[1],\n        index: typeof args[2] === \"number\" ? args[2] : undefined,\n        descriptor: typeof args[2] === \"object\" ? args[2] : undefined\n      });\n\n      jsonSchemaStore.build();\n\n      store.set(\"JsonEntityStore\", jsonSchemaStore);\n    }\n\n    return store.get<T>(\"JsonEntityStore\")!;\n  }\n\n  static fromMethod<T extends JsonMethodStore = JsonMethodStore>(target: any, propertyKey: string | symbol) {\n    return this.from<T>(target, propertyKey, descriptorOf(target, propertyKey));\n  }\n\n  static get(target: Type<any>, propertyKey: string | symbol, descriptor?: any) {\n    return JsonEntityStore.from(prototypeOf(target), propertyKey, descriptor);\n  }\n\n  isGetterOnly() {\n    return isObject(this.descriptor) && !this.descriptor.value && this.descriptor.get && !this.descriptor.set;\n  }\n\n  get<T = any>(key: string, defaultValue?: any) {\n    return this.store.get<T>(key, defaultValue);\n  }\n\n  set(key: string, value?: any) {\n    return this.store.set(key, value);\n  }\n\n  toString() {\n    return [this.targetName, this.propertyName, this.index].filter((o) => o !== undefined).join(\":\");\n  }\n\n  protected abstract build(): void;\n\n  protected buildType(type: any) {\n    if (isCollection(type)) {\n      this.collectionType = type;\n    } else {\n      this._type = type;\n\n      // issue #1534: Enum metadata stored as plain object instead of String (see: https://github.com/tsedio/tsed/issues/1534)\n      if (this._type && isPlainObject(this._type)) {\n        this._type = String;\n      }\n    }\n  }\n}\n"]}