{"version":3,"file":"JsonMethodStore.js","sourceRoot":"","sources":["../../../src/domain/JsonMethodStore.ts"],"names":[],"mappings":"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","sourcesContent":["import {DecoratorTypes, deepMerge, descriptorOf, isCollection, isFunction, isPromise, Metadata, prototypeOf, Store, Type} from \"@tsed/core\";\nimport {JsonEntityComponent} from \"../decorators/config/jsonEntityComponent\";\nimport type {JsonClassStore} from \"./JsonClassStore\";\nimport {JsonEntityStore, JsonEntityStoreOptions} from \"./JsonEntityStore\";\nimport {JsonOperation} from \"./JsonOperation\";\nimport type {JsonParameterStore} from \"./JsonParameterStore\";\nimport {JsonSchema} from \"./JsonSchema\";\n\nexport interface JsonViewOptions {\n  path: string;\n  options: any;\n}\n\nexport interface JsonRedirectOptions {\n  status: number | undefined;\n  url: string;\n}\n\n@JsonEntityComponent(DecoratorTypes.METHOD)\nexport class JsonMethodStore extends JsonEntityStore {\n  readonly parent: JsonClassStore = JsonEntityStore.from(this.target);\n  public middlewares: any[] = [];\n  public beforeMiddlewares: any[] = [];\n  public afterMiddlewares: any[] = [];\n  /**\n   * Ref to JsonOperation when the decorated object is a method.\n   */\n  readonly operation: JsonOperation = new JsonOperation();\n  /**\n   * List of children JsonEntityStore (properties or methods or params)\n   */\n  readonly children: Map<string | number, JsonParameterStore> = new Map();\n\n  constructor(options: JsonEntityStoreOptions) {\n    super({\n      store: Store.fromMethod(options.target, options.propertyKey!),\n      descriptor: descriptorOf(options.target, options.propertyKey!),\n      ...options\n    });\n\n    const {beforeMiddlewares = [], middlewares = [], afterMiddlewares = []} = options;\n\n    this.after(afterMiddlewares);\n    this.before(beforeMiddlewares);\n    this.use(middlewares);\n  }\n\n  get params(): JsonParameterStore[] {\n    return this.parameters;\n  }\n\n  get view(): JsonViewOptions {\n    return this.store.get(\"view\") as JsonViewOptions;\n  }\n\n  set view(view: JsonViewOptions) {\n    this.store.set(\"view\", view);\n  }\n\n  get acceptMimes(): string[] {\n    return this.store.get<string[]>(\"acceptMimes\", []);\n  }\n\n  set acceptMimes(mimes: string[]) {\n    this.store.set(\"acceptMimes\", mimes);\n  }\n\n  get parameters(): JsonParameterStore[] {\n    return [...this.children.values()] as JsonParameterStore[];\n  }\n\n  get operationPaths() {\n    return this.operation.operationPaths;\n  }\n\n  /**\n   * Get an endpoint.\n   * @param target\n   * @param propertyKey\n   * @param descriptor\n   */\n  static get(target: Type<any>, propertyKey: string | symbol, descriptor?: PropertyDescriptor): JsonMethodStore {\n    descriptor = descriptor || descriptorOf(prototypeOf(target), propertyKey);\n\n    return JsonEntityStore.from<JsonMethodStore>(prototypeOf(target), propertyKey, descriptor);\n  }\n\n  getResponseOptions(\n    status: number,\n    {contentType = \"application/json\", includes}: {contentType?: string; includes?: string[]} = {}\n  ): undefined | any {\n    const media = this.operation.getResponseOf(status).getMedia(contentType, false);\n\n    if (media && media.has(\"schema\")) {\n      const schema = media.get(\"schema\") as JsonSchema;\n      let groups = media.groups;\n\n      if (includes && media.allowedGroups?.size) {\n        groups = [...(groups || []), ...includes.filter((include) => media.allowedGroups!.has(include))];\n      }\n\n      return {type: schema.getComputedItemType(), groups};\n    }\n\n    return {type: this.type};\n  }\n\n  /**\n   * Append middlewares to the beforeMiddlewares list.\n   * @param args\n   * @returns {EndpointMetadata}\n   */\n  public before(args: Function[]): this {\n    this.beforeMiddlewares = this.beforeMiddlewares.concat(args).filter(isFunction);\n\n    return this;\n  }\n\n  /**\n   * Append middlewares to the afterMiddlewares list.\n   * @param args\n   * @returns {EndpointMetadata}\n   */\n  public after(args: Function[]): this {\n    this.afterMiddlewares = this.afterMiddlewares.concat(args).filter(isFunction);\n\n    return this;\n  }\n\n  /**\n   * Store all arguments collected via Annotation.\n   * @param args\n   */\n  public use(args: Function[]) {\n    this.middlewares = this.middlewares.concat(args).filter(isFunction);\n\n    return this;\n  }\n\n  /**\n   * Find the value at the controller level. Let this value be extended or overridden by the endpoint itself.\n   *\n   * @param key\n   * @returns {any}\n   */\n  public get<T = any>(key: any): T {\n    const ctrlValue = Store.from(this.target).get(key);\n\n    return deepMerge<T>(ctrlValue, this.store.get(key));\n  }\n\n  public getParamTypes(): Record<string, boolean> {\n    return [...this.children.values()].reduce(\n      (obj, item) => ({\n        ...obj,\n        [item.paramType]: true\n      }),\n      {}\n    );\n  }\n\n  protected build() {\n    if (!this._type) {\n      let type: any = Metadata.getReturnType(this.target, this.propertyKey);\n      type = isPromise(type) ? undefined : type;\n\n      this.buildType(type);\n    }\n\n    this._type = this._type || Object;\n\n    this.parent.children.set(this.propertyName, this);\n\n    if (isCollection(this._type)) {\n      this.collectionType = this._type;\n      // @ts-ignore\n      delete this._type;\n    }\n\n    this._schema = JsonSchema.from({\n      type: this.collectionType || this.type\n    });\n\n    if (this.collectionType) {\n      this._schema.itemSchema(this.type);\n    }\n\n    this.parent.schema.addProperty(this.propertyName, this.schema);\n  }\n}\n\n/**\n * EndpointMetadata contains metadata about a controller and his method.\n * Each annotation (@Get, @Body...) attached to a method are stored into endpoint.\n * EndpointMetadata convert this metadata to an array which contain arguments to call an Express method.\n *\n * Example :\n *```typescript\n * @Controller(\"/my-path\")\n * provide MyClass {\n *\n *     @Get(\"/\")\n *     @Authenticated()\n *     public myMethod(){}\n * }\n *```\n *\n * @alias JsonMethodStore\n */\nexport type EndpointMetadata = JsonMethodStore;\nexport const EndpointMetadata = JsonMethodStore;\n"]}