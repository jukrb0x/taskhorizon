{"version":3,"file":"transformToOS2.js","sourceRoot":"","sources":["../../../src/utils/transformToOS2.ts"],"names":[],"mappings":"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","sourcesContent":["\"use strict\";\nimport {OpenSpec2, OpenSpec3, OS3Operation} from \"@tsed/openspec\";\nimport {cleanObject} from \"@tsed/core\";\n\nconst HTTP_METHODS = [\"get\", \"put\", \"post\", \"delete\", \"options\", \"head\", \"patch\", \"trace\"];\nconst SCHEMA_PROPERTIES = [\n  \"format\",\n  \"minimum\",\n  \"maximum\",\n  \"exclusiveMinimum\",\n  \"exclusiveMaximum\",\n  \"minLength\",\n  \"maxLength\",\n  \"multipleOf\",\n  \"minItems\",\n  \"maxItems\",\n  \"uniqueItems\",\n  \"minProperties\",\n  \"maxProperties\",\n  \"additionalProperties\",\n  \"pattern\",\n  \"enum\",\n  \"default\"\n];\nconst ARRAY_PROPERTIES = [\"type\", \"items\"];\n\nconst APPLICATION_JSON_REGEX = /^(application\\/json|[^;\\/ \\t]+\\/[^;\\/ \\t]+[+]json)[ \\t]*(;.*)?$/;\nconst SUPPORTED_MIME_TYPES: Record<string, any> = {\n  APPLICATION_X_WWW_URLENCODED: \"application/x-www-form-urlencoded\",\n  MULTIPART_FORM_DATA: \"multipart/form-data\"\n};\n\nfunction fixRef(ref: string) {\n  return ref.replace(\"#/components/schemas/\", \"#/definitions/\").replace(\"#/components/\", \"#/x-components/\");\n}\n\nfunction fixRefs(obj: any) {\n  if (Array.isArray(obj)) {\n    obj.forEach(fixRefs);\n  } else if (typeof obj === \"object\") {\n    for (let key in obj) {\n      if (key === \"$ref\") {\n        obj.$ref = fixRef(obj.$ref);\n      } else {\n        fixRefs(obj[key]);\n      }\n    }\n  }\n}\n\nfunction isJsonMimeType(type: string) {\n  return new RegExp(APPLICATION_JSON_REGEX, \"i\").test(type);\n}\n\nfunction getSupportedMimeTypes(content: any) {\n  const MIME_VALUES = Object.keys(SUPPORTED_MIME_TYPES).map((key) => {\n    return SUPPORTED_MIME_TYPES[key];\n  });\n  return Object.keys(content).filter((key) => {\n    return MIME_VALUES.indexOf(key) > -1 || isJsonMimeType(key);\n  });\n}\n\nexport function transformSecurity(securitySchemes: any) {\n  function map(security: any) {\n    const {scheme, type, name, bearerFormat, flows, ...props} = security;\n\n    switch (type) {\n      case \"http\":\n        if (scheme === \"basic\") {\n          return {\n            ...props,\n            type: scheme\n          };\n        }\n\n        if (scheme === \"bearer\") {\n          return {\n            ...props,\n            type: \"apiKey\",\n            name: \"Authorization\",\n            in: \"header\"\n          };\n        }\n        break;\n      case \"oauth2\":\n        const flowName = Object.keys(flows)[0];\n        const flow = flows[flowName];\n        let flowType = flowName;\n\n        if (flowType === \"clientCredentials\") {\n          flowType = \"application\";\n        } else if (flowType === \"authorizationCode\") {\n          flowType = \"accessCode\";\n        }\n\n        return {\n          type,\n          flow: flowType,\n          authorizationUrl: flow.authorizationUrl,\n          tokenUrl: flow.tokenUrl,\n          scopes: flow.scopes\n        };\n    }\n  }\n\n  return Object.entries(securitySchemes).reduce((securityDefinitions, [key, security]) => {\n    return {\n      ...securityDefinitions,\n      [key]: map(security)\n    };\n  }, {});\n}\n\nexport function transformInformation(server: any) {\n  let serverUrl = server.url;\n\n  const variables = server[\"variables\"] || {};\n\n  for (const variable in variables) {\n    const variableObject = variables[variable] || {};\n    if (variableObject[\"default\"]) {\n      const re = RegExp(`{${variable}}`, \"g\");\n      serverUrl = serverUrl.replace(re, variableObject[\"default\"]);\n    }\n  }\n\n  const url = new URL(serverUrl);\n\n  return {\n    host: url.host ? url.host : undefined,\n    basePath: url.pathname,\n    schemes: url.protocol !== null ? [url.protocol.substring(0, url.protocol.length - 1)] : undefined\n  };\n}\n\nexport class Converter {\n  private spec: any;\n\n  constructor(spec: Partial<OpenSpec3>) {\n    this.spec = JSON.parse(JSON.stringify(spec));\n  }\n\n  convertInfos() {\n    const server = this.spec.servers && this.spec.servers[0];\n\n    if (server) {\n      return transformInformation(server);\n    }\n\n    return {};\n  }\n\n  resolveReference(base: any, obj: any, shouldClone: boolean) {\n    if (!obj || !obj.$ref) {\n      return obj;\n    }\n\n    const ref: string = obj.$ref;\n\n    if (ref.startsWith(\"#\")) {\n      const keys = ref.split(\"/\").map((k) => k.replace(/~1/g, \"/\").replace(/~0/g, \"~\"));\n      keys.shift();\n\n      let cur = base;\n      keys.forEach((k) => {\n        cur = cur[k];\n      });\n\n      return shouldClone ? JSON.parse(JSON.stringify(cur)) : cur;\n    }\n  }\n\n  convert() {\n    const spec = {\n      swagger: \"2.0\",\n      ...this.convertInfos(),\n      paths: this.spec.paths ? this.convertOperations(this.spec.paths, this.spec) : undefined\n    };\n\n    if (this.spec.components) {\n      this.convertSchemas();\n      this.convertSecurityDefinitions();\n\n      this.spec[\"x-components\"] = this.spec.components;\n      delete this.spec.components;\n\n      fixRefs(this.spec);\n    }\n\n    delete this.spec.servers;\n    delete this.spec.openapi;\n    delete this.spec[\"x-components\"];\n\n    return cleanObject({\n      ...spec,\n      ...this.spec\n    });\n  }\n\n  convertOperations(paths: any, spec: any) {\n    return Object.entries(paths).reduce((paths, [path, operation]) => {\n      const pathObject = (paths[path] = this.resolveReference({...spec, paths}, operation, true));\n\n      this.convertParameters(pathObject); // converts common parameters\n\n      Object.keys(pathObject).forEach((method) => {\n        if (HTTP_METHODS.indexOf(method) >= 0) {\n          const operation = (pathObject[method] = this.resolveReference({...spec, paths}, pathObject[method], true));\n\n          this.convertOperationParameters(operation);\n          this.convertResponses(operation);\n        }\n      });\n\n      return paths;\n    }, paths);\n  }\n\n  convertOperationParameters(operation: OS3Operation) {\n    let content, contentKey, mediaRanges, mediaTypes;\n    operation.parameters = operation.parameters || [];\n\n    if (operation.requestBody) {\n      let param = this.resolveReference(this.spec, operation.requestBody, true);\n\n      // fixing external $ref in body\n      if (operation.requestBody.content) {\n        const type = getSupportedMimeTypes(operation.requestBody.content)[0];\n        const structuredObj: any = {content: {}};\n        const data = operation.requestBody.content[type];\n\n        if (data && data.schema && data.schema.$ref && !data.schema.$ref.startsWith(\"#\")) {\n          param = this.resolveReference(this.spec, data.schema, true);\n          structuredObj[\"content\"][`${type}`] = {schema: param};\n          param = structuredObj;\n        }\n      }\n\n      param.name = \"body\";\n      content = param.content;\n\n      if (content && Object.keys(content).length) {\n        mediaRanges = Object.keys(content).filter((mediaRange) => mediaRange.indexOf(\"/\") > 0);\n        mediaTypes = mediaRanges.filter((range) => range.indexOf(\"*\") < 0);\n        contentKey = getSupportedMimeTypes(content)[0];\n\n        delete param.content;\n\n        if ([SUPPORTED_MIME_TYPES.APPLICATION_X_WWW_URLENCODED, SUPPORTED_MIME_TYPES.MULTIPART_FORM_DATA].includes(contentKey)) {\n          (operation as any).consumes = mediaTypes;\n\n          param.in = \"formData\";\n          param.schema = content[contentKey].schema;\n          param.schema = this.resolveReference(this.spec, param.schema, true);\n\n          if (param.schema.type === \"object\" && param.schema.properties) {\n            const required = param.schema.required || [];\n\n            Object.keys(param.schema.properties).forEach((name) => {\n              const schema = param.schema.properties[name];\n\n              // readOnly properties should not be sent in requests\n              if (!schema.readOnly) {\n                const formDataParam: any = {\n                  name,\n                  in: \"formData\",\n                  schema\n                };\n                if (required.indexOf(name) >= 0) {\n                  formDataParam.required = true;\n                }\n\n                operation.parameters?.push(formDataParam);\n              }\n            });\n          } else {\n            operation.parameters.push(param);\n          }\n        } else if (contentKey) {\n          (operation as any).consumes = mediaTypes;\n          param.in = \"body\";\n          param.schema = content[contentKey].schema;\n          operation.parameters.push(param);\n        } else if (mediaRanges) {\n          (operation as any).consumes = mediaTypes || [\"application/octet-stream\"];\n          param.in = \"body\";\n          param.name = param.name || \"file\";\n          delete param.type;\n\n          param.schema = content[mediaRanges[0]].schema || {\n            type: \"string\",\n            format: \"binary\"\n          };\n\n          operation.parameters.push(param);\n        }\n\n        if (param.schema) {\n          this.convertSchema(param.schema, \"request\");\n        }\n      }\n\n      delete operation.requestBody;\n    }\n    this.convertParameters(operation);\n  }\n\n  convertParameters(obj: any) {\n    if (obj.parameters === undefined) {\n      return;\n    }\n\n    obj.parameters = obj.parameters || [];\n\n    (obj.parameters || []).forEach((param: any, i: number) => {\n      param = obj.parameters[i] = this.resolveReference(this.spec, param, false);\n\n      if (param.in !== \"body\") {\n        this.copySchemaProperties(param, SCHEMA_PROPERTIES);\n        this.copySchemaProperties(param, ARRAY_PROPERTIES);\n        this.copySchemaXProperties(param);\n\n        if (!param.description) {\n          const schema = this.resolveReference(this.spec, param.schema, false);\n          if (!!schema && schema.description) {\n            param.description = schema.description;\n          }\n        }\n\n        if (param.example !== undefined) {\n          param[\"x-example\"] = param.example;\n        }\n\n        delete param.schema;\n        delete param.allowReserved;\n        delete param.example;\n      }\n\n      if (param.type === \"array\") {\n        let style = param.style || (param.in === \"query\" || param.in === \"cookie\" ? \"form\" : \"simple\");\n\n        switch (style) {\n          case \"matrix\":\n            param.collectionFormat = param.explode ? undefined : \"csv\";\n            break;\n          case \"label\":\n            param.collectionFormat = undefined;\n            break;\n          case \"simple\":\n            param.collectionFormat = \"csv\";\n            break;\n          case \"spaceDelimited\":\n            param.collectionFormat = \"ssv\";\n            break;\n          case \"pipeDelimited\":\n            param.collectionFormat = \"pipes\";\n            break;\n          case \"deepOpbject\":\n            param.collectionFormat = \"multi\";\n            break;\n          case \"form\":\n            param.collectionFormat = param.explode === false ? \"csv\" : \"multi\";\n            break;\n        }\n      }\n\n      delete param.style;\n      delete param.explode;\n    });\n  }\n\n  copySchemaProperties(obj: any, props: any[]) {\n    let schema = this.resolveReference(this.spec, obj.schema, true);\n\n    if (!schema) {\n      return;\n    }\n\n    props.forEach((prop) => {\n      const value = schema[prop];\n\n      if (prop === \"additionalProperties\" && typeof value === \"boolean\") {\n        return;\n      }\n\n      if (value !== undefined) {\n        obj[prop] = value;\n      }\n    });\n  }\n\n  copySchemaXProperties(obj: Record<string, any>) {\n    let schema = this.resolveReference(this.spec, obj.schema, true);\n    if (!schema) {\n      return;\n    }\n\n    Object.keys(schema).forEach((propName) => {\n      if (Reflect.hasOwnProperty.call(schema, propName) && !Reflect.hasOwnProperty.call(obj, propName) && propName.startsWith(\"x-\")) {\n        obj[propName] = schema[propName];\n      }\n    });\n  }\n\n  convertResponses(operation: Record<string, any>) {\n    // var anySchema, code, content, jsonSchema, mediaRange, mediaType, response, resolved, headers\n\n    Object.keys(operation.responses || {}).forEach((code) => {\n      const response = (operation.responses[code] = this.resolveReference(this.spec, operation.responses[code], true));\n\n      if (response.content) {\n        let anySchema: any = null;\n        let jsonSchema: any = null;\n\n        Object.keys(response.content).forEach((mediaRange) => {\n          // produces and examples only allow media types, not ranges\n          // use application/octet-stream as a catch-all type\n          const mediaType = mediaRange.indexOf(\"*\") < 0 ? mediaRange : \"application/octet-stream\";\n\n          if (!operation.produces) {\n            operation.produces = [mediaType];\n          } else if (operation.produces.indexOf(mediaType) < 0) {\n            operation.produces.push(mediaType);\n          }\n\n          const content = response.content[mediaRange];\n          anySchema = anySchema || content.schema;\n\n          if (!jsonSchema && isJsonMimeType(mediaType)) {\n            jsonSchema = content.schema;\n          }\n\n          if (content.example) {\n            response.examples = response.examples || {};\n            response.examples[mediaType] = content.example;\n          }\n        });\n\n        if (anySchema) {\n          response.schema = jsonSchema || anySchema;\n          const resolved = this.resolveReference(this.spec, response.schema, true);\n\n          if (resolved && response.schema.$ref && !response.schema.$ref.startsWith(\"#\")) {\n            response.schema = resolved;\n          }\n\n          this.convertSchema(response.schema, \"response\");\n        }\n      }\n\n      Object.keys(response.headers || {}).forEach((header) => {\n        // Always resolve headers when converting to v2.\n        const resolved = this.resolveReference(this.spec, response.headers[header], true);\n\n        // Headers should be converted like parameters.\n        if (resolved.schema) {\n          resolved.type = resolved.schema.type;\n          resolved.format = resolved.schema.format;\n          delete resolved.schema;\n        }\n\n        response.headers[header] = resolved;\n      });\n\n      delete response.content;\n    });\n  }\n\n  convertSchema(def: any, operationDirection?: any) {\n    if (def.oneOf) {\n      delete def.oneOf;\n\n      if (def.discriminator) {\n        delete def.discriminator;\n      }\n    }\n\n    if (def.anyOf) {\n      delete def.anyOf;\n\n      if (def.discriminator) {\n        delete def.discriminator;\n      }\n    }\n\n    if (def.allOf) {\n      for (const i in def.allOf) {\n        this.convertSchema(def.allOf[i], operationDirection);\n      }\n    }\n\n    if (def.discriminator) {\n      if (def.discriminator.mapping) {\n        this.convertDiscriminatorMapping(def.discriminator.mapping);\n      }\n\n      def.discriminator = def.discriminator.propertyName;\n    }\n\n    switch (def.type) {\n      case \"object\":\n        if (def.properties) {\n          Object.keys(def.properties).forEach((propName) => {\n            if (def.properties[propName].writeOnly === true && operationDirection === \"response\") {\n              delete def.properties[propName];\n            } else {\n              this.convertSchema(def.properties[propName], operationDirection);\n              delete def.properties[propName].writeOnly;\n            }\n          });\n        }\n        break;\n      case \"array\":\n        if (def.items) {\n          this.convertSchema(def.items, operationDirection);\n        }\n    }\n\n    if (def.nullable) {\n      def[\"x-nullable\"] = true;\n      delete def.nullable;\n    }\n\n    // OpenAPI 3 has boolean \"deprecated\" on Schema, OpenAPI 2 does not\n    // Convert to x-deprecated for Autorest (and perhaps others)\n    if (def[\"deprecated\"] !== undefined) {\n      // Move to x-deprecated, unless it is already defined\n      if (def[\"x-deprecated\"] === undefined) {\n        def[\"x-deprecated\"] = def.deprecated;\n      }\n      delete def.deprecated;\n    }\n  }\n\n  convertSchemas() {\n    this.spec.definitions = this.spec.components.schemas;\n\n    Object.keys(this.spec.definitions || {}).forEach((defName) => {\n      this.convertSchema(this.spec.definitions[defName]);\n    });\n\n    delete this.spec.components.schemas;\n  }\n\n  convertDiscriminatorMapping(mapping: any) {\n    Object.keys(mapping).forEach((payload) => {\n      const schemaNameOrRef = mapping[payload];\n\n      if (typeof schemaNameOrRef !== \"string\") {\n        console.warn(`Ignoring ${schemaNameOrRef} for ${payload} in discriminator.mapping.`);\n        return;\n      }\n\n      // payload may be a schema name or JSON Reference string.\n      // OAS3 spec limits schema names to ^[a-zA-Z0-9._-]+$\n      // Note: Valid schema name could be JSON file name without extension.\n      //       Prefer schema name, with file name as fallback.\n      let schema;\n      if (/^[a-zA-Z0-9._-]+$/.test(schemaNameOrRef)) {\n        try {\n          schema = this.resolveReference(this.spec, {$ref: `#/components/schemas/${schemaNameOrRef}`}, false);\n        } catch (err) {\n          console.debug(`Error resolving ${schemaNameOrRef} for ${payload} as schema name in discriminator.mapping: ${err}`);\n        }\n      }\n\n      // schemaNameRef is not a schema name.  Try to resolve as JSON Ref.\n      if (!schema) {\n        try {\n          schema = this.resolveReference(this.spec, {$ref: schemaNameOrRef}, false);\n        } catch (err) {\n          console.debug(`Error resolving ${schemaNameOrRef} for ${payload} in discriminator.mapping: ${err}`);\n        }\n      }\n\n      if (schema) {\n        // Swagger Codegen + OpenAPI Generator extension\n        // https://github.com/swagger-api/swagger-codegen/pull/4252\n        schema[\"x-discriminator-value\"] = payload;\n\n        // AutoRest extension\n        // https://github.com/Azure/autorest/pull/474\n        schema[\"x-ms-discriminator-value\"] = payload;\n      } else {\n        console.warn(`Unable to resolve ${schemaNameOrRef} for ${payload} in discriminator.mapping.`);\n      }\n    });\n  }\n\n  convertSecurityDefinitions() {\n    if (this.spec.components.securitySchemes) {\n      this.spec.securityDefinitions = transformSecurity(this.spec.components.securitySchemes);\n      delete this.spec.components.securitySchemes;\n    }\n  }\n}\n\nexport function transformToOS2(spec: any): Partial<OpenSpec2> {\n  return new Converter(spec).convert();\n}\n"]}