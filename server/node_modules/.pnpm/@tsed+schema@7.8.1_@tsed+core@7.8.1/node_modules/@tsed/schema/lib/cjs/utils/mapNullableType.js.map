{"version":3,"file":"mapNullableType.js","sourceRoot":"","sources":["../../../src/utils/mapNullableType.ts"],"names":[],"mappings":";;;AAAA,qCAAgC;AAEhC,mDAA8C;AAG9C,SAAS,WAAW,CAAC,GAAQ;IAC3B,OAAO,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAM,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,MAAM,CAAC,CAAC;AACvD,CAAC;AAED,SAAgB,eAAe,CAAC,GAAQ,EAAE,MAAyB,EAAE,OAA0B;IAC7F,IAAI,CAAC,MAAM,EAAE,UAAU,EAAE;QACvB,OAAO,GAAG,CAAC;KACZ;IACD,IAAI,KAAK,GAAa,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IAE1D,QAAQ,OAAO,CAAC,QAAQ,EAAE;QACxB,QAAQ;QACR,KAAK,qBAAS,CAAC,IAAI;YACjB,IAAI,CAAC,GAAG,CAAC,aAAa,EAAE;gBACtB,IAAI,GAAG,CAAC,KAAK,EAAE;oBACb,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE;wBACrB,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC;4BAChB,IAAI,EAAE,MAAM;yBACb,CAAC,CAAC;qBACJ;iBACF;qBAAM;oBACL,GAAG,CAAC,IAAI,GAAG,IAAA,WAAI,EAAC,CAAC,MAAM,EAAE,GAAG,KAAK,CAAC,CAAC,CAAC;iBACrC;aACF;YACD,MAAM;QAER,KAAK,qBAAS,CAAC,OAAO;YACpB,GAAG,CAAC,QAAQ,GAAG,IAAI,CAAC;YAEpB,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE;gBACd,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;oBACpB,GAAG,CAAC,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,EAAC,IAAI,EAAC,CAAC,CAAC,CAAC;oBAC1C,OAAO,GAAG,CAAC,IAAI,CAAC;iBACjB;qBAAM;oBACL,GAAG,CAAC,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;iBACrB;aACF;YACD,MAAM;KACT;IAED,OAAO,GAAG,CAAC;AACb,CAAC;AArCD,0CAqCC","sourcesContent":["import {uniq} from \"@tsed/core\";\nimport type {JsonSchema} from \"../domain/JsonSchema\";\nimport {SpecTypes} from \"../domain/SpecTypes\";\nimport type {JsonSchemaOptions} from \"../interfaces/JsonSchemaOptions\";\n\nfunction hasNullable(obj: any) {\n  return obj.oneOf.find((o: any) => o.type === \"null\");\n}\n\nexport function mapNullableType(obj: any, schema: JsonSchema | null, options: JsonSchemaOptions) {\n  if (!schema?.isNullable) {\n    return obj;\n  }\n  let types: string[] = [].concat(obj.type).filter(Boolean);\n\n  switch (options.specType) {\n    default:\n    case SpecTypes.JSON:\n      if (!obj.discriminator) {\n        if (obj.oneOf) {\n          if (!hasNullable(obj)) {\n            obj.oneOf.unshift({\n              type: \"null\"\n            });\n          }\n        } else {\n          obj.type = uniq([\"null\", ...types]);\n        }\n      }\n      break;\n\n    case SpecTypes.OPENAPI:\n      obj.nullable = true;\n\n      if (!obj.oneOf) {\n        if (types.length > 1) {\n          obj.oneOf = types.map((type) => ({type}));\n          delete obj.type;\n        } else {\n          obj.type = types[0];\n        }\n      }\n      break;\n  }\n\n  return obj;\n}\n"]}