{"version":3,"file":"returns.js","sourceRoot":"","sources":["../../../../src/decorators/operations/returns.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  decorateMethodsOf,\n  decoratorTypeOf,\n  DecoratorTypes,\n  isArray,\n  isCollection,\n  isObject,\n  isPlainObject,\n  isPrimitiveOrPrimitiveClass,\n  isString,\n  Type\n} from \"@tsed/core\";\nimport {OS3Example} from \"@tsed/openspec\";\nimport {getStatusMessage} from \"../../constants/httpStatusMessages\";\nimport {DecoratorContext} from \"../../domain/DecoratorContext\";\nimport {JsonEntityStore} from \"../../domain/JsonEntityStore\";\nimport {JsonParameter} from \"../../domain/JsonParameter\";\nimport {JsonResponse} from \"../../domain/JsonResponse\";\nimport {JsonSchema, JsonSchemaObject} from \"../../domain/JsonSchema\";\nimport {JsonHeader, JsonHeaders} from \"../../interfaces/JsonOpenSpec\";\nimport {getStatusModel} from \"../../utils/defineStatusModel\";\nimport {string} from \"../../utils/from\";\nimport {GenericValue} from \"../../utils/generics\";\nimport {isSuccessStatus} from \"../../utils/isSuccessStatus\";\nimport {mapHeaders} from \"../../utils/mapHeaders\";\n\nexport interface ReturnsChainedDecorators {\n  <T>(target: Object, propertyKey: string | symbol, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> | void;\n\n  (target: Function): void;\n\n  /**\n   * Set a Content-Type for the current response\n   * @param value\n   * @constructor\n   */\n  ContentType(value: string): this;\n\n  /**\n   * Add a description\n   * @param description\n   */\n  Description(description: string): this;\n\n  /**\n   * Add examples\n   * @param examples\n   */\n  Examples(examples: Record<string, OS3Example>): this;\n\n  Examples(examples: Record<string, any>): this;\n\n  Examples(examples: any): this;\n\n  /**\n   * Change the model type\n   * @param type\n   */\n  Type(type: Type<any> | any): this;\n\n  /**\n   * Change the status\n   * @param status\n   * @constructor\n   */\n  Status(status: string | number): this;\n\n  /**\n   * Add the nested types\n   * @param types\n   */\n  Of(...types: GenericValue[]): this;\n\n  /**\n   * For the integer type\n   */\n  OfInteger(): this;\n\n  /**\n   * Add the nested types\n   * @param types\n   */\n  OneOf(...types: GenericValue[]): this;\n\n  /**\n   * Add the nested types\n   * @param types\n   */\n  AllOf(...types: GenericValue[]): this;\n\n  /**\n   * Add the nested types\n   * @param types\n   */\n  AnyOf(...types: GenericValue[]): this;\n\n  /**\n   * Declare a nested generic models\n   * @param generics\n   */\n  Nested(...generics: GenericValue[]): this;\n\n  /**\n   * Add header.\n   * @param key\n   * @param value\n   */\n  Header(key: string, value: number | string | (JsonHeader & {value?: string | number | boolean})): this;\n\n  /**\n   * Add headers\n   */\n  Headers(headers: JsonHeaders): this;\n\n  /**\n   * Add location hea\n   */\n  Location(location: string, meta?: JsonHeader): this;\n\n  /**\n   * Assign partial schema\n   * @param schema\n   */\n  Schema(schema: Partial<JsonSchemaObject> | JsonSchema): this;\n\n  /**\n   * Add an inline title for the return model.\n   * @param title\n   */\n  Title(title: string): this;\n\n  /**\n   * Use group to filter model\n   * @param groups\n   */\n  Groups(...groups: string[]): this;\n\n  /**\n   * Add a list of allowed groups to filter dynamically fields. Listed groups can be used by the consumer to change\n   * the mapped response.\n   * @param allowedGroups\n   */\n  AllowedGroups(...allowedGroups: string[]): this;\n\n  [key: string]: any;\n}\n\n/**\n * @ignore\n */\nfunction isEnum(type: any) {\n  return isObject(type) && !(\"toJSON\" in type);\n}\n\nfunction mapGenerics(types: GenericValue[]) {\n  return types.map((type) => {\n    if (isEnum(type)) {\n      return string().enum(Object.values(type));\n    }\n    return type;\n  });\n}\n\n/**\n * @ignore\n */\nclass ReturnDecoratorContext extends DecoratorContext<ReturnsChainedDecorators> {\n  readonly methods: string[] = [\n    \"contentType\",\n    \"description\",\n    \"examples\",\n    \"type\",\n    \"status\",\n    \"of\",\n    \"ofInteger\",\n    \"oneOf\",\n    \"allOf\",\n    \"anyOf\",\n    \"nested\",\n    \"header\",\n    \"headers\",\n    \"schema\",\n    \"title\",\n    \"groups\",\n    \"allowedGroups\",\n    \"location\"\n  ];\n\n  constructor({status, model}: any) {\n    super();\n\n    this.model(model);\n    this.status(status);\n  }\n\n  type(model: any) {\n    return this.model(model);\n  }\n\n  model(model: any) {\n    model && this.set(\"model\", model);\n    return this;\n  }\n\n  status(status: number | string) {\n    this.set(\"status\", status);\n\n    if (status && getStatusMessage(status) && !this.get(\"description\")) {\n      this.set(\"description\", getStatusMessage(status));\n\n      if (!this.get(\"model\")) {\n        this.model(getStatusModel(+status));\n      }\n    }\n\n    return this;\n  }\n\n  headers(headers: JsonHeaders) {\n    this.set(\"headers\", {\n      ...(this.get(\"headers\") || {}),\n      ...mapHeaders(headers)\n    });\n\n    return this;\n  }\n\n  header(key: string, value: string | JsonHeader) {\n    return this.headers({[key]: value});\n  }\n\n  location(path: string, meta: JsonHeaders = {}) {\n    this.headers({\n      Location: {\n        ...meta,\n        value: path\n      }\n    });\n\n    return this;\n  }\n\n  groups(...groups: string[]) {\n    this.set(\"groups\", groups);\n    return this;\n  }\n\n  allowedGroups(...allowedGroups: string[]) {\n    this.set(\"allowedGroups\", new Set(allowedGroups));\n    return this;\n  }\n\n  nested(...generics: GenericValue[]) {\n    const model = this.get(\"model\");\n    this.checkPrimitive(model);\n    this.checkCollection(model);\n\n    this.addAction((ctx) => {\n      (this.get(\"schema\") as JsonSchema).nestedGenerics.push(mapGenerics(generics));\n    });\n\n    return this;\n  }\n\n  of(...types: (Type<any> | any)[]) {\n    const model = this.get(\"model\");\n    this.checkPrimitive(model);\n\n    this.addAction(() => {\n      const schema = this.get(\"schema\") as JsonSchema;\n\n      if (isCollection(model)) {\n        schema?.itemSchema({type: types[0]});\n      } else {\n        schema?.nestedGenerics.push(mapGenerics(types));\n      }\n    });\n\n    return this;\n  }\n\n  ofInteger() {\n    return this.of(\"integer\");\n  }\n\n  oneOf(...types: (Type<any> | any)[]) {\n    return this.manyOf(\"oneOf\", types);\n  }\n\n  allOf(...types: (Type<any> | any)[]) {\n    return this.manyOf(\"allOf\", types);\n  }\n\n  anyOf(...types: (Type<any> | any)[]) {\n    return this.manyOf(\"anyOf\", types);\n  }\n\n  schema(partial: Partial<JsonSchemaObject>) {\n    this.addAction(() => {\n      const schema = this.get(\"schema\") as JsonSchema;\n\n      schema!.assign(partial);\n    });\n\n    return this;\n  }\n\n  examples(examples: any) {\n    this.set(\"examples\", isString(examples) ? [examples] : examples);\n    return this;\n  }\n\n  title(title: string) {\n    return this.schema({title});\n  }\n\n  protected checkPrimitive(model: any) {\n    if (isPrimitiveOrPrimitiveClass(model)) {\n      throw new Error(\"Returns.Of cannot be used with the following primitive classes: String, Number, Boolean\");\n    }\n  }\n\n  protected checkCollection(model: any) {\n    if (isCollection(model)) {\n      throw new Error(\"Returns.Nested cannot be used with the following classes: Map, Set, Array, String, Number, Boolean\");\n    }\n  }\n\n  protected getContentType() {\n    const model = this.get(\"model\");\n    let contentType = this.get(\"contentType\");\n\n    if (model && !isPlainObject(model) && !isPrimitiveOrPrimitiveClass(model)) {\n      contentType = contentType || \"application/json\";\n    }\n\n    return contentType;\n  }\n\n  protected getStatus() {\n    return this.get(\"status\") || \"default\";\n  }\n\n  protected onInit(args: any[], decorator: any) {\n    const type = decoratorTypeOf(args);\n    switch (type) {\n      case DecoratorTypes.METHOD:\n        this.entity = JsonEntityStore.from(...args);\n        if (this.entity.operation) {\n          this.map();\n        }\n        break;\n      case DecoratorTypes.CLASS:\n        this.decoratorType = DecoratorTypes.CLASS;\n        decorateMethodsOf(args[0], decorator);\n        break;\n    }\n  }\n\n  protected map() {\n    const model = this.get(\"model\");\n    const {entity, decoratorType} = this;\n    const operation = this.entity.operation!;\n    const currentStatus = this.getStatus();\n    const response = operation.ensureResponseOf(currentStatus);\n    const contentType = this.getContentType();\n\n    let {description = response.get(\"description\")} = this.toObject();\n\n    if (description) {\n      description = decoratorType === DecoratorTypes.CLASS ? response.get(\"description\") || description : description;\n      response.description(description);\n    }\n\n    const headers = this.getMergedKey(\"headers\", response.get(\"headers\"));\n\n    if (headers) {\n      response.headers(headers);\n    }\n\n    this.mapMedia(response);\n\n    if (isSuccessStatus(this.get(\"status\")) || currentStatus === \"default\") {\n      if (model) {\n        entity.type = model;\n      }\n    }\n\n    // additional info for OS2\n    contentType && operation.addProduce(contentType);\n\n    // run additional actions\n    return this.runActions();\n  }\n\n  protected mapMedia(response: JsonResponse) {\n    const contentType = this.getContentType();\n    const model = this.get(\"model\");\n    const media = response.getMedia(contentType || \"*/*\");\n    const schema = media.get(\"schema\") || new JsonSchema({type: model});\n    const groups = this.get(\"groups\");\n    const allowedGroups = this.get(\"allowedGroups\");\n    const operation = this.entity.operation!;\n\n    if (model) {\n      if (isArray(model)) {\n        schema.oneOf(model.map((type) => ({type})));\n      } else {\n        schema.type(model);\n      }\n    }\n\n    this.set(\"schema\", schema);\n\n    media.schema(schema);\n\n    media.groups = groups;\n\n    if (allowedGroups) {\n      media.allowedGroups = allowedGroups;\n\n      const jsonParameter = new JsonParameter();\n      jsonParameter.in(\"query\").name(\"includes\");\n      jsonParameter.schema(\n        JsonSchema.from({\n          type: \"array\",\n          items: {\n            type: \"string\",\n            enum: [...allowedGroups]\n          }\n        })\n      );\n\n      operation.addParameter(-1, jsonParameter);\n    }\n\n    const examples = this.get(\"examples\");\n\n    if (examples) {\n      media.examples(examples);\n    }\n\n    return media;\n  }\n\n  private manyOf(kind: string, types: any[]) {\n    const model = this.get(\"model\");\n\n    this.addAction(() => {\n      const schema = this.get(\"schema\") as JsonSchema;\n\n      if (isCollection(model)) {\n        schema.type(model || Object);\n\n        schema.itemSchema().set(kind, types);\n      } else {\n        schema.set(kind, types);\n      }\n    });\n\n    return this;\n  }\n}\n\n/**\n * Add responses documentation for a specific status code.\n *\n * ## Usage\n *\n * Ts.ED v5/v6 API introducing the chaining decorator concept. Now a decorator like Returns can be used with another decorators like Description.\n *\n * ::: warning\n * v5 has a basic support of the chaining decorator to facilitate the migration to v6!\n * :::\n *\n * ```typescript\n * import {Returns} from \"@tsed/schema\";\n *\n * @Controller(\"/\")\n * class MyController {\n *   @Returns(404, String).Description(\"Not Found\")\n *   @Returns(200, Model).Description(\"Success\")\n *   async myMethod(): Promise<Model> {}\n * }\n * ```\n *\n * ::: tip\n * TypeScript and your IDE will discover automatically the chained decorators. But for more details you can look on @@ReturnsChainedDecorators@@ interface, to know\n * what chained decorators are available under Returns decorator.\n * :::\n *\n * This example will produce this documentation in swagger:\n *\n * ```json\n * {\n *   \"responses\": {\n *     \"404\": {\n *       \"description\": \"Description\",\n *       \"schema\": {\"type\": \"string\"}\n *     },\n *     \"2OO\": {\n *       \"description\": \"Description\",\n *       \"schema\": {\"$ref\": \"...\"}\n *     }\n *   }\n * }\n * ```\n *\n * ## Declaring an Array\n *\n * Use chained decorators to declare an array with model as following:\n *\n * ```typescript\n * import {Returns} from \"@tsed/schema\";\n *\n * @Controller(\"/models\")\n * class ModelCtrl {\n *   @Get(\"/\")\n *   @Returns(200, Array).Of(Model).Description(\"Success\")\n *   async myMethod(): Promise<Model>  {\n *   }\n * }\n * ```\n *\n * Deprecated version:\n *\n * ```typescript\n * import {ReturnsArray} from \"@tsed/common\";\n * import {Returns} from \"@tsed/schema\";\n *\n * @Controller(\"/\")\n * class MyController {\n *   @ReturnsArray(200, Model) // deprecated\n *   async myMethod(): Promise<Model> {}\n * }\n * ```\n *\n * ### Declaring a generic model <Badge text=\"6+\"/>\n *\n * Sometime, it might be useful to use generic models. TypeScript doesn't store the generic type in the metadata. This is why we need to\n * declare explicitly the generic models with the decorators.\n *\n * One of the generic's usage, can be a paginated list. With Returns decorator it's now possible to declare generic type and generate the appropriate OpenSpec documentation.\n *\n * Starting with the pagination model, by using @@Generics@@ and @@CollectionOf@@:\n *\n * ```typescript\n * @Generics(\"T\")\n * class Pagination<T> {\n *  @CollectionOf(\"T\")\n *  data: T[];\n *\n *  @Property()\n *  totalCount: number;\n * }\n * ```\n *\n * Now, we need a model to be used with the generic Pagination model:\n *\n * ```typescript\n * class Product {\n *  @Property()\n *  id: string;\n *\n *  @Property()\n *  title: string;\n * }\n * ```\n *\n * Finally, we can use our models on a method as following:\n *\n * ```typescript\n * class Controller {\n *   @OperationPath(\"POST\", \"/\")\n *   @Returns(200, Pagination).Of(Product).Description(\"description\")\n *   async method(): Promise<Pagination<Product> | null> {\n *     return null;\n *   }\n * }\n * ```\n *\n * ### Declaring a nested generics models <Badge text=\"6+\"/>\n *\n * It's also possible to declare a nested generics models in order to have this type `Pagination<Submission<Product>>`:\n *\n * ```typescript\n * import {Generics, Property, Returns} from \"@tsed/schema\";\n * import {Post} from \"@tsed/common\";\n *\n * class Controller {\n *   @Post(\"/\")\n *   @Returns(200, Pagination).Of(Submission).Nested(Product).Description(\"description\")\n *   async method(): Promise<Pagination<Submission<Product>> | null> {\n *     return null;\n *   }\n * }\n * ```\n *\n * And here is the Submission model:\n *\n * ```typescript\n * import {Generics, Property} from \"@tsed/schema\";\n *\n * @Generics(\"T\")\n * class Submission<T> {\n *   @Property()\n *   _id: string;\n *   @Property(\"T\")\n *   data: T;\n * }\n * ```\n *\n * @param status\n * @param model\n * @decorator\n * @swagger\n * @schema\n * @response\n * @operation\n */\nexport function Returns(status?: string | number, model?: Type<any> | Type<any>[]): ReturnsChainedDecorators;\nexport function Returns(status?: string | number, model?: Type<any> | Type<any>[] | any): ReturnsChainedDecorators {\n  const context = new ReturnDecoratorContext({\n    status,\n    model\n  });\n\n  return context.build();\n}\n"]}