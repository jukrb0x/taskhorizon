{"version":3,"file":"genericsMapper.js","sourceRoot":"","sources":["../../../src/components/genericsMapper.ts"],"names":[],"mappings":";;;AAAA,qCAAqD;AACrD,+DAA0D;AAC1D,uFAA6F;AAC7F,gDAA+D;AAC/D,sDAAiD;AAEjD;;GAEG;AACH,SAAgB,cAAc,CAAC,GAAQ,EAAE,OAAwB;IAC/D,MAAM,EAAC,QAAQ,EAAC,GAAG,OAAO,CAAC;IAE3B,IAAI,QAAQ,IAAI,GAAG,CAAC,IAAI,EAAE;QACxB,IAAI,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;YAC1B,IAAI,IAAI,GAAG,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YAElC,IAAI,IAAA,uBAAgB,EAAC,IAAI,CAAC,EAAE;gBAC1B,OAAO;oBACL,IAAI,EAAE,IAAA,yBAAW,EAAC,IAAI,CAAC;iBACxB,CAAC;aACH;YAED,IAAI,IAAI,KAAK,IAAI,EAAE;gBACjB,OAAO;oBACL,IAAI,EAAE,QAAQ;oBACd,MAAM,EAAE,WAAW;iBACpB,CAAC;aACH;YAED,IAAI,IAAI,CAAC,MAAM,EAAE;gBACf,OAAO,IAAI,CAAC,MAAM,CAAC;oBACjB,GAAG,OAAO;oBACV,QAAQ,EAAE,SAAS;iBACpB,CAAC,CAAC;aACJ;YAED,IAAI,IAAI,KAAK,MAAM,EAAE;gBACnB,OAAO;oBACL,IAAI,EAAE,QAAQ;iBACf,CAAC;aACH;YAED,IAAI,IAAA,cAAO,EAAC,IAAI,CAAC,EAAE;gBACjB,MAAM,KAAK,GAAG;oBACZ,KAAK,EAAE,IAAI;iBACZ,CAAC;gBAEF,IAAI,OAAO,CAAC,cAAc,CAAC,MAAM,KAAK,CAAC,EAAE;oBACvC,OAAO,IAAA,sCAAU,EAAC,OAAO,EAAE,KAAY,EAAE;wBACvC,GAAG,OAAO;wBACV,QAAQ,EAAE,SAAS;qBACpB,CAAC,CAAC;iBACJ;gBAED,MAAM,KAAK,GAAG,iCAAe,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;gBAEhD,OAAO,IAAA,sCAAU,EAAC,QAAQ,EAAE,KAAK,CAAC,MAAM,EAAE;oBACxC,GAAG,OAAO;oBACV,GAAG,IAAA,sBAAW,EAAC,OAAO,CAAC;oBACvB,IAAI,EAAE,KAAK;iBACZ,CAAC,CAAC;aACJ;SACF;KACF;IAED,OAAO,GAAG,CAAC;AACb,CAAC;AAzDD,wCAyDC;AAED,IAAA,oDAAwB,EAAC,UAAU,EAAE,cAAc,CAAC,CAAC","sourcesContent":["import {isClass, isPrimitiveClass} from \"@tsed/core\";\nimport {JsonEntityStore} from \"../domain/JsonEntityStore\";\nimport {execMapper, registerJsonSchemaMapper} from \"../registries/JsonSchemaMapperContainer\";\nimport {GenericsContext, popGenerics} from \"../utils/generics\";\nimport {getJsonType} from \"../utils/getJsonType\";\n\n/**\n * @ignore\n */\nexport function genericsMapper(obj: any, options: GenericsContext) {\n  const {generics} = options;\n\n  if (generics && obj.$ref) {\n    if (generics.has(obj.$ref)) {\n      let type = generics.get(obj.$ref);\n\n      if (isPrimitiveClass(type)) {\n        return {\n          type: getJsonType(type)\n        };\n      }\n\n      if (type === Date) {\n        return {\n          type: \"string\",\n          format: \"date-time\"\n        };\n      }\n\n      if (type.toJSON) {\n        return type.toJSON({\n          ...options,\n          generics: undefined\n        });\n      }\n\n      if (type === Object) {\n        return {\n          type: \"object\"\n        };\n      }\n\n      if (isClass(type)) {\n        const model = {\n          class: type\n        };\n\n        if (options.nestedGenerics.length === 0) {\n          return execMapper(\"class\", model as any, {\n            ...options,\n            generics: undefined\n          });\n        }\n\n        const store = JsonEntityStore.from(model.class);\n\n        return execMapper(\"schema\", store.schema, {\n          ...options,\n          ...popGenerics(options),\n          root: false\n        });\n      }\n    }\n  }\n\n  return obj;\n}\n\nregisterJsonSchemaMapper(\"generics\", genericsMapper);\n"]}