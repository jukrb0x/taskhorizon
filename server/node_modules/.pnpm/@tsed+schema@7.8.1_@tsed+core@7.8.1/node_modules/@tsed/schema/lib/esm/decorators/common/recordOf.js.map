{"version":3,"file":"recordOf.js","sourceRoot":"","sources":["../../../../src/decorators/common/recordOf.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,MAAM,EAAC,MAAM,UAAU,CAAC;AAEhC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA4CG;AACH,MAAM,UAAU,QAAQ,CAAC,KAAU,EAAE,GAAG,IAAc;IACpD,OAAO,MAAM,CAAC;QACZ,UAAU,EAAE;YACV,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,GAAG,EAAE,EAAE;gBAC9B,OAAO;oBACL,GAAG,OAAO;oBACV,CAAC,GAAG,CAAC,EAAE,KAAK;iBACb,CAAC;YACJ,CAAC,EAAE,EAAE,CAAC;SACP;KACF,CAAC,CAAC;AACL,CAAC","sourcesContent":["import {Schema} from \"./schema\";\n\n/**\n * Constructs a json schema object type whose property keys are keys and whose property values are type.\n *\n * ## Example\n *\n * ```typescript\n * type keys = 'one' | 'two';\n *\n * class Part {\n *   prop: string;\n * }\n *\n * type Parts = Record<keys, Part>;\n *\n * class Test {\n *   @RecordOf(Part, 'one', 'two')\n *   parts: Parts;\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *     \"type\": \"object\",\n *     \"properties\": {\n *         \"one\": {\n *             \"$ref\": \"#/components/schemas/Part\"\n *         },\n *         \"two\": {\n *             \"$ref\": \"#/components/schemas/Part\"\n *         },\n *     },\n * }\n * ```\n *\n * @param model\n * @param keys\n * @decorator\n * @validation\n * @swagger\n * @schema\n * @classDecorator\n * @input\n */\nexport function RecordOf(model: any, ...keys: string[]) {\n  return Schema({\n    properties: {\n      ...keys.reduce((initial, key) => {\n        return {\n          ...initial,\n          [key]: model\n        };\n      }, {})\n    }\n  });\n}\n"]}