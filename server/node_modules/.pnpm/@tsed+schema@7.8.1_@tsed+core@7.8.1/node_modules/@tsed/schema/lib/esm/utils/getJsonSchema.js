import "../components/anyMapper.js";
import "../components/classMapper.js";
import "../components/genericsMapper.js";
import "../components/inheritedClassMapper.js";
import "../components/itemMapper.js";
import "../components/lazyRefMapper.js";
import "../components/mapMapper.js";
import "../components/objectMapper.js";
import "../components/ofMapper.js";
import "../components/propertiesMapper.js";
import "../components/schemaMapper.js";
import { SpecTypes } from "../domain/SpecTypes.js";
import { execMapper } from "../registries/JsonSchemaMapperContainer.js";
import { getJsonEntityStore } from "./getJsonEntityStore.js";
/**
 * @ignore
 */
const CACHE_KEY = "$cache:schemes";
/**
 * @ignore
 */
function getKey(options) {
    return JSON.stringify(options);
}
/**
 * @ignore
 */
function get(entity, options) {
    const cache = entity.store.get(CACHE_KEY) || new Map();
    const key = getKey(options);
    if (!cache.has(key)) {
        const schema = execMapper("schema", entity.schema, options);
        if (Object.keys(options.schemas).length) {
            schema.definitions = options.schemas;
        }
        cache.set(key, schema);
    }
    entity.store.set(CACHE_KEY, cache);
    return cache.get(key);
}
export function getJsonSchema(model, options = {}) {
    const entity = getJsonEntityStore(model);
    options = {
        endpoint: true,
        groups: [],
        ...options,
        specType: options.specType || SpecTypes.JSON,
        schemas: {}
    };
    if (entity.decoratorType === "parameter") {
        options = {
            ...options,
            genericTypes: entity.nestedGenerics[0],
            nestedGenerics: entity.nestedGenerics,
            groups: entity.parameter?.groups
        };
    }
    return get(entity, options);
}
//# sourceMappingURL=getJsonSchema.js.map