{"version":3,"file":"getPropertiesStores.js","sourceRoot":"","sources":["../../../src/utils/getPropertiesStores.ts"],"names":[],"mappings":"AAGA,OAAO,EAAC,WAAW,EAAC,MAAM,sBAAsB,CAAC;AACjD,OAAO,EAAC,kBAAkB,EAAC,MAAM,sBAAsB,CAAC;AACxD,OAAO,EAAC,kBAAkB,EAAC,MAAM,sBAAsB,CAAC;AAExD;;;;GAIG;AACH,MAAM,UAAU,mBAAmB,CACjC,MAAuB;IAEvB,MAAM,KAAK,GAAmB,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;IAEnF,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE;QACtB,MAAM,MAAM,GAAG,kBAAkB,CAAC,KAAK,CAAC,CAAC;QACzC,KAAK,CAAC,WAAW,GAAG,IAAI,GAAG,EAAE,CAAC;QAE9B,MAAM,CAAC,OAAO,CAAC,CAAC,YAAY,EAAE,EAAE;YAC9B,YAAY,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,SAAS,EAAE,EAAE;gBAC1C,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,GAAG,CAAC,SAAS,CAAC,WAAW,CAAC,EAAE;oBACjD,KAAK,CAAC,WAAW,CAAC,GAAG,CAAC,SAAS,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;iBACzD;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;KACJ;IAED,OAAO,KAAK,CAAC,WAAW,CAAC;AAC3B,CAAC;AAYD;;GAEG;AACH,MAAM,UAAU,aAAa,CAC3B,MAAuB,EACvB,UAAgC,EAAE;IAElC,MAAM,MAAM,GAAG,mBAAmB,CAAI,MAAM,CAAC,CAAC;IAC9C,MAAM,GAAG,GAAqC,IAAI,GAAG,EAAE,CAAC;IAExD,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE;QAC5B,IAAI,CAAC,OAAO,CAAC,gBAAgB,EAAE;YAC7B,IAAI,WAAW,CAAC,KAAK,CAAC,UAAU,EAAE,OAAO,CAAC,EAAE;gBAC1C,OAAO;aACR;SACF;QAED,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;IACtB,CAAC,CAAC,CAAC;IAEH,OAAO,GAAG,CAAC;AACb,CAAC","sourcesContent":["import {Type} from \"@tsed/core\";\nimport type {JsonClassStore} from \"../domain/JsonClassStore\";\nimport type {JsonPropertyStore} from \"../domain/JsonPropertyStore\";\nimport {alterIgnore} from \"../hooks/alterIgnore\";\nimport {getInheritedStores} from \"./getInheritedStores\";\nimport {getJsonEntityStore} from \"./getJsonEntityStore\";\n\n/**\n * Return the list of properties including properties from inherited classes\n * @param target\n * @ignore\n */\nexport function getPropertiesStores<T extends JsonPropertyStore = JsonPropertyStore>(\n  target: Type<any> | any\n): Map<string | symbol | number, T> {\n  const store: JsonClassStore = target.isStore ? target : getJsonEntityStore(target);\n\n  if (!store.$properties) {\n    const stores = getInheritedStores(store);\n    store.$properties = new Map();\n\n    stores.forEach((currentStore) => {\n      currentStore.children.forEach((propStore) => {\n        if (!store.$properties.has(propStore.propertyKey)) {\n          store.$properties.set(propStore.propertyKey, propStore);\n        }\n      });\n    });\n  }\n\n  return store.$properties;\n}\n\n/**\n * @ignore\n */\nexport interface GetPropertiesOptions {\n  withIgnoredProps?: boolean;\n  groups?: string[] | false;\n\n  [type: string]: any;\n}\n\n/**\n * @ignore\n */\nexport function getProperties<T extends JsonPropertyStore = JsonPropertyStore>(\n  target: Type<any> | any,\n  options: GetPropertiesOptions = {}\n) {\n  const stores = getPropertiesStores<T>(target);\n  const map: Map<string | symbol | number, T> = new Map();\n\n  stores.forEach((store, key) => {\n    if (!options.withIgnoredProps) {\n      if (alterIgnore(store.itemSchema, options)) {\n        return;\n      }\n    }\n\n    map.set(key, store);\n  });\n\n  return map;\n}\n"]}