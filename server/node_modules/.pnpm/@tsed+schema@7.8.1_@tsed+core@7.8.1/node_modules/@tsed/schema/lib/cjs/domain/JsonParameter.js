"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.JsonParameter = void 0;
const core_1 = require("@tsed/core");
const JsonSchemaMapperContainer_1 = require("../registries/JsonSchemaMapperContainer");
const generics_1 = require("../utils/generics");
const JsonMap_1 = require("./JsonMap");
const JsonParameterTypes_1 = require("./JsonParameterTypes");
const ref_1 = require("../utils/ref");
class JsonParameter extends JsonMap_1.JsonMap {
    nestedGenerics = [];
    groups;
    $schema;
    expression;
    getName() {
        const name = this.get("name");
        if (this.get("in") === "files") {
            return name.split(".")[0];
        }
        return name;
    }
    name(name) {
        this.set("name", name);
        return this;
    }
    examples(examples) {
        super.set("examples", examples);
        return this;
    }
    description(description) {
        this.set("description", description);
        return this;
    }
    in(inType, expression = "") {
        this.set("in", (0, JsonParameterTypes_1.formatParameterType)(inType));
        this.expression = expression;
        return this;
    }
    required(required) {
        this.set("required", required);
        return this;
    }
    schema(schema) {
        this.$schema = schema;
        return this;
    }
    toJSON(options = {}) {
        if (!(0, JsonParameterTypes_1.isParameterType)(this.get("in"))) {
            return null;
        }
        const schemasContainer = (0, core_1.toMap)(options.schemas || {});
        return this.build({ ...options, groups: this.groups }, schemasContainer);
    }
    build(options, schemasContainer) {
        const { type, schema, ...parameter } = super.toJSON(options);
        const jsonSchema = (0, JsonSchemaMapperContainer_1.execMapper)("item", this.$schema, {
            ...options,
            ...(0, generics_1.popGenerics)(this)
        });
        parameter.required = parameter.required || this.get("in") === JsonParameterTypes_1.JsonParameterTypes.PATH;
        switch (this.get("in")) {
            case JsonParameterTypes_1.JsonParameterTypes.FILES:
                return this.getFileSchema(jsonSchema, parameter);
            case JsonParameterTypes_1.JsonParameterTypes.QUERY:
                if (jsonSchema.$ref) {
                    if (!parameter.name) {
                        return this.refToParameters(parameter, options, schemasContainer);
                    }
                    parameter.style = "deepObject";
                }
                break;
        }
        parameter.schema = jsonSchema;
        return parameter;
    }
    getFileSchema(jsonSchema, parameter) {
        const schema = {
            type: "string",
            format: "binary",
            oneOf: undefined
        };
        if (jsonSchema.type === "array") {
            jsonSchema.items = (0, core_1.cleanObject)({
                ...jsonSchema.items,
                ...schema
            });
            parameter.schema = jsonSchema;
        }
        else {
            parameter.schema = (0, core_1.cleanObject)({
                ...jsonSchema,
                ...schema
            });
        }
        return parameter;
    }
    refToParameters(parameter, options, schemasContainer) {
        const name = (0, ref_1.createRefName)(this.$schema.getName(), options);
        const schema = options.schemas[name];
        if (options.schemas[name] && !schemasContainer.has(name)) {
            delete options.schemas[this.$schema.getName()];
        }
        return Object.entries(schema.properties || {}).reduce((params, [key, { description, ...prop }]) => {
            return [
                ...params,
                (0, core_1.cleanObject)({
                    ...parameter,
                    name: key,
                    required: (schema.required || []).includes(key),
                    description,
                    schema: prop,
                    style: prop.$ref ? "deepObject" : undefined
                })
            ];
        }, []);
    }
}
exports.JsonParameter = JsonParameter;
//# sourceMappingURL=JsonParameter.js.map