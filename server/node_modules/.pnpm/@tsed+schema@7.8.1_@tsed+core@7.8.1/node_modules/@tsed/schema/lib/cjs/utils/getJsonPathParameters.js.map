{"version":3,"file":"getJsonPathParameters.js","sourceRoot":"","sources":["../../../src/utils/getJsonPathParameters.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @ignore\n */\nfunction getVariable(subpath: string) {\n  const [prefix, right] = subpath.split(\"=\");\n  const splited = (right || prefix).split(\".\");\n  const name = splited.splice(0, 1)[0];\n\n  return {\n    prefix: right && prefix ? `${prefix}=` : \"\",\n    name,\n    postfix: splited.length ? `.${splited.join(\".\")}` : \"\"\n  };\n}\n\nfunction parseUrl(key: string) {\n  let inCapture = 0;\n\n  return key\n    .split(\"\")\n    .filter((c) => {\n      if (c === \"(\") {\n        inCapture++;\n      }\n\n      const result = inCapture === 0;\n\n      if (c === \")\") {\n        inCapture--;\n      }\n\n      return result;\n    })\n    .join(\"\")\n    .split(\"/\")\n    .filter((o) => !!o);\n}\n\n/**\n * @ignore\n */\nexport function getJsonPathParameters(base: string, path: string | RegExp | (string | RegExp)[] = \"\"): {path: string; parameters: any[]}[] {\n  if (path instanceof RegExp) {\n    path = path.toString().replace(/^\\//g, \"\").replace(/\\/$/g, \"\").replace(/\\\\/g, \"\");\n  }\n\n  const params: any[] = [];\n  const paths: any[] = [];\n  let isOptional = false;\n  let current = \"\";\n\n  parseUrl(`${base}${path}`).map((key) => {\n    const subpath = key.replace(\":\", \"\").replace(\"?\", \"\");\n\n    if (key.includes(\":\")) {\n      const optional = key.includes(\"?\");\n\n      // Append previous config\n      if (optional && !isOptional) {\n        isOptional = true;\n\n        paths.push({\n          path: current,\n          parameters: [].concat(params as any)\n        });\n      }\n\n      const {prefix, name, postfix} = getVariable(subpath);\n      current += `/${prefix}{${name}}${postfix}`;\n\n      params.push({\n        in: \"path\",\n        name,\n        type: \"string\",\n        required: true\n      });\n\n      if (optional && isOptional) {\n        paths.push({\n          path: current,\n          parameters: [].concat(params as any)\n        });\n      }\n    } else {\n      current += `/${key}`;\n    }\n  });\n\n  return paths.length\n    ? paths\n    : [\n        {\n          path: current,\n          parameters: [].concat(params as any)\n        }\n      ];\n}\n"]}