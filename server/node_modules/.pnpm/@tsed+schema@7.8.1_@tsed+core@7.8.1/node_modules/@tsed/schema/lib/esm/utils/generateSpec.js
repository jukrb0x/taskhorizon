import fs from "fs-extra";
import { getValue } from "@tsed/core";
import { mapOpenSpec } from "./mapOpenSpec.js";
import { getSpec } from "./getSpec.js";
import { getSpecTypeFromSpec } from "./getSpecType.js";
import { mergeSpec } from "./mergeSpec.js";
import { SpecTypes } from "../domain/SpecTypes.js";
import { transformToOS2 } from "./transformToOS2.js";
async function readSpec(path) {
    if (fs.existsSync(path)) {
        try {
            return await fs.readJSON(path, { encoding: "utf8" });
        }
        catch (e) { }
    }
    /* istanbul ignore next */
    return {};
}
/**
 * Generate OpenAPI spec from multiple sources (models, files, conf)
 * @param tokens
 * @param options
 */
export async function generateSpec({ tokens, ...options }) {
    const { version = "1.0.0", acceptMimes, specPath, specVersion } = options;
    const fileSpec = specPath ? await readSpec(specPath) : {};
    const defaultSpec = mapOpenSpec(getValue(options, "spec", {}), {
        fileSpec,
        version,
        specVersion,
        acceptMimes
    });
    const specType = getSpecTypeFromSpec(defaultSpec);
    let controllersSpec = getSpec(tokens, options);
    const spec = mergeSpec(defaultSpec, controllersSpec);
    if (specType === SpecTypes.SWAGGER) {
        return transformToOS2(spec);
    }
    return spec;
}
//# sourceMappingURL=generateSpec.js.map