{"version":3,"file":"PerfLogger.js","sourceRoot":"","sources":["../../../src/domain/PerfLogger.ts"],"names":[],"mappings":"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","sourcesContent":["import {classOf, descriptorOf, methodsOf, nameOf} from \"@tsed/core\";\nimport chalk from \"chalk\";\nimport {CallbackWrapper, Perf} from \"./Perf\";\n\nconst loggers = new Map();\n\nexport type LEVELS = Record<number, \"black\" | \"red\" | \"green\" | \"yellow\" | \"blue\" | \"magenta\" | \"cyan\" | \"white\" | \"gray\">;\n\n// istanbul ignore next\nexport class PerfLogger {\n  #perf = new Perf();\n  #enabled: boolean = false;\n\n  constructor(readonly label: string = \"perf\", readonly levels: LEVELS = {10: \"green\", 50: \"yellow\", 100: \"red\"}) {\n    this.wrap = this.wrap.bind(this);\n    this.log = this.log.bind(this);\n    this.start = this.start.bind(this);\n    this.end = this.end.bind(this);\n    this.bind = this.bind.bind(this);\n  }\n\n  static get(label: string) {\n    if (loggers.get(label)) {\n      return loggers.get(label);\n    }\n\n    const logger = loggers.get(label) || new PerfLogger(label);\n\n    loggers.set(label, logger);\n\n    return logger;\n  }\n\n  start() {\n    this.#enabled = true;\n    this.#perf.start();\n\n    return this;\n  }\n\n  log(...args: any[]) {\n    if (this.#enabled) {\n      console.debug(this.formatLog([\"LOG   -\", ...args], this.#perf.fromLatest(), \"from latest: \"));\n    }\n\n    return this;\n  }\n\n  bind(instance: any) {\n    const methods = methodsOf(classOf(instance));\n    const {wrap, log} = this;\n\n    methods.forEach(({target, propertyKey}) => {\n      const descriptor = descriptorOf(target, propertyKey);\n      const name = nameOf(target);\n\n      if (descriptor.value) {\n        const fn = instance[propertyKey].bind(instance);\n        if (propertyKey === \"log\") {\n          instance[propertyKey] = (...args: any[]) => {\n            log(...args);\n            return fn(...args);\n          };\n        } else {\n          instance[propertyKey] = (...args: any[]) => {\n            return wrap(() => fn(...args), `${name}.${propertyKey}()`);\n          };\n        }\n      }\n    });\n\n    return instance;\n  }\n\n  wrap<T = any>(fn: CallbackWrapper<T>, name = nameOf(fn)): T {\n    if (!this.#enabled) {\n      return fn();\n    }\n\n    console.debug(this.formatLog([`START - ${name}`], this.#perf.fromLatest(), \"from latest: \"));\n\n    return this.#perf.run(fn, (time) => {\n      if (this.#enabled) {\n        console.debug(this.formatLog([`END   - ${name}`], time, \"method: \"));\n      }\n    });\n  }\n\n  end() {\n    if (this.#enabled) {\n      console.debug(this.formatLog([\"ending\"], this.#perf.end(), \"from start: \"));\n      this.#enabled = false;\n    }\n\n    return this;\n  }\n\n  private formatLog(log: any[], diff: number, wrap = \"\") {\n    const dataLog = log.join(\" \") + \"                                                                                    \";\n    const diffLabel = this.formatDiff(diff, wrap);\n    const fromStart = this.#perf.fromStart();\n    const globalDiff = (\"     \" + fromStart.toFixed(3) + \"ms\").slice(-10);\n\n    return `[${this.label}] ${globalDiff} - ${String(dataLog)}`.slice(0, 80) + ` ${diffLabel}`;\n  }\n\n  private formatDiff(diff: number, prefix = \"\") {\n    const label = `(${prefix}+${diff}ms)`;\n    const list = Object.entries(this.levels);\n\n    const [, color] = list.find(([level]) => diff <= +level) || list[list.length - 1];\n\n    return (chalk as any)[color](label);\n  }\n}\n"]}