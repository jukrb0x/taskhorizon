import { InjectorService, PlatformAdapter, PlatformBuilder, PlatformContext, PlatformMulter, PlatformMulterSettings, PlatformStaticsOptions } from "@tsed/common";
import { Type } from "@tsed/core";
import { PlatformHandlerMetadata, PlatformLayer } from "@tsed/platform-router";
import Express from "express";
import { PlatformExpressStaticsOptions } from "../interfaces/PlatformExpressStaticsOptions";
declare module "express" {
    interface Request {
        id: string;
        $ctx: PlatformContext;
    }
}
declare global {
    namespace TsED {
        interface Application extends Express.Application {
        }
        interface StaticsOptions extends PlatformExpressStaticsOptions {
        }
        interface Request extends Express.Request {
            id: string;
            $ctx: PlatformContext;
        }
    }
}
/**
 * @platform
 * @express
 */
export declare class PlatformExpress implements PlatformAdapter<Express.Application> {
    #private;
    protected injector: InjectorService;
    readonly providers: never[];
    constructor(injector: InjectorService);
    /**
     * Create new serverless application. In this mode, the component scan are disabled.
     * @param module
     * @param settings
     */
    static create(module: Type<any>, settings?: Partial<TsED.Configuration>): PlatformBuilder<Express.Application>;
    /**
     * Bootstrap a server application
     * @param module
     * @param settings
     */
    static bootstrap(module: Type<any>, settings?: Partial<TsED.Configuration>): Promise<PlatformBuilder<Express.Application>>;
    beforeLoadRoutes(): Promise<void>;
    afterLoadRoutes(): Promise<void>;
    mapLayers(layers: PlatformLayer[]): void;
    mapHandler(handler: Function, metadata: PlatformHandlerMetadata): Function;
    useContext(): this;
    app(): {
        app: any;
        callback: () => any;
    };
    multipart(options: PlatformMulterSettings): PlatformMulter;
    statics(endpoint: string, options: PlatformStaticsOptions): (request: any, response: any, next: any) => void;
    bodyParser(type: "json" | "text" | "urlencoded", additionalOptions?: any): any;
    private getPlatformApplication;
    private configureViewsEngine;
}
