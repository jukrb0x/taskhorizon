{"version":3,"file":"queryParams.js","sourceRoot":"","sources":["../../../src/decorators/queryParams.ts"],"names":[],"mappings":";;;AAEA,qDAAgD;AAChD,gEAA2D;AAC3D,yCAAoC;AA4CpC,SAAgB,WAAW,CAAC,GAAG,IAAW;IACxC,MAAM,EAAC,UAAU,EAAE,OAAO,EAAE,SAAS,GAAG,IAAI,EAAE,aAAa,GAAG,IAAI,EAAC,GAAG,IAAA,mCAAgB,EAAC,IAAI,CAAC,CAAC;IAE7F,OAAO,IAAA,mBAAQ,EAAC;QACd,SAAS,EAAE,uBAAU,CAAC,KAAK;QAC3B,UAAU;QACV,OAAO;QACP,SAAS;QACT,aAAa;KACd,CAAC,CAAC;AACL,CAAC;AAVD,kCAUC;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2BG;AACH,SAAgB,cAAc,CAAC,UAAkB;IAC/C,OAAO,WAAW,CAAC;QACjB,UAAU;QACV,aAAa,EAAE,KAAK;QACpB,aAAa,EAAE,KAAK;KACrB,CAAC,CAAC;AACL,CAAC;AAND,wCAMC","sourcesContent":["import {Type} from \"@tsed/core\";\nimport {ParamOptions} from \"../domain/ParamOptions\";\nimport {ParamTypes} from \"../domain/ParamTypes\";\nimport {mapParamsOptions} from \"../utils/mapParamsOptions\";\nimport {UseParam} from \"./useParam\";\n\n/**\n * QueryParams return the value from [request.query](http://expressjs.com/en/4x/api.html#req.query) object.\n *\n * #### Example\n *\n * ```typescript\n * @Controller('/')\n * class MyCtrl {\n *    @Get('/')\n *    get(@QueryParams() query: any) {\n *       console.log('Entire query', query);\n *    }\n *\n *    @Get('/')\n *    get(@QueryParams('id') id: string) {\n *       console.log('ID', id);\n *    }\n *\n *    @Get('/')\n *    get(@QueryParams('user') user: User) { // with deserialization\n *       console.log('user', user);\n *    }\n *\n *    @Get('/')\n *    get(@QueryParams('users', User) users: User[]) { // with deserialization\n *       console.log('users', users);\n *    }\n * }\n * ```\n * > For more information on deserialization see [converters](/docs/json-mapper.md) page.\n *\n * @param expression The path of the property to get.\n * @param useType The type of the class that to be used to deserialize the data.\n * @decorator\n * @operation\n * @input\n */\nexport function QueryParams(expression: string, useType: Type<any>): ParameterDecorator;\nexport function QueryParams(expression: string): ParameterDecorator;\nexport function QueryParams(useType: Type<any>): ParameterDecorator;\nexport function QueryParams(options: Partial<ParamOptions>): ParameterDecorator;\nexport function QueryParams(): ParameterDecorator;\nexport function QueryParams(...args: any[]): ParameterDecorator {\n  const {expression, useType, useMapper = true, useValidation = true} = mapParamsOptions(args);\n\n  return UseParam({\n    paramType: ParamTypes.QUERY,\n    expression,\n    useType,\n    useMapper,\n    useValidation\n  });\n}\n\n/**\n * RawQueryParams return the value from [request.query](http://expressjs.com/en/4x/api.html#req.query) object.\n *\n * Any validation and transformation are performed on the value. Use [pipes](/docs/pipes.html) to validate and/or transform the value.\n *\n * #### Example\n *\n * ```typescript\n * @Controller('/')\n * class MyCtrl {\n *    @Get('/')\n *    get(@RawPathParams() params: any) {\n *       console.log('Entire params', params);\n *    }\n *\n *    @Get('/')\n *    get(@RawPathParams('id') id: string) {\n *       console.log('ID', id);\n *    }\n * }\n * ```\n * > For more information on deserialization see [converters](/docs/json-mapper.md) page.\n *\n * @param expression The path of the property to get.\n * @decorator\n * @operation\n * @input\n */\nexport function RawQueryParams(expression: string) {\n  return QueryParams({\n    expression,\n    useConverters: false,\n    useValidation: false\n  });\n}\n"]}