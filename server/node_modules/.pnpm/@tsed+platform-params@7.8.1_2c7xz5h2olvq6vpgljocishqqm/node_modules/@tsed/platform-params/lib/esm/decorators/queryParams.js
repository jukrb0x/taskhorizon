import { ParamTypes } from "../domain/ParamTypes.js";
import { mapParamsOptions } from "../utils/mapParamsOptions.js";
import { UseParam } from "./useParam.js";
export function QueryParams(...args) {
    const { expression, useType, useMapper = true, useValidation = true } = mapParamsOptions(args);
    return UseParam({
        paramType: ParamTypes.QUERY,
        expression,
        useType,
        useMapper,
        useValidation
    });
}
/**
 * RawQueryParams return the value from [request.query](http://expressjs.com/en/4x/api.html#req.query) object.
 *
 * Any validation and transformation are performed on the value. Use [pipes](/docs/pipes.html) to validate and/or transform the value.
 *
 * #### Example
 *
 * ```typescript
 * @Controller('/')
 * class MyCtrl {
 *    @Get('/')
 *    get(@RawPathParams() params: any) {
 *       console.log('Entire params', params);
 *    }
 *
 *    @Get('/')
 *    get(@RawPathParams('id') id: string) {
 *       console.log('ID', id);
 *    }
 * }
 * ```
 * > For more information on deserialization see [converters](/docs/json-mapper.md) page.
 *
 * @param expression The path of the property to get.
 * @decorator
 * @operation
 * @input
 */
export function RawQueryParams(expression) {
    return QueryParams({
        expression,
        useConverters: false,
        useValidation: false
    });
}
//# sourceMappingURL=queryParams.js.map