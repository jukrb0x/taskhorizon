{"version":3,"file":"beforeDeserialize.js","sourceRoot":"","sources":["../../../src/decorators/beforeDeserialize.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,YAAY,EAAkB,MAAM,cAAc,CAAC;AAM3D;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2BG;AACH,MAAM,UAAU,iBAAiB,CAAC,EAA6B;IAC7D,OAAO,YAAY,CAAC,CAAC,UAAU,EAAE,EAAE;QACjC,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,mBAAmB,EAAE,EAAE,CAAC,CAAC;IACvD,CAAC,CAAC,CAAC;AACL,CAAC","sourcesContent":["import {JsonEntityFn, JsonHookContext} from \"@tsed/schema\";\n\nexport interface BeforeDeserializeCallback {\n  (value: any, ctx: JsonHookContext): any;\n}\n\n/**\n * Call the function before JsonMapper.\n *\n * ## Example\n *\n * ```typescript\n * @BeforeDeserialize((data: Record<string, unknown>) => { // Before deserialize get the data\n *    if (data.prop1 === 'VALUE' && data.prop2 !== 'VALUE2') {\n *      throw BadRequest('MyMessage'); // or throw a ValidationError\n *    } else {\n *      data.prop2 = 'VALUE2';\n *      return data;\n *    }\n * })\n * class Model {\n *    @Property()\n *    prop1: string;\n *    @Property()\n *    prop2: string;\n * }\n * ```\n *\n * @returns {Function}\n * @decorator\n * @schema\n * @property\n * @param cb\n */\nexport function BeforeDeserialize(cb: BeforeDeserializeCallback): ClassDecorator {\n  return JsonEntityFn((storedJson) => {\n    storedJson.schema.$hooks.on(\"beforeDeserialize\", cb);\n  });\n}\n"]}