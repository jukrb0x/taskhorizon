import { __decorate } from "tslib";
import { BadRequest } from "@tsed/exceptions";
import { JsonMapper } from "../decorators/jsonMapper.js";
function isNullish(data) {
    return [null, "null"].includes(data);
}
/**
 * Mapper for the `String`, `Number`, `BigInt` and `Boolean` types.
 * @jsonmapper
 * @component
 */
let PrimitiveMapper = class PrimitiveMapper {
    deserialize(data, ctx) {
        switch (ctx.type) {
            case String:
                return data === null ? null : "" + data;
            case BigInt:
                if (isNullish(data))
                    return null;
                return BigInt(data);
            case Number:
                if (isNullish(data))
                    return null;
                const n = +data;
                if (isNaN(n)) {
                    throw new BadRequest("Cast error. Expression value is not a number.");
                }
                return n;
            case Boolean:
                if (["true", "1", true].includes(data))
                    return true;
                if (["false", "0", false].includes(data))
                    return false;
                if (isNullish(data))
                    return null;
                if (data === undefined)
                    return undefined;
                return !!data;
        }
    }
    serialize(object) {
        return object;
    }
};
PrimitiveMapper = __decorate([
    JsonMapper(String, Number, Boolean, BigInt)
], PrimitiveMapper);
export { PrimitiveMapper };
//# sourceMappingURL=PrimitiveMapper.js.map