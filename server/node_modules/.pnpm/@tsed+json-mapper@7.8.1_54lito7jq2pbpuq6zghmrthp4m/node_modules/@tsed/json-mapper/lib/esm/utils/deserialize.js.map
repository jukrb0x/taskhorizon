{"version":3,"file":"deserialize.js","sourceRoot":"","sources":["../../../src/utils/deserialize.ts"],"names":[],"mappings":"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","sourcesContent":["import {getValue, isArray, isBoolean, isClass, isEmpty, isNil, MetadataTypes, nameOf, objectKeys, Type} from \"@tsed/core\";\nimport {\n  alterIgnore,\n  Discriminator,\n  getProperties,\n  JsonEntityStore,\n  JsonHookContext,\n  JsonParameterStore,\n  JsonPropertyStore,\n  JsonSchema\n} from \"@tsed/schema\";\nimport \"../components/ArrayMapper\";\nimport \"../components/DateMapper\";\nimport \"../components/MapMapper\";\nimport \"../components/PrimitiveMapper\";\nimport \"../components/SetMapper\";\nimport \"../components/SymbolMapper\";\nimport {JsonMapperContext} from \"../domain/JsonMapperContext\";\nimport {JsonMapperSettings} from \"../domain/JsonMapperSettings\";\nimport {getJsonMapperTypes} from \"../domain/JsonMapperTypesContainer\";\nimport {alterAfterDeserialize} from \"../hooks/alterAfterDeserialize\";\nimport {alterBeforeDeserialize} from \"../hooks/alterBeforeDeserialize\";\nimport {JsonMapperMethods} from \"../interfaces/JsonMapperMethods\";\n\nexport interface JsonDeserializerOptions<T = any, C = any> extends MetadataTypes<T, C> {\n  /**\n   * Types used to map complex types (Symbol, Array, Set, Map)\n   */\n  types?: WeakMap<Type<any>, JsonMapperMethods>;\n  /**\n   * useAlias mapping\n   */\n  useAlias?: boolean;\n  /**\n   * Accept additionalProperties or ignore it\n   */\n  additionalProperties?: boolean;\n  /**\n   *\n   */\n  disableUnsecureConstructor?: boolean;\n  /**\n   * Use the store which have all metadata to deserialize correctly the model. This\n   * property is useful when you deal with metadata parameters.\n   */\n  store?: JsonEntityStore;\n  /**\n   *\n   */\n  groups?: string[] | false;\n\n  [key: string]: any;\n}\n\nfunction isDeserializable(obj: any, options: JsonDeserializerOptions) {\n  if ((!!options.collectionType && isNil(obj)) || obj === undefined) {\n    return false;\n  }\n\n  return !(isEmpty(options.type) || (options.type === Object && !options.collectionType));\n}\n\nfunction alterValue(schema: JsonSchema, value: any, options: JsonHookContext) {\n  return schema.$hooks.alter(\"onDeserialize\", value, [options]);\n}\n\nfunction transformCollection<T = any>(src: any, options: JsonDeserializerOptions<any, any>): T {\n  const {types, type = Object, collectionType} = options;\n\n  const context = new JsonMapperContext({\n    type,\n    collectionType,\n    options,\n    next: (data, {collectionType, ...options}) => deserialize(data, options)\n  });\n\n  return types?.get(options.collectionType)?.deserialize<T>(src, context);\n}\n\nfunction transformType<T = any>(src: any, options: JsonDeserializerOptions<any, any>): T {\n  const {types, type = Object} = options;\n\n  const context = new JsonMapperContext({\n    type,\n    options,\n    next: (data, {type, ...options}) => deserialize(data, options)\n  });\n\n  return types?.get(type)?.deserialize<T>(src, context);\n}\n\nfunction getAdditionalProperties(\n  nbProps: number,\n  store: JsonEntityStore,\n  options: JsonDeserializerOptions<any, any>\n): boolean | JsonSchema {\n  const additionalProperties = store.schema.get(\"additionalProperties\");\n\n  if (isBoolean(additionalProperties) || isClass(additionalProperties)) {\n    return additionalProperties;\n  }\n\n  return nbProps === 0 || !!options.additionalProperties;\n}\n\n/**\n * Transform given plain object to class.\n * @param src\n * @param options\n */\nexport function plainObjectToClass<T = any>(src: any, options: JsonDeserializerOptions): T {\n  if (isEmpty(src)) {\n    return src;\n  }\n\n  const {type, store = JsonEntityStore.from(type)} = options;\n\n  const propertiesMap = getProperties(store, {...options, withIgnoredProps: true});\n\n  let keys = new Set<any>(objectKeys(src));\n\n  const additionalProperties = getAdditionalProperties(propertiesMap.size, store, options);\n  src = alterBeforeDeserialize(src, store.schema, options);\n\n  const out: any = new type(options.disableUnsecureConstructor ? {} : src);\n\n  propertiesMap.forEach((propStore) => {\n    const key = options.useAlias\n      ? propStore.parent.schema.getAliasOf(propStore.propertyName) || propStore.propertyName\n      : propStore.propertyName;\n\n    keys.delete(key);\n\n    if (alterIgnore(propStore.schema, options)) {\n      return;\n    }\n\n    let value = alterValue(propStore.schema, src[key], {...options, self: src});\n\n    value =\n      value === src[key]\n        ? deserialize(value, {\n            ...options,\n            store: propStore,\n            self: src,\n            collectionType: propStore.collectionType\n          })\n        : value;\n\n    if (!propStore.isGetterOnly()) {\n      if (value !== undefined) {\n        out[propStore.propertyName] = value;\n      } else if (options.partial) {\n        delete out[propStore.propertyName];\n      }\n    }\n  });\n\n  if (additionalProperties) {\n    if (isBoolean(additionalProperties)) {\n      keys.forEach((key) => {\n        out[key] = src[key];\n      });\n    } else {\n      const type = additionalProperties.getComputedType();\n      keys.forEach((key) => {\n        out[key] = deserialize(src[key], {\n          ...options,\n          type\n        });\n      });\n    }\n  }\n\n  return alterAfterDeserialize(out, store.schema, options);\n}\n\nfunction mapPropStoreOptions(store: JsonPropertyStore, options: JsonDeserializerOptions) {\n  const itemOpts: JsonDeserializerOptions = {\n    ...options,\n    store: undefined,\n    type: store.computedType\n  };\n\n  if (store.schema.isDiscriminator) {\n    itemOpts.type = store.schema.discriminator();\n  }\n\n  if (store.schema.hasGenerics) {\n    itemOpts.nestedGenerics = store.schema.nestedGenerics;\n  } else if (store.schema.isGeneric && options.nestedGenerics) {\n    const [genericTypes = [], ...nestedGenerics] = options.nestedGenerics;\n    const genericLabels = store.parent.schema.genericLabels || [];\n\n    itemOpts.type = genericTypes[genericLabels.indexOf(store.schema.genericType)] || Object;\n\n    if (itemOpts.type instanceof JsonSchema) {\n      itemOpts.type = itemOpts.type.getTarget();\n    }\n\n    itemOpts.nestedGenerics = nestedGenerics;\n  }\n\n  return itemOpts;\n}\n\nfunction mapParamStoreOptions(store: JsonParameterStore, options: JsonDeserializerOptions) {\n  return {\n    ...options,\n    store: undefined,\n    type: store.itemSchema.isDiscriminator ? store.itemSchema.discriminator() : store.type,\n    collectionType: store.collectionType,\n    groups: store.parameter.groups,\n    genericTypes: store.nestedGenerics[0],\n    nestedGenerics: store.nestedGenerics\n  };\n}\n\nfunction buildOptions(options: JsonDeserializerOptions<any, any>): any {\n  if (options.store instanceof JsonPropertyStore) {\n    return buildOptions(mapPropStoreOptions(options.store, options));\n  }\n\n  if (options.store instanceof JsonParameterStore) {\n    return buildOptions(mapParamStoreOptions(options.store, options));\n  }\n\n  if (options.store instanceof JsonEntityStore) {\n    options.type = options.store.computedType;\n    options.collectionType = options.store.collectionType;\n    options.store = undefined;\n  } else if (isClass(options.type)) {\n    const store = JsonEntityStore.from(options.type);\n    if (store.schema.isDiscriminator) {\n      options.type = JsonEntityStore.from(options.type).schema.discriminator();\n    }\n  }\n\n  return {\n    groups: false,\n    useAlias: true,\n    ...options,\n    additionalProperties: getValue(options, \"additionalProperties\", JsonMapperSettings.additionalProperties),\n    disableUnsecureConstructor: getValue(options, \"disableUnsecureConstructor\", JsonMapperSettings.disableUnsecureConstructor),\n    partial: options.groups ? options.groups.includes(\"partial\") : false,\n    type: options.type ? options.type : undefined,\n    types: options.types ? options.types : getJsonMapperTypes()\n  };\n}\n\n/**\n * Transform given source to class base on the given `options.type`.\n *\n * @param src\n * @param options\n */\nexport function deserialize<T = any>(src: any, options: JsonDeserializerOptions = {}): T {\n  options = buildOptions(options);\n\n  if (!isDeserializable(src, options)) {\n    return src;\n  }\n\n  if (!options.collectionType && isArray(src)) {\n    options.collectionType = Array;\n  }\n\n  if (options.collectionType) {\n    if (!options.types?.has(options.collectionType)) {\n      throw new Error(`${nameOf(options.collectionType)} is not supported by JsonMapper.`);\n    }\n\n    return transformCollection(src, options);\n  }\n\n  if (options.types?.has(options.type)) {\n    return transformType(src, options);\n  }\n\n  if (options.type instanceof Discriminator) {\n    const discriminator = options.type;\n    const discriminatorValue = src[discriminator.propertyName];\n    const type = discriminator.getType(discriminatorValue);\n\n    return plainObjectToClass(src, {...options, type});\n  }\n\n  // class converter\n  return plainObjectToClass(src, options);\n}\n"]}