import { MetadataTypes, Type } from "@tsed/core";
import { JsonEntityStore } from "@tsed/schema";
import "../components/ArrayMapper";
import "../components/DateMapper";
import "../components/MapMapper";
import "../components/PrimitiveMapper";
import "../components/SetMapper";
import "../components/SymbolMapper";
import { JsonMapperMethods } from "../interfaces/JsonMapperMethods";
export interface JsonDeserializerOptions<T = any, C = any> extends MetadataTypes<T, C> {
    /**
     * Types used to map complex types (Symbol, Array, Set, Map)
     */
    types?: WeakMap<Type<any>, JsonMapperMethods>;
    /**
     * useAlias mapping
     */
    useAlias?: boolean;
    /**
     * Accept additionalProperties or ignore it
     */
    additionalProperties?: boolean;
    /**
     *
     */
    disableUnsecureConstructor?: boolean;
    /**
     * Use the store which have all metadata to deserialize correctly the model. This
     * property is useful when you deal with metadata parameters.
     */
    store?: JsonEntityStore;
    /**
     *
     */
    groups?: string[] | false;
    [key: string]: any;
}
/**
 * Transform given plain object to class.
 * @param src
 * @param options
 */
export declare function plainObjectToClass<T = any>(src: any, options: JsonDeserializerOptions): T;
/**
 * Transform given source to class base on the given `options.type`.
 *
 * @param src
 * @param options
 */
export declare function deserialize<T = any>(src: any, options?: JsonDeserializerOptions): T;
