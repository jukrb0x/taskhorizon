{"version":3,"file":"serialize.js","sourceRoot":"","sources":["../../../src/utils/serialize.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  classOf,\n  isArray,\n  isClassObject,\n  isCollection,\n  isDate,\n  isEmpty,\n  isFunction,\n  isNil,\n  MetadataTypes,\n  nameOf,\n  objectKeys,\n  Type\n} from \"@tsed/core\";\nimport {alterIgnore, getPropertiesStores, JsonEntityStore, JsonHookContext, JsonSchema} from \"@tsed/schema\";\nimport \"../components/ArrayMapper\";\nimport \"../components/DateMapper\";\nimport \"../components/MapMapper\";\nimport \"../components/PrimitiveMapper\";\nimport \"../components/SetMapper\";\nimport \"../components/SymbolMapper\";\nimport {JsonMapperContext} from \"../domain/JsonMapperContext\";\nimport {getJsonMapperTypes} from \"../domain/JsonMapperTypesContainer\";\nimport {JsonMapperMethods} from \"../interfaces/JsonMapperMethods\";\n\nexport interface JsonSerializerOptions<T = any, C = any> extends MetadataTypes<T, C> {\n  /**\n   * Types used to map complex types (Symbol, Array, Set, Map)\n   */\n  types?: Map<Type<any>, JsonMapperMethods>;\n  /**\n   * useAlias mapping\n   */\n  useAlias?: boolean;\n\n  [key: string]: any;\n}\n\nfunction alterValue(schema: JsonSchema, value: any, options: JsonHookContext) {\n  return schema.$hooks.alter(\"onSerialize\", value, [options]);\n}\n\nfunction getSchemaProperties(storedJson: JsonEntityStore, obj: any) {\n  const stores = Array.from(getPropertiesStores(storedJson).entries());\n\n  if (!stores.length) {\n    // fallback to auto discovering field from obj\n    objectKeys(obj).forEach((key) => {\n      const propStore = JsonEntityStore.from(storedJson.target, key);\n      stores.push([key, propStore]);\n    });\n  }\n\n  return stores;\n}\n\nfunction getObjectProperties(obj: any): [string, any][] {\n  return Object.entries(obj).filter(([, value]) => !isFunction(value));\n}\n\nfunction getType(propStore: JsonEntityStore, value: any) {\n  if (isNil(value) || propStore.type === Object || isCollection(propStore.type)) {\n    return undefined;\n  }\n\n  return propStore.type;\n}\n\nexport function classToPlainObject(obj: any, options: JsonSerializerOptions<any, any>) {\n  const {useAlias = true, type, ...props} = options;\n\n  const entity = JsonEntityStore.from(type || obj);\n\n  const additionalProperties = !!entity.schema.get(\"additionalProperties\");\n  const schemaProperties = getSchemaProperties(entity, obj);\n  const properties = new Set<string>();\n\n  const out: any = schemaProperties.reduce((newObj, [key, propStore]) => {\n    properties.add(key as string);\n\n    const schema = propStore.schema;\n\n    if (alterIgnore(schema, {useAlias, ...props, self: obj})) {\n      return newObj;\n    }\n\n    let value = alterValue(schema, obj[key], {useAlias, ...props, self: obj});\n\n    value = serialize(value, {\n      useAlias,\n      self: obj,\n      type: value === obj[key] ? getType(propStore, value) : undefined,\n      collectionType: propStore.collectionType,\n      ...props\n    });\n\n    if (value === undefined) {\n      return newObj;\n    }\n\n    key = useAlias ? propStore.parent.schema.getAliasOf(key) || key : key;\n\n    return {\n      ...newObj,\n      [key]: value\n    };\n  }, {});\n\n  if (entity.discriminatorAncestor) {\n    const discriminator = entity.discriminatorAncestor.schema.discriminator();\n\n    if (!out[discriminator.propertyName]) {\n      out[discriminator.propertyName] = discriminator.getDefaultValue(entity.target);\n    }\n  }\n\n  if (additionalProperties) {\n    objectKeys(obj).forEach((key: any) => {\n      if (!properties.has(key)) {\n        out[key] = obj[key];\n      }\n    });\n  }\n  return out;\n}\n\nfunction toObject(obj: any, options: JsonSerializerOptions): any {\n  return getObjectProperties(obj).reduce(\n    (newObj, [key, value]) => ({\n      ...newObj,\n      [key]: serialize(value, options)\n    }),\n    {}\n  );\n}\n\nfunction getBestType(type: Type<any>, obj: any) {\n  const dataType = classOf(obj);\n\n  if (dataType && !isClassObject(dataType)) {\n    return dataType;\n  }\n\n  return type || Object;\n}\n\nfunction hasJsonMethod(obj: any) {\n  return typeof obj.toJSON === \"function\";\n}\n\nfunction isMongooseObject(obj: any) {\n  return (hasJsonMethod(obj) && obj.$isMongooseModelPrototype) || obj._bsontype;\n}\n\nfunction isMomentObject(obj: any) {\n  return obj && obj?._isAMomentObject;\n}\n\nexport function serialize(obj: any, {type, collectionType, groups = false, ...options}: JsonSerializerOptions = {}): any {\n  if (isEmpty(obj)) {\n    return obj;\n  }\n\n  let currentType = type;\n\n  const types = options.types ? options.types : getJsonMapperTypes();\n  options.groups = groups;\n\n  // FIX custom serialization function from @tsed/mongoose and bson\n  if (isMongooseObject(obj)) {\n    return obj.toJSON(options);\n  }\n\n  if (hasJsonMethod(obj) && !isMomentObject(obj) && !isDate(obj)) {\n    return serialize(obj.toJSON(), {...options, type: classOf(obj)});\n  }\n\n  if (!isCollection(obj)) {\n    options.type = currentType = getBestType(currentType, obj);\n  } else if (!options.collectionType) {\n    currentType = classOf(obj);\n    options.type = type;\n    options.collectionType = currentType;\n  }\n\n  const context = new JsonMapperContext({\n    type: currentType,\n    options,\n    next: (data) =>\n      serialize(data, {\n        ...options,\n        collectionType: undefined,\n        type: options.type\n      })\n  });\n\n  const mapper = types.get(currentType) || types.get(nameOf(currentType));\n\n  if (mapper) {\n    const jsonMapper = mapper!;\n\n    return jsonMapper.serialize(obj, context);\n  } else if (obj?._isAMomentObject) {\n    return obj.toJSON();\n  }\n\n  if (isArray(obj)) {\n    // Serialize Array class like\n    return types.get(Array)?.serialize(obj, context);\n  }\n\n  return !isClassObject(currentType) ? classToPlainObject(obj, options) : toObject(obj, options);\n}\n"]}