import { MetadataTypes, Type } from "@tsed/core";
import "../components/ArrayMapper";
import "../components/DateMapper";
import "../components/MapMapper";
import "../components/PrimitiveMapper";
import "../components/SetMapper";
import "../components/SymbolMapper";
import { JsonMapperMethods } from "../interfaces/JsonMapperMethods";
export interface JsonSerializerOptions<T = any, C = any> extends MetadataTypes<T, C> {
    /**
     * Types used to map complex types (Symbol, Array, Set, Map)
     */
    types?: Map<Type<any>, JsonMapperMethods>;
    /**
     * useAlias mapping
     */
    useAlias?: boolean;
    [key: string]: any;
}
export declare function classToPlainObject(obj: any, options: JsonSerializerOptions<any, any>): any;
export declare function serialize(obj: any, { type, collectionType, groups, ...options }?: JsonSerializerOptions): any;
