{"version":3,"file":"PrimitiveMapper.js","sourceRoot":"","sources":["../../../src/components/PrimitiveMapper.ts"],"names":[],"mappings":";AAAA,OAAO,EAAC,UAAU,EAAC,MAAM,kBAAkB,CAAC;AAC5C,OAAO,EAAC,UAAU,EAAC,MAAM,0BAA0B,CAAC;AAGpD,SAAS,SAAS,CAAC,IAAS;IAC1B,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;AACvC,CAAC;AAED;;;;GAIG;AAEH,IAAa,eAAe,GAA5B,MAAa,eAAe;IAC1B,WAAW,CAAI,IAAS,EAAE,GAAkB;QAC1C,QAAQ,GAAG,CAAC,IAAI,EAAE;YAChB,KAAK,MAAM;gBACT,OAAO,IAAI,KAAK,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,GAAG,IAAI,CAAC;YAE1C,KAAK,MAAM;gBACT,IAAI,SAAS,CAAC,IAAI,CAAC;oBAAE,OAAO,IAAI,CAAC;gBAEjC,OAAO,MAAM,CAAC,IAAI,CAAC,CAAC;YAEtB,KAAK,MAAM;gBACT,IAAI,SAAS,CAAC,IAAI,CAAC;oBAAE,OAAO,IAAI,CAAC;gBAEjC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC;gBAEhB,IAAI,KAAK,CAAC,CAAC,CAAC,EAAE;oBACZ,MAAM,IAAI,UAAU,CAAC,+CAA+C,CAAC,CAAC;iBACvE;gBAED,OAAO,CAAC,CAAC;YAEX,KAAK,OAAO;gBACV,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC;oBAAE,OAAO,IAAI,CAAC;gBACpD,IAAI,CAAC,OAAO,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC;oBAAE,OAAO,KAAK,CAAC;gBACvD,IAAI,SAAS,CAAC,IAAI,CAAC;oBAAE,OAAO,IAAI,CAAC;gBACjC,IAAI,IAAI,KAAK,SAAS;oBAAE,OAAO,SAAS,CAAC;gBAEzC,OAAO,CAAC,CAAC,IAAI,CAAC;SACjB;IACH,CAAC;IAED,SAAS,CAAC,MAA0C;QAClD,OAAO,MAAM,CAAC;IAChB,CAAC;CACF,CAAA;AAnCY,eAAe;IAD3B,UAAU,CAAC,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,CAAC;GAC/B,eAAe,CAmC3B;SAnCY,eAAe","sourcesContent":["import {BadRequest} from \"@tsed/exceptions\";\nimport {JsonMapper} from \"../decorators/jsonMapper\";\nimport {JsonMapperCtx, JsonMapperMethods} from \"../interfaces/JsonMapperMethods\";\n\nfunction isNullish(data: any) {\n  return [null, \"null\"].includes(data);\n}\n\n/**\n * Mapper for the `String`, `Number`, `BigInt` and `Boolean` types.\n * @jsonmapper\n * @component\n */\n@JsonMapper(String, Number, Boolean, BigInt)\nexport class PrimitiveMapper implements JsonMapperMethods {\n  deserialize<T>(data: any, ctx: JsonMapperCtx): string | number | boolean | void | null | BigInt {\n    switch (ctx.type) {\n      case String:\n        return data === null ? null : \"\" + data;\n\n      case BigInt:\n        if (isNullish(data)) return null;\n\n        return BigInt(data);\n\n      case Number:\n        if (isNullish(data)) return null;\n\n        const n = +data;\n\n        if (isNaN(n)) {\n          throw new BadRequest(\"Cast error. Expression value is not a number.\");\n        }\n\n        return n;\n\n      case Boolean:\n        if ([\"true\", \"1\", true].includes(data)) return true;\n        if ([\"false\", \"0\", false].includes(data)) return false;\n        if (isNullish(data)) return null;\n        if (data === undefined) return undefined;\n\n        return !!data;\n    }\n  }\n\n  serialize(object: string | number | boolean | BigInt): string | number | boolean | BigInt {\n    return object;\n  }\n}\n"]}