{"version":3,"file":"prismaGenerator.js","sourceRoot":"","sources":["../../../src/cli/prismaGenerator.ts"],"names":[],"mappings":";;;;AACA,iDAAgD;AAChD,gEAA0B;AAC1B,4DAAuD;AACvD,qFAAqD;AACrD,qDAAgC;AAEnB,QAAA,aAAa,GAAG,IAAA,WAAI,EAAC,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC,CAAC;AACjD,QAAA,UAAU,GAAG,IAAA,WAAI,EAAC,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;AAE5D,SAAS,kBAAkB,CAAC,aAAiC;IAC3D,OAAO,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,aAAa,KAAK,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;AACvE,CAAC;AAED,SAAS,UAAU,CAAC,gBAAwB;IAC1C,OAAO,gBAAgB,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAChD,CAAC;AAEM,KAAK,UAAU,QAAQ,CAAC,OAAyB;IACtD,MAAM,SAAS,GAAG,IAAA,yBAAa,EAAC,OAAO,CAAC,SAAS,CAAC,MAAO,CAAC,CAAC;IAC3D,MAAM,kBAAE,CAAC,KAAK,CAAC,SAAS,EAAE,EAAC,SAAS,EAAE,IAAI,EAAC,CAAC,CAAC;IAC7C,MAAM,IAAA,mBAAS,EAAC,SAAS,EAAE,IAAI,CAAC,CAAC;IAEjC,MAAM,eAAe,GAAG,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC;IACjD,MAAM,oBAAoB,GAAG,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,IAAA,yBAAa,EAAC,EAAE,CAAC,QAAQ,CAAC,KAAK,kBAAkB,CAAE,CAAC;IACtH,MAAM,gBAAgB,GAAG,IAAA,yBAAa,EAAC,oBAAoB,CAAC,MAAO,CAAC,CAAC;IAErE,MAAM,IAAA,2BAAY,EAAC,OAAO,CAAC,IAAI,EAAE;QAC/B,kBAAkB,EAAE,kBAAkB,CAAC,eAAe,CAAC,kBAAkB,CAAC;QAC1E,aAAa,EAAE,SAAS;QACxB,gBAAgB,EAAE,gBAAgB,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,UAAU,CAAC,cAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,gBAAgB,CAAC,CAAC;KACxI,CAAC,CAAC;IAEH,IAAI,SAAS,KAAK,qBAAa,EAAE;QAC/B,MAAM,kBAAE,CAAC,IAAI,CAAC,IAAA,WAAI,EAAC,kBAAU,EAAE,SAAS,EAAE,qBAAqB,CAAC,EAAE,IAAA,WAAI,EAAC,kBAAU,EAAE,KAAK,EAAE,KAAK,EAAE,UAAU,CAAC,CAAC,CAAC;QAC9G,MAAM,kBAAE,CAAC,IAAI,CAAC,IAAA,WAAI,EAAC,kBAAU,EAAE,SAAS,EAAE,qBAAqB,CAAC,EAAE,IAAA,WAAI,EAAC,kBAAU,EAAE,KAAK,EAAE,KAAK,EAAE,UAAU,CAAC,CAAC,CAAC;QAC9G,MAAM,kBAAE,CAAC,IAAI,CAAC,IAAA,WAAI,EAAC,kBAAU,EAAE,SAAS,EAAE,mBAAmB,CAAC,EAAE,IAAA,WAAI,EAAC,kBAAU,EAAE,KAAK,EAAE,OAAO,EAAE,YAAY,CAAC,CAAC,CAAC;KACjH;IAED,OAAO,EAAE,CAAC;AACZ,CAAC;AAtBD,4BAsBC","sourcesContent":["import {GeneratorOptions} from \"@prisma/generator-helper\";\nimport {parseEnvValue} from \"@prisma/internals\";\nimport fs from \"fs-extra\";\nimport {generateCode} from \"../generator/generateCode\";\nimport removeDir from \"../generator/utils/removeDir\";\nimport path, {join} from \"path\";\n\nexport const defaultOutput = join(__dirname, \"..\", \".schema\");\nexport const packageDir = join(__dirname, \"..\", \"..\", \"..\");\n\nfunction parseStringBoolean(stringBoolean: string | undefined) {\n  return Boolean(stringBoolean ? stringBoolean === \"true\" : undefined);\n}\n\nfunction toUnixPath(maybeWindowsPath: string) {\n  return maybeWindowsPath.split(\"\\\\\").join(\"/\");\n}\n\nexport async function generate(options: GeneratorOptions) {\n  const outputDir = parseEnvValue(options.generator.output!);\n  await fs.mkdir(outputDir, {recursive: true});\n  await removeDir(outputDir, true);\n\n  const generatorConfig = options.generator.config;\n  const prismaClientProvider = options.otherGenerators.find((it) => parseEnvValue(it.provider) === \"prisma-client-js\")!;\n  const prismaClientPath = parseEnvValue(prismaClientProvider.output!);\n\n  await generateCode(options.dmmf, {\n    emitTranspiledCode: parseStringBoolean(generatorConfig.emitTranspiledCode),\n    outputDirPath: outputDir,\n    prismaClientPath: prismaClientPath.includes(\"node_modules\") ? \"@prisma/client\" : toUnixPath(path.relative(outputDir, prismaClientPath))\n  });\n\n  if (outputDir === defaultOutput) {\n    await fs.copy(join(packageDir, \"scripts\", \"backup-index.cjs.js\"), join(packageDir, \"lib\", \"cjs\", \"index.js\"));\n    await fs.copy(join(packageDir, \"scripts\", \"backup-index.esm.js\"), join(packageDir, \"lib\", \"esm\", \"index.js\"));\n    await fs.copy(join(packageDir, \"scripts\", \"backup-index.d.ts\"), join(packageDir, \"lib\", \"types\", \"index.d.ts\"));\n  }\n\n  return \"\";\n}\n"]}