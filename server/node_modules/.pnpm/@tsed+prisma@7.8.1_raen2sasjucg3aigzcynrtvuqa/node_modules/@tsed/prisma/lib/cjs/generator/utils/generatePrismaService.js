"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generatePrismaService = void 0;
const tslib_1 = require("tslib");
const ts_morph_1 = require("ts-morph");
const path_1 = tslib_1.__importDefault(require("path"));
function generatePrismaService(project, baseDirPath) {
    const directory = project.createDirectory(path_1.default.resolve(baseDirPath, "services"));
    const prismaServiceFile = directory.createSourceFile("PrismaService.ts", "", { overwrite: true });
    prismaServiceFile.addImportDeclarations([
        {
            moduleSpecifier: "@tsed/di",
            namedImports: ["Inject", "Injectable", "Configuration", "OnInit", "OnDestroy"]
        },
        {
            moduleSpecifier: "@tsed/logger",
            namedImports: ["Logger"]
        },
        {
            moduleSpecifier: "../client",
            namedImports: ["PrismaClient"]
        }
    ]);
    const prismaService = prismaServiceFile.addClass({
        name: "PrismaService",
        isExported: true,
        decorators: [
            {
                name: "Injectable",
                arguments: []
            }
        ],
        extends: "PrismaClient",
        implements: ["OnInit", "OnDestroy"]
    });
    prismaService.addProperty({
        name: "logger",
        scope: ts_morph_1.Scope.Protected,
        type: "Logger",
        decorators: [
            {
                name: "Inject",
                arguments: []
            }
        ]
    });
    prismaService
        .addConstructor({
        parameters: [
            {
                name: "settings",
                type: "Configuration",
                decorators: [
                    {
                        name: "Configuration",
                        arguments: []
                    }
                ]
            }
        ]
    })
        .setBodyText("super(settings.get('prisma'));");
    prismaService
        .addMethod({
        name: "$onInit",
        isAsync: true,
        returnType: "Promise<void>"
    })
        .setBodyText(`this.logger.info("Connection to prisma database");
      await this.$connect();`);
    prismaService
        .addMethod({
        name: "$onDestroy",
        isAsync: true,
        returnType: "Promise<void>"
    })
        .setBodyText(`this.logger.info("Disconnection from prisma database");
      await this.$disconnect();`);
    return prismaService;
}
exports.generatePrismaService = generatePrismaService;
//# sourceMappingURL=generatePrismaService.js.map