{"version":3,"file":"generateRepositories.js","sourceRoot":"","sources":["../../../../src/generator/utils/generateRepositories.ts"],"names":[],"mappings":"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","sourcesContent":["import {DMMF} from \"@prisma/generator-helper\";\nimport {ClassDeclaration, Project, Scope} from \"ts-morph\";\nimport {toMap} from \"@tsed/core\";\nimport path from \"path\";\nimport {DmmfModel} from \"../domain/DmmfModel\";\nimport {generateOutputsBarrelFile} from \"./generateOutputsBarrelFile\";\nimport pluralize from \"pluralize\";\nimport {pascalCase, camelCase} from \"change-case\";\n\ninterface MethodOptions {\n  repository: ClassDeclaration;\n  name: string;\n  model: string;\n  returnType?: string | undefined;\n  hasQuestionToken?: boolean;\n}\n\nfunction addDelegatedMethod({name, hasQuestionToken, repository, model, returnType}: MethodOptions) {\n  const method = repository.addMethod({\n    name: name,\n    isAsync: true,\n    returnType: returnType ? `Promise<${returnType}>` : undefined,\n    parameters: [\n      {\n        name: \"args\",\n        type: `Prisma.${model}${pascalCase(name)}Args`,\n        hasQuestionToken\n      }\n    ]\n  });\n\n  if (returnType) {\n    method.setBodyText(`const obj = await this.collection.${name}(args);\n        return this.deserialize<${returnType}>(obj);`);\n  } else {\n    method.setBodyText(`return this.collection.${name}(args)`);\n  }\n}\n\nexport function generateRepositories(dmmf: DMMF.Document, project: Project, baseDirPath: string) {\n  const modelsMap = toMap<string, DMMF.Model>(dmmf.datamodel.models, \"name\");\n  const models = DmmfModel.getModels(dmmf, modelsMap);\n  const repoDirPath = path.resolve(baseDirPath, \"repositories\");\n  const repoDirectory = project.createDirectory(repoDirPath);\n  const repositoriesIndex = repoDirectory.createSourceFile(`index.ts`, undefined, {overwrite: true});\n\n  const exportedModels = models.map((model) => {\n    const name = pascalCase(`${pluralize(model.name)}Repository`);\n    const modelName = model.toString();\n    const sourceFile = repoDirectory.createSourceFile(`${name}.ts`, undefined, {overwrite: true});\n\n    sourceFile.addImportDeclarations([\n      {\n        moduleSpecifier: \"@tsed/core\",\n        namedImports: [\"isArray\"]\n      },\n      {\n        moduleSpecifier: \"@tsed/json-mapper\",\n        namedImports: [\"deserialize\"]\n      },\n      {\n        moduleSpecifier: \"@tsed/di\",\n        namedImports: [\"Injectable\", \"Inject\"]\n      },\n      {\n        moduleSpecifier: \"../services/PrismaService\",\n        namedImports: [\"PrismaService\"]\n      },\n      {\n        moduleSpecifier: \"../client\",\n        namedImports: [\"Prisma\", model.name]\n      },\n      {\n        moduleSpecifier: \"../models\",\n        namedImports: [model.toString()]\n      }\n    ]);\n\n    const repository = sourceFile.addClass({\n      name,\n      isExported: true,\n      decorators: [\n        {\n          name: \"Injectable\",\n          arguments: []\n        }\n      ]\n    });\n\n    repository.addProperty({\n      name: \"prisma\",\n      type: \"PrismaService\",\n      scope: Scope.Protected,\n      decorators: [\n        {\n          name: \"Inject\",\n          arguments: []\n        }\n      ]\n    });\n\n    repository\n      .addGetAccessor({\n        name: \"collection\"\n      })\n      .setBodyText(`return this.prisma.${camelCase(model.name)}`);\n\n    repository\n      .addGetAccessor({\n        name: \"groupBy\"\n      })\n      .setBodyText(`return this.collection.groupBy.bind(this.collection)`);\n\n    repository\n      .addMethod({\n        name: \"deserialize\",\n        scope: Scope.Protected,\n        returnType: \"T\",\n        parameters: [\n          {\n            name: \"obj\",\n            type: `null | ${model.name} | ${model.name}[]`\n          }\n        ],\n        typeParameters: [\"T\"]\n      })\n      .setBodyText(`return deserialize<T>(obj, {type: ${modelName}, collectionType: isArray(obj) ? Array : undefined})`);\n\n    addDelegatedMethod({\n      repository,\n      name: \"findUnique\",\n      model: model.name,\n      returnType: `${modelName} | null`\n    });\n\n    addDelegatedMethod({\n      repository,\n      name: \"findFirst\",\n      model: model.name,\n      returnType: `${modelName} | null`\n    });\n\n    addDelegatedMethod({\n      repository,\n      name: \"findMany\",\n      model: model.name,\n      returnType: `${modelName}[]`,\n      hasQuestionToken: true\n    });\n\n    addDelegatedMethod({\n      repository,\n      name: \"create\",\n      model: model.name,\n      returnType: `${modelName}`\n    });\n\n    addDelegatedMethod({\n      repository,\n      name: \"update\",\n      model: model.name,\n      returnType: `${modelName}`\n    });\n\n    addDelegatedMethod({\n      repository,\n      name: \"upsert\",\n      model: model.name,\n      returnType: `${modelName}`\n    });\n\n    addDelegatedMethod({\n      repository,\n      name: \"delete\",\n      model: model.name,\n      returnType: `${modelName}`\n    });\n\n    addDelegatedMethod({\n      repository,\n      name: \"deleteMany\",\n      model: model.name\n    });\n\n    addDelegatedMethod({\n      repository,\n      name: \"updateMany\",\n      model: model.name\n    });\n\n    addDelegatedMethod({\n      repository,\n      name: \"aggregate\",\n      model: pascalCase(model.name)\n    });\n\n    return name;\n  });\n\n  generateOutputsBarrelFile(repositoriesIndex, exportedModels);\n}\n"]}