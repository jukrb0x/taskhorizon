{"version":3,"file":"generatePrismaService.js","sourceRoot":"","sources":["../../../../src/generator/utils/generatePrismaService.ts"],"names":[],"mappings":";;;;AAAA,uCAAwC;AACxC,wDAAwB;AAExB,SAAgB,qBAAqB,CAAC,OAAgB,EAAE,WAAmB;IACzE,MAAM,SAAS,GAAG,OAAO,CAAC,eAAe,CAAC,cAAI,CAAC,OAAO,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC,CAAC;IACjF,MAAM,iBAAiB,GAAG,SAAS,CAAC,gBAAgB,CAAC,kBAAkB,EAAE,EAAE,EAAE,EAAC,SAAS,EAAE,IAAI,EAAC,CAAC,CAAC;IAEhG,iBAAiB,CAAC,qBAAqB,CAAC;QACtC;YACE,eAAe,EAAE,UAAU;YAC3B,YAAY,EAAE,CAAC,QAAQ,EAAE,YAAY,EAAE,eAAe,EAAE,QAAQ,EAAE,WAAW,CAAC;SAC/E;QACD;YACE,eAAe,EAAE,cAAc;YAC/B,YAAY,EAAE,CAAC,QAAQ,CAAC;SACzB;QACD;YACE,eAAe,EAAE,WAAW;YAC5B,YAAY,EAAE,CAAC,cAAc,CAAC;SAC/B;KACF,CAAC,CAAC;IAEH,MAAM,aAAa,GAAG,iBAAiB,CAAC,QAAQ,CAAC;QAC/C,IAAI,EAAE,eAAe;QACrB,UAAU,EAAE,IAAI;QAChB,UAAU,EAAE;YACV;gBACE,IAAI,EAAE,YAAY;gBAClB,SAAS,EAAE,EAAE;aACd;SACF;QACD,OAAO,EAAE,cAAc;QACvB,UAAU,EAAE,CAAC,QAAQ,EAAE,WAAW,CAAC;KACpC,CAAC,CAAC;IAEH,aAAa,CAAC,WAAW,CAAC;QACxB,IAAI,EAAE,QAAQ;QACd,KAAK,EAAE,gBAAK,CAAC,SAAS;QACtB,IAAI,EAAE,QAAQ;QACd,UAAU,EAAE;YACV;gBACE,IAAI,EAAE,QAAQ;gBACd,SAAS,EAAE,EAAE;aACd;SACF;KACF,CAAC,CAAC;IAEH,aAAa;SACV,cAAc,CAAC;QACd,UAAU,EAAE;YACV;gBACE,IAAI,EAAE,UAAU;gBAChB,IAAI,EAAE,eAAe;gBACrB,UAAU,EAAE;oBACV;wBACE,IAAI,EAAE,eAAe;wBACrB,SAAS,EAAE,EAAE;qBACd;iBACF;aACF;SACF;KACF,CAAC;SACD,WAAW,CAAC,gCAAgC,CAAC,CAAC;IAEjD,aAAa;SACV,SAAS,CAAC;QACT,IAAI,EAAE,SAAS;QACf,OAAO,EAAE,IAAI;QACb,UAAU,EAAE,eAAe;KAC5B,CAAC;SACD,WAAW,CACV;6BACuB,CACxB,CAAC;IAEJ,aAAa;SACV,SAAS,CAAC;QACT,IAAI,EAAE,YAAY;QAClB,OAAO,EAAE,IAAI;QACb,UAAU,EAAE,eAAe;KAC5B,CAAC;SACD,WAAW,CACV;gCAC0B,CAC3B,CAAC;IAEJ,OAAO,aAAa,CAAC;AACvB,CAAC;AApFD,sDAoFC","sourcesContent":["import {Project, Scope} from \"ts-morph\";\nimport path from \"path\";\n\nexport function generatePrismaService(project: Project, baseDirPath: string) {\n  const directory = project.createDirectory(path.resolve(baseDirPath, \"services\"));\n  const prismaServiceFile = directory.createSourceFile(\"PrismaService.ts\", \"\", {overwrite: true});\n\n  prismaServiceFile.addImportDeclarations([\n    {\n      moduleSpecifier: \"@tsed/di\",\n      namedImports: [\"Inject\", \"Injectable\", \"Configuration\", \"OnInit\", \"OnDestroy\"]\n    },\n    {\n      moduleSpecifier: \"@tsed/logger\",\n      namedImports: [\"Logger\"]\n    },\n    {\n      moduleSpecifier: \"../client\",\n      namedImports: [\"PrismaClient\"]\n    }\n  ]);\n\n  const prismaService = prismaServiceFile.addClass({\n    name: \"PrismaService\",\n    isExported: true,\n    decorators: [\n      {\n        name: \"Injectable\",\n        arguments: []\n      }\n    ],\n    extends: \"PrismaClient\",\n    implements: [\"OnInit\", \"OnDestroy\"]\n  });\n\n  prismaService.addProperty({\n    name: \"logger\",\n    scope: Scope.Protected,\n    type: \"Logger\",\n    decorators: [\n      {\n        name: \"Inject\",\n        arguments: []\n      }\n    ]\n  });\n\n  prismaService\n    .addConstructor({\n      parameters: [\n        {\n          name: \"settings\",\n          type: \"Configuration\",\n          decorators: [\n            {\n              name: \"Configuration\",\n              arguments: []\n            }\n          ]\n        }\n      ]\n    })\n    .setBodyText(\"super(settings.get('prisma'));\");\n\n  prismaService\n    .addMethod({\n      name: \"$onInit\",\n      isAsync: true,\n      returnType: \"Promise<void>\"\n    })\n    .setBodyText(\n      `this.logger.info(\"Connection to prisma database\");\n      await this.$connect();`\n    );\n\n  prismaService\n    .addMethod({\n      name: \"$onDestroy\",\n      isAsync: true,\n      returnType: \"Promise<void>\"\n    })\n    .setBodyText(\n      `this.logger.info(\"Disconnection from prisma database\");\n      await this.$disconnect();`\n    );\n\n  return prismaService;\n}\n"]}