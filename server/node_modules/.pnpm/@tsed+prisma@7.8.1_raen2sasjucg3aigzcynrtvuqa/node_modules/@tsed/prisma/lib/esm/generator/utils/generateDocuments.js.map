{"version":3,"file":"generateDocuments.js","sourceRoot":"","sources":["../../../../src/generator/utils/generateDocuments.ts"],"names":[],"mappings":"AAEA,MAAM,UAAU,iBAAiB,CAC/B,SAAgB,EAChB,SAAoB,EACpB,SAAuE;IAEvE,OAAO,SAAS,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE;QAChC,MAAM,UAAU,GAAG,SAAS,CAAC,gBAAgB,CAAC,GAAG,QAAQ,CAAC,QAAQ,EAAE,KAAK,EAAE,SAAS,EAAE,EAAC,SAAS,EAAE,IAAI,EAAC,CAAC,CAAC;QACzG,MAAM,UAAU,GAAG,SAAS,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;QAEnD,IAAI,QAAQ,CAAC,kBAAkB,EAAE;YAC/B,UAAU,CAAC,qBAAqB,CAAC,QAAQ,CAAC,kBAAkB,CAAC,CAAC;SAC/D;QAED,UAAU,CAAC,aAAa,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;QAEvC,OAAO,QAAQ,CAAC,QAAQ,EAAE,CAAC;IAC7B,CAAC,CAAC,CAAC;AACL,CAAC","sourcesContent":["import {Directory, SourceFile, StatementStructures} from \"ts-morph\";\n\nexport function generateDocuments<T = any>(\n  documents: any[],\n  directory: Directory,\n  transform: (document: T, sourceFile: SourceFile) => StatementStructures\n): string[] {\n  return documents.map((document) => {\n    const sourceFile = directory.createSourceFile(`${document.toString()}.ts`, undefined, {overwrite: true});\n    const statements = transform(document, sourceFile);\n\n    if (document.importDeclarations) {\n      sourceFile.addImportDeclarations(document.importDeclarations);\n    }\n\n    sourceFile.addStatements([statements]);\n\n    return document.toString();\n  });\n}\n"]}