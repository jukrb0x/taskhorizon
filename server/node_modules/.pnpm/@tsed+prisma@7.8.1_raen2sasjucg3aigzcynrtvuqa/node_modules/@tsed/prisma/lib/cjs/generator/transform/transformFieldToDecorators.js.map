{"version":3,"file":"transformFieldToDecorators.js","sourceRoot":"","sources":["../../../../src/generator/transform/transformFieldToDecorators.ts"],"names":[],"mappings":"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","sourcesContent":["import {DecoratorStructure, StructureKind} from \"ts-morph\";\nimport {DmmfField} from \"../domain/DmmfField\";\nimport {DmmfModel} from \"../domain/DmmfModel\";\nimport {ScalarDecorators, ScalarJsClasses} from \"../domain/ScalarTsTypes\";\nimport {TransformContext} from \"../domain/TransformContext\";\nimport {isCircularRef} from \"../utils/isCircularRef\";\n\nfunction createDecorator(name: string, args: string[]): DecoratorStructure {\n  return {\n    kind: StructureKind.Decorator,\n    name,\n    arguments: args\n  };\n}\n\nexport function transformFieldToDecorators(field: DmmfField, ctx: TransformContext): DecoratorStructure[] {\n  const decorators: DecoratorStructure[] = [...(ScalarDecorators[field.type] || [])].map((obj) => {\n    field.model.addImportDeclaration(\"@tsed/schema\", obj.name);\n\n    return {\n      kind: StructureKind.Decorator,\n      ...obj\n    };\n  });\n\n  if (field.isRequired) {\n    field.model.addImportDeclaration(\"@tsed/schema\", \"Required\");\n    decorators.push(createDecorator(\"Required\", []));\n  }\n\n  if (field.location === \"enumTypes\") {\n    field.model.addImportDeclaration(\"@tsed/schema\", \"Enum\");\n    decorators.push(createDecorator(\"Enum\", [field.type]));\n  }\n\n  if (field.isNullable && !field.isList) {\n    field.model.addImportDeclaration(\"@tsed/schema\", \"Allow\");\n    decorators.push(createDecorator(\"Allow\", [\"null\"]));\n  }\n\n  if (field.isList && field.location !== \"enumTypes\") {\n    let classType = ScalarJsClasses[field.type] || DmmfModel.symbolName(field.type);\n\n    if (isCircularRef(field.model.name, field.type, ctx)) {\n      classType = `() => ${classType}`;\n    }\n\n    field.model.addImportDeclaration(\"@tsed/schema\", \"CollectionOf\");\n    decorators.unshift(createDecorator(\"CollectionOf\", [classType]));\n  }\n\n  if (field.location !== \"enumTypes\" && !field.isList) {\n    let classType = ScalarJsClasses[field.type] || DmmfModel.symbolName(field.type);\n\n    if (isCircularRef(field.model.name, field.type, ctx)) {\n      classType = `() => ${classType}`;\n    }\n\n    field.model.addImportDeclaration(\"@tsed/schema\", \"Property\");\n    decorators.unshift(createDecorator(\"Property\", [classType]));\n  }\n\n  field.getAdditionalDecorators().forEach((item) => {\n    field.model.addImportDeclaration(\"@tsed/schema\", item.name);\n    decorators.push(createDecorator(item.name, item.arguments));\n  });\n\n  return decorators;\n}\n"]}