import { toMap } from "@tsed/core";
import { StructureKind } from "ts-morph";
import { DmmfField } from "./DmmfField.js";
import { pascalCase } from "change-case";
export class DmmfModel {
    isInputType;
    model;
    modelType;
    #imports = new Map();
    constructor({ isInputType, model, modelType }) {
        this.model = model;
        this.modelType = modelType;
        this.isInputType = isInputType;
    }
    get name() {
        return this.model.name;
    }
    get fields() {
        const dataField = toMap(this.modelType.fields, "name");
        return this.model.fields.map((field) => {
            return new DmmfField({
                model: this,
                field,
                schemaArg: dataField.get(field.name)
            });
        });
    }
    get importDeclarations() {
        return [...this.#imports.values()];
    }
    static getModels(dmmf, modelsMap, typesMap) {
        const inputObjectsTypes = dmmf.schema.inputObjectTypes.model || [];
        const outputObjectTypes = dmmf.schema.outputObjectTypes.model || [];
        const factory = (isInputType) => (modelType) => {
            let model = modelsMap.get(modelType.name) || typesMap?.get(modelType.name);
            if (model) {
                return new DmmfModel({
                    modelType,
                    model,
                    isInputType
                });
            }
            return undefined;
        };
        const inputs = inputObjectsTypes.map(factory(true)).filter(Boolean);
        const outputs = outputObjectTypes.map(factory(false)).filter(Boolean);
        return [...inputs, ...outputs];
    }
    static symbolName(name) {
        return pascalCase(`${name}Model`);
    }
    addImportDeclaration(moduleSpecifier, name, isDefault = false) {
        if (!this.#imports.has(moduleSpecifier)) {
            this.#imports.set(moduleSpecifier, {
                kind: StructureKind.ImportDeclaration,
                moduleSpecifier: moduleSpecifier,
                namedImports: []
            });
        }
        const moduleDeclaration = this.#imports.get(moduleSpecifier);
        if (isDefault) {
            moduleDeclaration.defaultImport = name;
        }
        else {
            const nameImports = moduleDeclaration.namedImports;
            if (!nameImports.includes(name)) {
                nameImports.push(name);
            }
        }
        return this;
    }
    toString() {
        return DmmfModel.symbolName(this.name);
    }
}
//# sourceMappingURL=DmmfModel.js.map