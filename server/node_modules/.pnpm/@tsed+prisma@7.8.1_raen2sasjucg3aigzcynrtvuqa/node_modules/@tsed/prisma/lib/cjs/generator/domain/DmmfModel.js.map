{"version":3,"file":"DmmfModel.js","sourceRoot":"","sources":["../../../../src/generator/domain/DmmfModel.ts"],"names":[],"mappings":"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","sourcesContent":["import {DMMF} from \"@prisma/generator-helper\";\nimport {toMap} from \"@tsed/core\";\nimport {ImportDeclarationStructure, StructureKind} from \"ts-morph\";\nimport {DmmfField} from \"./DmmfField\";\nimport {pascalCase} from \"change-case\";\n\nexport class DmmfModel {\n  readonly isInputType: boolean;\n  readonly model: DMMF.Model;\n  readonly modelType: DMMF.InputType | DMMF.OutputType;\n  #imports = new Map<string, ImportDeclarationStructure>();\n\n  constructor({isInputType, model, modelType}: any) {\n    this.model = model;\n    this.modelType = modelType;\n    this.isInputType = isInputType;\n  }\n\n  get name() {\n    return this.model.name;\n  }\n\n  get fields() {\n    const dataField = toMap<string, DMMF.SchemaArg>(this.modelType.fields as any, \"name\");\n\n    return this.model.fields.map((field) => {\n      return new DmmfField({\n        model: this,\n        field,\n        schemaArg: dataField.get(field.name)\n      });\n    });\n  }\n\n  get importDeclarations() {\n    return [...this.#imports.values()];\n  }\n\n  static getModels(dmmf: DMMF.Document, modelsMap: Map<string, DMMF.Model>, typesMap?: Map<string, DMMF.Model>): DmmfModel[] {\n    const inputObjectsTypes = dmmf.schema.inputObjectTypes.model || [];\n    const outputObjectTypes = dmmf.schema.outputObjectTypes.model || [];\n\n    const factory = (isInputType: boolean) => (modelType: DMMF.InputType | DMMF.OutputType) => {\n      let model = modelsMap.get(modelType.name) || typesMap?.get(modelType.name);\n\n      if (model) {\n        return new DmmfModel({\n          modelType,\n          model,\n          isInputType\n        });\n      }\n\n      return undefined;\n    };\n\n    const inputs: DmmfModel[] = inputObjectsTypes.map(factory(true)).filter(Boolean) as DmmfModel[];\n    const outputs: DmmfModel[] = outputObjectTypes.map(factory(false)).filter(Boolean) as DmmfModel[];\n\n    return [...inputs, ...outputs];\n  }\n\n  static symbolName(name: string) {\n    return pascalCase(`${name}Model`);\n  }\n\n  addImportDeclaration(moduleSpecifier: string, name: string, isDefault = false) {\n    if (!this.#imports.has(moduleSpecifier)) {\n      this.#imports.set(moduleSpecifier, {\n        kind: StructureKind.ImportDeclaration,\n        moduleSpecifier: moduleSpecifier,\n        namedImports: []\n      });\n    }\n\n    const moduleDeclaration = this.#imports.get(moduleSpecifier)!;\n\n    if (isDefault) {\n      moduleDeclaration.defaultImport = name;\n    } else {\n      const nameImports = moduleDeclaration.namedImports as any[];\n      if (!nameImports.includes(name)) {\n        nameImports.push(name);\n      }\n    }\n\n    return this;\n  }\n\n  toString() {\n    return DmmfModel.symbolName(this.name);\n  }\n}\n"]}