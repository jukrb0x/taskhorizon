{"version":3,"file":"transformScalarToType.js","sourceRoot":"","sources":["../../../../src/generator/transform/transformScalarToType.ts"],"names":[],"mappings":";;;AACA,mDAA8C;AAC9C,2DAAsD;AACtD,iDAA4C;AAE5C,SAAgB,qBAAqB,CAAC,KAAgB;IACpD,MAAM,EAAC,UAAU,EAAE,UAAU,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAC,GAAG,KAAK,CAAC;IACtE,IAAI,MAAM,GAAW,IAAI,CAAC;IAE1B,QAAQ,QAAQ,EAAE;QAChB,KAAK,QAAQ;YACX,MAAM,GAAG,6BAAa,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YACnC,MAAM;QACR,KAAK,WAAW;YACd,MAAM,GAAG,mBAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YACnC,KAAK,CAAC,KAAK,CAAC,oBAAoB,CAAC,UAAU,EAAE,mBAAQ,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;YAC9E,MAAM;QACR,KAAK,kBAAkB;YACrB,MAAM,GAAG,qBAAS,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YAEpC,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI,EAAE;gBACnC,KAAK,CAAC,KAAK,CAAC,oBAAoB,CAAC,KAAK,qBAAS,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE,qBAAS,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;aAC7G;YAED,MAAM;KACT;IAED,IAAI,MAAM,EAAE;QACV,MAAM,IAAI,IAAI,CAAC;KAChB;IAED,IAAI,CAAC,UAAU,EAAE;QACf,IAAI,KAAK,CAAC,WAAW,EAAE;YACrB,MAAM,IAAI,cAAc,CAAC;SAC1B;aAAM;YACL,MAAM,IAAI,SAAS,CAAC;SACrB;KACF;SAAM,IAAI,UAAU,IAAI,CAAC,MAAM,EAAE;QAChC,MAAM,IAAI,SAAS,CAAC;KACrB;IAED,OAAO,MAAM,CAAC;AAChB,CAAC;AArCD,sDAqCC","sourcesContent":["import {DmmfField} from \"../domain/DmmfField\";\nimport {DmmfModel} from \"../domain/DmmfModel\";\nimport {ScalarTsTypes} from \"../domain/ScalarTsTypes\";\nimport {DmmfEnum} from \"../domain/DmmfEnum\";\n\nexport function transformScalarToType(field: DmmfField) {\n  const {isRequired, isNullable, type, isList, location, model} = field;\n  let TSType: string = type;\n\n  switch (location) {\n    case \"scalar\":\n      TSType = ScalarTsTypes[field.type];\n      break;\n    case \"enumTypes\":\n      TSType = DmmfEnum.symbolName(type);\n      field.model.addImportDeclaration(`../enums`, DmmfEnum.symbolName(field.type));\n      break;\n    case \"inputObjectTypes\":\n      TSType = DmmfModel.symbolName(type);\n\n      if (field.model.name !== field.type) {\n        field.model.addImportDeclaration(`./${DmmfModel.symbolName(field.type)}`, DmmfModel.symbolName(field.type));\n      }\n\n      break;\n  }\n\n  if (isList) {\n    TSType += \"[]\";\n  }\n\n  if (!isRequired) {\n    if (model.isInputType) {\n      TSType += \" | undefined\";\n    } else {\n      TSType += \" | null\";\n    }\n  } else if (isNullable && !isList) {\n    TSType += \" | null\";\n  }\n\n  return TSType;\n}\n"]}