"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generate = exports.packageDir = exports.defaultOutput = void 0;
const tslib_1 = require("tslib");
const internals_1 = require("@prisma/internals");
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const generateCode_1 = require("../generator/generateCode");
const removeDir_1 = tslib_1.__importDefault(require("../generator/utils/removeDir"));
const path_1 = tslib_1.__importStar(require("path"));
exports.defaultOutput = (0, path_1.join)(__dirname, "..", ".schema");
exports.packageDir = (0, path_1.join)(__dirname, "..", "..", "..");
function parseStringBoolean(stringBoolean) {
    return Boolean(stringBoolean ? stringBoolean === "true" : undefined);
}
function toUnixPath(maybeWindowsPath) {
    return maybeWindowsPath.split("\\").join("/");
}
async function generate(options) {
    const outputDir = (0, internals_1.parseEnvValue)(options.generator.output);
    await fs_extra_1.default.mkdir(outputDir, { recursive: true });
    await (0, removeDir_1.default)(outputDir, true);
    const generatorConfig = options.generator.config;
    const prismaClientProvider = options.otherGenerators.find((it) => (0, internals_1.parseEnvValue)(it.provider) === "prisma-client-js");
    const prismaClientPath = (0, internals_1.parseEnvValue)(prismaClientProvider.output);
    await (0, generateCode_1.generateCode)(options.dmmf, {
        emitTranspiledCode: parseStringBoolean(generatorConfig.emitTranspiledCode),
        outputDirPath: outputDir,
        prismaClientPath: prismaClientPath.includes("node_modules") ? "@prisma/client" : toUnixPath(path_1.default.relative(outputDir, prismaClientPath))
    });
    if (outputDir === exports.defaultOutput) {
        await fs_extra_1.default.copy((0, path_1.join)(exports.packageDir, "scripts", "backup-index.cjs.js"), (0, path_1.join)(exports.packageDir, "lib", "cjs", "index.js"));
        await fs_extra_1.default.copy((0, path_1.join)(exports.packageDir, "scripts", "backup-index.esm.js"), (0, path_1.join)(exports.packageDir, "lib", "esm", "index.js"));
        await fs_extra_1.default.copy((0, path_1.join)(exports.packageDir, "scripts", "backup-index.d.ts"), (0, path_1.join)(exports.packageDir, "lib", "types", "index.d.ts"));
    }
    return "";
}
exports.generate = generate;
//# sourceMappingURL=prismaGenerator.js.map