"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformFieldToDecorators = void 0;
const ts_morph_1 = require("ts-morph");
const DmmfModel_1 = require("../domain/DmmfModel");
const ScalarTsTypes_1 = require("../domain/ScalarTsTypes");
const isCircularRef_1 = require("../utils/isCircularRef");
function createDecorator(name, args) {
    return {
        kind: ts_morph_1.StructureKind.Decorator,
        name,
        arguments: args
    };
}
function transformFieldToDecorators(field, ctx) {
    const decorators = [...(ScalarTsTypes_1.ScalarDecorators[field.type] || [])].map((obj) => {
        field.model.addImportDeclaration("@tsed/schema", obj.name);
        return {
            kind: ts_morph_1.StructureKind.Decorator,
            ...obj
        };
    });
    if (field.isRequired) {
        field.model.addImportDeclaration("@tsed/schema", "Required");
        decorators.push(createDecorator("Required", []));
    }
    if (field.location === "enumTypes") {
        field.model.addImportDeclaration("@tsed/schema", "Enum");
        decorators.push(createDecorator("Enum", [field.type]));
    }
    if (field.isNullable && !field.isList) {
        field.model.addImportDeclaration("@tsed/schema", "Allow");
        decorators.push(createDecorator("Allow", ["null"]));
    }
    if (field.isList && field.location !== "enumTypes") {
        let classType = ScalarTsTypes_1.ScalarJsClasses[field.type] || DmmfModel_1.DmmfModel.symbolName(field.type);
        if ((0, isCircularRef_1.isCircularRef)(field.model.name, field.type, ctx)) {
            classType = `() => ${classType}`;
        }
        field.model.addImportDeclaration("@tsed/schema", "CollectionOf");
        decorators.unshift(createDecorator("CollectionOf", [classType]));
    }
    if (field.location !== "enumTypes" && !field.isList) {
        let classType = ScalarTsTypes_1.ScalarJsClasses[field.type] || DmmfModel_1.DmmfModel.symbolName(field.type);
        if ((0, isCircularRef_1.isCircularRef)(field.model.name, field.type, ctx)) {
            classType = `() => ${classType}`;
        }
        field.model.addImportDeclaration("@tsed/schema", "Property");
        decorators.unshift(createDecorator("Property", [classType]));
    }
    field.getAdditionalDecorators().forEach((item) => {
        field.model.addImportDeclaration("@tsed/schema", item.name);
        decorators.push(createDecorator(item.name, item.arguments));
    });
    return decorators;
}
exports.transformFieldToDecorators = transformFieldToDecorators;
//# sourceMappingURL=transformFieldToDecorators.js.map