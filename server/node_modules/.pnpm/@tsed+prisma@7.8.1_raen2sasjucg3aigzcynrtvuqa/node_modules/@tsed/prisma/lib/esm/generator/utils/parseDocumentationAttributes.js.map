{"version":3,"file":"parseDocumentationAttributes.js","sourceRoot":"","sources":["../../../../src/generator/utils/parseDocumentationAttributes.ts"],"names":[],"mappings":"AAAA,MAAM,CAAC,MAAM,cAAc,GAAG,iCAAiC,CAAC;AAChE,MAAM,CAAC,MAAM,kBAAkB,GAAG,2BAA2B,CAAC;AAC9D,MAAM,CAAC,MAAM,kBAAkB,GAAG,mCAAmC,CAAC;AACtE,MAAM,CAAC,MAAM,SAAS,GAAG,uBAAuB,CAAC;AAEjD,MAAM,UAAU,4BAA4B,CAAC,aAAiC;IAC5E,IAAI,CAAC,aAAa,EAAE;QAClB,OAAO,EAAE,CAAC;KACX;IAED,OAAO,aAAa;SACjB,KAAK,CAAC,IAAI,CAAC;SACX,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE;QACf,MAAM,SAAS,GAAG,OAAO,CAAC,KAAK,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAErD,IAAI,CAAC,SAAS,EAAE;YACd,OAAO;SACR;QAED,MAAM,aAAa,GAAG,OAAO,CAAC,KAAK,CAAC,kBAAkB,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC3E,MAAM,gBAAgB,GAAG,SAAS,CAAC,KAAK,CAAC,kBAAkB,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAChF,MAAM,IAAI,GAAU,EAAE,CAAC;QAEvB,IAAI,gBAAgB,EAAE;YACpB,MAAM,iBAAiB,GAAG,gBAAgB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC;YAC7E,MAAM,mBAAmB,GACvB,iBAAiB;gBAChB,MAAM,CAAC,WAAW,CACjB,iBAAiB,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE;oBAC3B,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;oBACpC,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;gBAClC,CAAC,CAAC,CACiB,CAAC;YAExB,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;SAChC;aAAM;YACL,MAAM,MAAM,GAAG,SAAS;iBACrB,KAAK,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;gBACtB,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACd,EAAE,KAAK,CAAC,GAAG,CAAC;iBACX,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC;YAE1B,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,IAAI,EAAE,CAAC,CAAC,CAAC;SAC9B;QAED,OAAO;YACL,IAAI,EAAE,aAAa;YACnB,OAAO,EAAE,SAAS;YAClB,SAAS,EAAE,IAAI;SAChB,CAAC;IACJ,CAAC,CAAC;SACD,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE;QACf,IAAI,OAAO,EAAE,IAAI,KAAK,QAAQ,EAAE;YAC9B,MAAM,IAAI,GAAG,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAE5C,OAAO;gBACL,GAAG,OAAO;gBACV,SAAS,EAAE,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,6BAA6B,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE;aACxE,CAAC;SACH;QACD,OAAO,OAAO,CAAC;IACjB,CAAC,CAAC;SACD,MAAM,CAAC,OAAO,CAAU,CAAC;AAC9B,CAAC","sourcesContent":["export const attributeRegex = /(@TsED\\.)+([A-z])+(\\()(.*)(\\))+/;\nexport const attributeNameRegex = /(?:\\.)+([A-Za-z])+(?:\\()+/;\nexport const attributeArgsRegex = /(?:\\()+([A-Za-z])+\\:+(.+)+(?:\\))+/;\nexport const argsRegex = /(?:\\()+((.+))+(?:\\))+/;\n\nexport function parseDocumentationAttributes(documentation: string | undefined): {name: string; content: string; arguments: string[]}[] {\n  if (!documentation) {\n    return [];\n  }\n\n  return documentation\n    .split(\"\\n\")\n    .map((current) => {\n      const attribute = current.match(attributeRegex)?.[0];\n\n      if (!attribute) {\n        return;\n      }\n\n      const attributeName = current.match(attributeNameRegex)?.[0]?.slice(1, -1);\n      const rawAttributeArgs = attribute.match(attributeArgsRegex)?.[0]?.slice(1, -1);\n      const args: any[] = [];\n\n      if (rawAttributeArgs) {\n        const splitRawArgsArray = rawAttributeArgs.split(\",\").map((it) => it.trim());\n        const parsedAttributeArgs =\n          splitRawArgsArray &&\n          (Object.fromEntries(\n            splitRawArgsArray.map((it) => {\n              const [key, value] = it.split(\": \");\n              return [key, JSON.parse(value)];\n            })\n          ) as Partial<object>);\n\n        args.push(parsedAttributeArgs);\n      } else {\n        const inputs = attribute\n          .match(argsRegex)?.[0]\n          ?.slice(1, -1)\n          ?.split(\",\")\n          .map((it) => it.trim());\n\n        args.push(...(inputs || []));\n      }\n\n      return {\n        name: attributeName,\n        content: attribute,\n        arguments: args\n      };\n    })\n    .map((options) => {\n      if (options?.name === \"Ignore\") {\n        const args = options.arguments.join(\" && \");\n\n        return {\n          ...options,\n          arguments: args.length > 0 ? [`(value: any, ctx: any) => ${args}`] : []\n        };\n      }\n      return options;\n    })\n    .filter(Boolean) as any[];\n}\n"]}