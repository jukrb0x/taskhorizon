{"version":3,"file":"PlatformConfiguration.js","sourceRoot":"","sources":["../../../../src/config/services/PlatformConfiguration.ts"],"names":[],"mappings":"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","sourcesContent":["import {getHostInfoFromPort, isBoolean} from \"@tsed/core\";\nimport {DIConfiguration, Injectable, ProviderScope, TokenProvider} from \"@tsed/di\";\nimport {JsonMapperSettings} from \"@tsed/json-mapper\";\nimport Https from \"https\";\nimport {PlatformJsonMapperSettings} from \"../interfaces/PlatformJsonMapperSettings\";\n\nconst rootDir = process.cwd();\n\n/**\n * `PlatformConfiguration` contains all information about your Server configuration.\n */\n@Injectable({\n  scope: ProviderScope.SINGLETON,\n  global: true\n})\nexport class PlatformConfiguration extends DIConfiguration {\n  constructor() {\n    super({rootDir});\n  }\n\n  get port(): string | number | false {\n    return this.httpPort;\n  }\n\n  set port(value: string | number | false) {\n    this.httpPort = value;\n  }\n\n  get httpsOptions(): Https.ServerOptions {\n    return this.getRaw(\"httpsOptions\");\n  }\n\n  set httpsOptions(value: Https.ServerOptions) {\n    this.setRaw(\"httpsOptions\", value);\n  }\n\n  get httpPort(): string | number | false {\n    return this.getRaw(\"httpPort\");\n  }\n\n  set httpPort(value: string | number | false) {\n    this.setRaw(\"httpPort\", value);\n  }\n\n  get httpsPort(): string | number | false {\n    return this.getRaw(\"httpsPort\");\n  }\n\n  set httpsPort(value: string | number | false) {\n    this.setRaw(\"httpsPort\", value);\n  }\n\n  get mount(): Record<string, TokenProvider[]> {\n    return this.get(\"mount\");\n  }\n\n  set mount(value: Record<string, TokenProvider[]>) {\n    this.setRaw(\"mount\", value);\n  }\n\n  get statics(): Record<string, (any | string)[]> {\n    return this.getRaw(\"statics\") || this.getRaw(\"serveStatic\") || {};\n  }\n\n  set statics(value: Record<string, (any | string)[]>) {\n    this.setRaw(\"statics\", value);\n  }\n\n  get acceptMimes(): string[] {\n    return this.getRaw(\"acceptMimes\");\n  }\n\n  set acceptMimes(value: string[]) {\n    this.setRaw(\"acceptMimes\", value || []);\n  }\n\n  get jsonMapper(): Partial<PlatformJsonMapperSettings> {\n    return {\n      ...JsonMapperSettings\n    };\n  }\n\n  set jsonMapper(options: Partial<PlatformJsonMapperSettings>) {\n    JsonMapperSettings.disableUnsecureConstructor = Boolean(options.disableUnsecureConstructor);\n    JsonMapperSettings.additionalProperties = Boolean(\n      isBoolean(options.additionalProperties) ? options.additionalProperties : options.additionalProperties === \"accept\"\n    );\n  }\n\n  get additionalProperties() {\n    return this.get(\"converter.additionalProperties\") === \"accept\";\n  }\n\n  /**\n   *\n   * @returns {string|number}\n   */\n  getHttpPort(): ReturnType<typeof getHostInfoFromPort> {\n    return getHostInfoFromPort(\"http\", this.getRaw(\"httpPort\"));\n  }\n\n  /**\n   *\n   * @param settings\n   */\n  setHttpPort(settings: {address: string; port: number}) {\n    this.setRaw(\"httpPort\", `${settings.address}:${settings.port}`);\n  }\n\n  /**\n   *\n   * @returns {string|number}\n   */\n  getHttpsPort() {\n    return getHostInfoFromPort(\"https\", this.getRaw(\"httpsPort\"));\n  }\n\n  /**\n   *\n   * @param settings\n   */\n  setHttpsPort(settings: {address: string; port: number}) {\n    this.setRaw(\"httpsPort\", `${settings.address}:${settings.port}`);\n  }\n\n  getBestHost() {\n    const {httpsPort, httpPort} = this;\n\n    if (httpsPort) {\n      return this.getHttpsPort();\n    }\n\n    if (httpPort) {\n      return this.getHttpPort();\n    }\n\n    return {\n      toString() {\n        return \"/\";\n      }\n    };\n  }\n}\n"]}