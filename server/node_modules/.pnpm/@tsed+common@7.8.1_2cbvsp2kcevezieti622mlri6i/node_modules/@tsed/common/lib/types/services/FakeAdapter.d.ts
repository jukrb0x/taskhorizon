import { ProviderOpts } from "@tsed/di";
import { PlatformContextHandler, PlatformLayer } from "@tsed/platform-router";
import { PlatformMulter, PlatformMulterSettings } from "../config/interfaces/PlatformMulterSettings";
import { PlatformStaticsOptions } from "../config/interfaces/PlatformStaticsSettings";
import { PlatformContext } from "../domain/PlatformContext";
import { PlatformAdapter } from "./PlatformAdapter";
export declare class FakeAdapter implements PlatformAdapter<any> {
    providers: ProviderOpts[];
    static createFakeRawDriver(): {
        (): void;
        use: () => any;
        all: () => any;
        get: () => any;
        patch: () => any;
        post: () => any;
        put: () => any;
        head: () => any;
        delete: () => any;
        options: () => any;
    };
    app(): {
        app: any;
        callback(): any;
    };
    multipart(options: PlatformMulterSettings): PlatformMulter;
    statics(endpoint: string, options: PlatformStaticsOptions): any;
    bodyParser(type: string): any;
    mapLayers(layers: PlatformLayer[]): void;
    mapHandler(handler: PlatformContextHandler<PlatformContext>): PlatformContextHandler<PlatformContext<import("./PlatformRequest").PlatformRequest<any>, import("./PlatformResponse").PlatformResponse<any>>>;
    useContext(): void;
}
