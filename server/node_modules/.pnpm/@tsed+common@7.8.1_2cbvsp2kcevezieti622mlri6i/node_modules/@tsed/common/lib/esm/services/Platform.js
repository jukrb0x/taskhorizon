import { __decorate, __metadata } from "tslib";
import { Injectable, InjectorService, ProviderScope } from "@tsed/di";
import { PlatformRouters } from "@tsed/platform-router";
import { PlatformApplication } from "./PlatformApplication.js";
import { PlatformHandler } from "./PlatformHandler.js";
/**
 * `Platform` is used to provide all routes collected by annotation `@Controller`.
 *
 * @platform
 */
let Platform = class Platform {
    injector;
    platformApplication;
    platformRouters;
    #controllers = new Map();
    constructor(injector, platformApplication, platformRouters) {
        this.injector = injector;
        this.platformApplication = platformApplication;
        this.platformRouters = platformRouters;
        platformRouters.prebuild();
    }
    get app() {
        return this.platformApplication;
    }
    addRoutes(routes) {
        routes.forEach((routeSettings) => {
            this.addRoute(routeSettings.route, routeSettings.token);
        });
    }
    addRoute(route, token) {
        const provider = this.injector.getProvider(token);
        if (!provider || provider.hasParent()) {
            return this;
        }
        const router = this.platformRouters.from(provider.token);
        this.app.use(route, router);
        return this;
    }
    getLayers() {
        this.#controllers = new Map();
        return this.platformRouters.getLayers(this.app).map((layer) => {
            if (layer.isProvider()) {
                this.#controllers.set(layer.provider.token, {
                    route: String(layer.path).split(layer.provider.path)[0],
                    provider: layer.provider
                });
            }
            return layer;
        });
    }
    /**
     * Get all controllers mounted on the application.
     * @returns  {RouteController[]}
     */
    getMountedControllers() {
        return [...this.#controllers.values()];
    }
};
Platform = __decorate([
    Injectable({
        scope: ProviderScope.SINGLETON,
        imports: [PlatformHandler]
    }),
    __metadata("design:paramtypes", [InjectorService,
        PlatformApplication,
        PlatformRouters])
], Platform);
export { Platform };
//# sourceMappingURL=Platform.js.map