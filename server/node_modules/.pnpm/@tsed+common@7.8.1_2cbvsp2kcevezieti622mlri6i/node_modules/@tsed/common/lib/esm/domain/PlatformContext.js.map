{"version":3,"file":"PlatformContext.js","sourceRoot":"","sources":["../../../src/domain/PlatformContext.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,SAAS,EAAmB,MAAM,UAAU,CAAC;AAKrD,OAAO,EAAC,mBAAmB,EAAC,MAAM,iCAAiC,CAAC;AACpE,OAAO,EAAC,eAAe,EAAC,MAAM,6BAA6B,CAAC;AAC5D,OAAO,EAAC,gBAAgB,EAAC,MAAM,8BAA8B,CAAC;AAc9D,MAAM,OAAO,eAGX,SAAQ,SAAS;IACV,KAAK,CAAgB;IAC5B;;OAEG;IACI,IAAI,CAAM;IACjB;;OAEG;IACI,KAAK,CAAW;IACvB;;OAEG;IACI,IAAI,CAAO;IAClB;;OAEG;IACM,QAAQ,CAAO;IACxB;;OAEG;IACM,OAAO,CAAO;IACvB;;OAEG;IACH,QAAQ,CAAmB;IAC3B;;OAEG;IACH,eAAe,CAA0B;IAEzC,WAAW,GAAY,KAAK,CAAC;IAE7B,YAAY,OAA+B;QACzC,KAAK,CAAC,OAAO,CAAC,CAAC;QAEf,OAAO,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;QAEvD,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;QAC3B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,aAAa,IAAI,gBAAgB,CAAC,CAAC,IAAI,CAAC,CAAC;QACtE,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,IAAI,eAAe,CAAC,CAAC,IAAI,CAAC,CAAC;QAEnE,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC;QACjC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;QAElC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,cAAc,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;IACnD,CAAC;IAED,IAAI,GAAG;QACL,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC;IAC1B,CAAC;IAED,IAAI,GAAG;QACL,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAsB,mBAAmB,CAAE,CAAC;IACtE,CAAC;IAED,KAAK,CAAC,KAAK;QACT,OAAO,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;IACvC,CAAC;IAED,KAAK,CAAC,MAAM;QACV,MAAM,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;QACpE,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;IAC1B,CAAC;IAED,UAAU;QACR,OAAO,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;IAED,MAAM;QACJ,OAAO,IAAI,CAAC,OAAO,EAAE,SAAS,EAAE,IAAI,IAAI,CAAC,QAAQ,EAAE,MAAM,EAAE,IAAI,IAAI,CAAC,UAAU,EAAE,CAAC;IACnF,CAAC;IAED;;OAEG;IACH,UAAU;QACR,OAAO,IAAI,CAAC,OAAO,CAAC,UAAU,EAAO,CAAC;IACxC,CAAC;IAED;;OAEG;IACH,WAAW;QACT,OAAO,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAO,CAAC;IAC1C,CAAC;IAED;;OAEG;IACH,MAAM;QACJ,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;IAC/B,CAAC;IAED;;OAEG;IACH,MAAM;QACJ,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC;IAChC,CAAC;IAED;;OAEG;IACH,MAAM;QACJ,OAAO,IAAI,CAAC,GAAG,CAAC,MAAM,EAAS,CAAC;IAClC,CAAC;CACF","sourcesContent":["import {DIContext, DIContextOptions} from \"@tsed/di\";\nimport {PlatformHandlerMetadata} from \"@tsed/platform-router\";\nimport {EndpointMetadata} from \"@tsed/schema\";\nimport {IncomingMessage, ServerResponse} from \"http\";\nimport {IncomingEvent} from \"../interfaces/IncomingEvent\";\nimport {PlatformApplication} from \"../services/PlatformApplication\";\nimport {PlatformRequest} from \"../services/PlatformRequest\";\nimport {PlatformResponse} from \"../services/PlatformResponse\";\n\ndeclare global {\n  namespace TsED {\n    export interface Context extends PlatformContext {}\n  }\n}\n\nexport interface PlatformContextOptions extends DIContextOptions {\n  event: IncomingEvent;\n  ignoreUrlPatterns?: any[];\n  endpoint?: EndpointMetadata;\n}\n\nexport class PlatformContext<\n  PReq extends PlatformRequest = PlatformRequest,\n  PRes extends PlatformResponse = PlatformResponse\n> extends DIContext {\n  public event: IncomingEvent;\n  /**\n   * The data return by the previous endpoint if you use multiple handler on the same route. By default data is empty.\n   */\n  public data: any;\n  /**\n   * The error caught by the current handler\n   */\n  public error?: unknown;\n  /**\n   *\n   */\n  public next?: any;\n  /**\n   * The current @@PlatformResponse@@.\n   */\n  readonly response: PRes;\n  /**\n   * The current @@PlatformRequest@@.\n   */\n  readonly request: PReq;\n  /**\n   * The current @@EndpointMetadata@@ resolved by Ts.ED during the request.\n   */\n  endpoint: EndpointMetadata;\n  /**\n   * The current @@PlatformHandlerMetadata@@ resolved by Ts.ED during the request.\n   */\n  handlerMetadata: PlatformHandlerMetadata;\n\n  #isFinished: boolean = false;\n\n  constructor(options: PlatformContextOptions) {\n    super(options);\n\n    options.endpoint && (this.endpoint = options.endpoint);\n\n    this.event = options.event;\n    this.response = new (options.ResponseKlass || PlatformResponse)(this);\n    this.request = new (options.RequestKlass || PlatformRequest)(this);\n\n    this.request.request.$ctx = this;\n    this.request.request.id = this.id;\n\n    this.response.setHeader(\"x-request-id\", this.id);\n  }\n\n  get url() {\n    return this.request.url;\n  }\n\n  get app() {\n    return this.injector.get<PlatformApplication>(PlatformApplication)!;\n  }\n\n  async start() {\n    return this.emit(\"$onRequest\", this);\n  }\n\n  async finish() {\n    await Promise.all([this.emit(\"$onResponse\", this), this.destroy()]);\n    this.#isFinished = true;\n  }\n\n  isFinished() {\n    return this.#isFinished;\n  }\n\n  isDone() {\n    return this.request?.isAborted() || this.response?.isDone() || this.isFinished();\n  }\n\n  /**\n   * Return the framework request instance (Express, Koa, etc...)\n   */\n  getRequest<Req = any>(): Req {\n    return this.request.getRequest<Req>();\n  }\n\n  /**\n   * Return the framework response instance (Express, Koa, etc...)\n   */\n  getResponse<Res = any>(): Res {\n    return this.response.getResponse<Res>();\n  }\n\n  /**\n   * Get Node.js request\n   */\n  getReq(): IncomingMessage {\n    return this.request.getReq();\n  }\n\n  /**\n   * Get Node.js response\n   */\n  getRes(): ServerResponse {\n    return this.response.getRes();\n  }\n\n  /**\n   * Return the original application instance.\n   */\n  getApp<T = any>(): T {\n    return this.app.getApp() as any;\n  }\n}\n"]}