import { Provider } from "@tsed/di";
import { PlatformExceptions } from "@tsed/platform-exceptions";
import { PlatformParams, PlatformParamsCallback } from "@tsed/platform-params";
import { PlatformResponseFilter } from "@tsed/platform-response-filter";
import { PlatformHandlerMetadata, PlatformRouters } from "@tsed/platform-router";
import { PlatformContext } from "../domain/PlatformContext";
import { PlatformApplication } from "./PlatformApplication";
import { PlatformMiddlewaresChain } from "./PlatformMiddlewaresChain";
/**
 * Platform Handler abstraction layer. Wrap original class method to a pure platform handler (Express, Koa, etc...).
 * @platform
 */
export declare class PlatformHandler {
    protected platformRouters: PlatformRouters;
    protected responseFilter: PlatformResponseFilter;
    protected platformParams: PlatformParams;
    protected platformExceptions: PlatformExceptions;
    protected platformApplication: PlatformApplication;
    protected platformMiddlewaresChain: PlatformMiddlewaresChain;
    constructor(platformRouters: PlatformRouters);
    createHandler(handlerMetadata: PlatformHandlerMetadata): any;
    /**
     * @param provider
     * @param propertyKey
     */
    createCustomHandler(provider: Provider, propertyKey: string): ($ctx: PlatformContext) => Promise<any>;
    /**
     * Send the response to the consumer.
     * @protected
     * @param $ctx
     */
    flush($ctx: PlatformContext): Promise<void>;
    /**
     * @param $ctx
     */
    next($ctx: PlatformContext): any;
    /**
     * Call handler when a request his handle
     */
    onRequest(handler: PlatformParamsCallback, $ctx: PlatformContext): Promise<any>;
    onFinish($ctx: PlatformContext): Promise<unknown>;
}
