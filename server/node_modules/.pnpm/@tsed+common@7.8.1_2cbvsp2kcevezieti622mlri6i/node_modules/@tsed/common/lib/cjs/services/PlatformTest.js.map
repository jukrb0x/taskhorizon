{"version":3,"file":"PlatformTest.js","sourceRoot":"","sources":["../../../src/services/PlatformTest.ts"],"names":[],"mappings":"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","sourcesContent":["import {Type} from \"@tsed/core\";\nimport {DITest, InjectorService} from \"@tsed/di\";\nimport accepts from \"accepts\";\nimport {PlatformBuilder} from \"../builder/PlatformBuilder\";\nimport {PlatformContext, PlatformContextOptions} from \"../domain/PlatformContext\";\nimport {createInjector} from \"../utils/createInjector\";\nimport {getConfiguration} from \"../utils/getConfiguration\";\nimport {PlatformAdapter, PlatformBuilderSettings} from \"./PlatformAdapter\";\nimport {PlatformApplication} from \"./PlatformApplication\";\n\n/**\n * @platform\n */\nexport class PlatformTest extends DITest {\n  public static adapter: Type<PlatformAdapter>;\n\n  static async create(settings: Partial<TsED.Configuration> = {}) {\n    DITest.injector = PlatformTest.createInjector(getConfiguration(settings));\n    await DITest.createContainer();\n  }\n\n  /**\n   * Create a new injector with the right default services\n   */\n  static createInjector(settings: any = {}): InjectorService {\n    return createInjector({\n      settings: DITest.configure({httpPort: false, httpsPort: false, ...settings})\n    });\n  }\n\n  /**\n   * Load the server silently without listening port and configure it on test profile.\n   * @decorator\n   * @param mod\n   * @param listen\n   * @param settings\n   * @returns {Promise<void>}\n   */\n  static bootstrap(mod: any, {listen, ...settings}: Partial<PlatformBuilderSettings & {listen: boolean}> = {}): () => Promise<void> {\n    return async function before(): Promise<void> {\n      let instance: PlatformBuilder;\n      const adapter: Type<PlatformAdapter> = settings.platform || settings.adapter || PlatformTest.adapter;\n\n      /* istanbul ignore next */\n      if (!adapter) {\n        throw new Error(\n          \"Platform adapter is not specified. Have you added at least `import @tsed/platform-express` (or equivalent) on your Server.ts ?\"\n        );\n      }\n\n      // @ts-ignore\n      settings = DITest.configure(settings);\n      settings.adapter = adapter as any;\n\n      const configuration = getConfiguration(settings, mod);\n      const disableComponentsScan = configuration.disableComponentsScan || !!process.env.WEBPACK;\n\n      if (!disableComponentsScan) {\n        const {importProviders} = await import(\"@tsed/components-scan\");\n        await importProviders(configuration);\n      }\n\n      instance = await PlatformBuilder.build(mod, configuration).bootstrap();\n      await instance.listen(!!listen);\n\n      // used by inject method\n      DITest.injector = instance.injector;\n    };\n  }\n\n  /**\n   * It injects services into the test function where you can alter, spy on, and manipulate them.\n   *\n   * The inject function has two parameters\n   *\n   * * an array of Service dependency injection tokens,\n   * * a test function whose parameters correspond exactly to each item in the injection token array.\n   *\n   * @param targets\n   * @param func\n   */\n  static inject<T>(targets: any[], func: (...args: any[]) => Promise<T> | T): () => Promise<T> {\n    return async (): Promise<T> => {\n      if (!DITest.hasInjector()) {\n        await PlatformTest.create();\n      }\n\n      const injector: InjectorService = DITest.injector;\n      const deps = [];\n\n      for (const target of targets) {\n        deps.push(injector.has(target) ? injector.get(target) : await injector.invoke(target));\n      }\n\n      return await func(...deps);\n    };\n  }\n\n  /**\n   * Return the raw application (express or koa).\n   * Use this callback with SuperTest.\n   *\n   * ```typescript\n   * let request: SuperTest.SuperTest<SuperTest.Test>;\n   * beforeEach(PlatformTest.bootstrap(Server, {\n   *   mount: {\n   *     \"/rest\": [ProductsController]\n   *   }\n   * }));\n   * beforeEach(() => {\n   *   request = SuperTest(PlatformTest.callback());\n   * });\n   * ```\n   */\n  static callback() {\n    return DITest.injector.get<PlatformApplication>(PlatformApplication)?.callback();\n  }\n\n  static createRequest(options: any = {}): any {\n    return {\n      headers: {},\n      method: \"GET\",\n      url: \"/\",\n      query: {},\n      get(key: string) {\n        return this.headers[key.toLowerCase()];\n      },\n      accepts(mime?: string | string[]) {\n        return accepts(this).types([].concat(mime as never));\n      },\n      ...options\n    };\n  }\n\n  static createResponse(options: any = {}): any {\n    return {\n      headers: {},\n      locals: {},\n      statusCode: 200,\n      status(code: number) {\n        this.statusCode = code;\n        return this;\n      },\n      contentType(content: string) {\n        this.set(\"content-type\", content);\n      },\n      contentLength(content: number) {\n        this.set(\"content-length\", content);\n      },\n      redirect(status: number, path: string) {\n        this.statusCode = status;\n        this.set(\"location\", path);\n      },\n      location(path: string) {\n        this.set(\"location\", path);\n      },\n      get(key: string) {\n        return this.headers[key.toLowerCase()];\n      },\n      getHeaders() {\n        return this.headers;\n      },\n      set(key: string, value: any) {\n        this.headers[key.toLowerCase()] = value;\n        return this;\n      },\n      setHeader(key: string, value: any) {\n        this.headers[key.toLowerCase()] = value;\n        return this;\n      },\n      send(data: any) {\n        this.data = data;\n      },\n      json(data: any) {\n        this.data = data;\n      },\n      end(data: any) {\n        this.data = data;\n      },\n      ...options\n    };\n  }\n\n  static createRequestContext(options: Partial<PlatformContextOptions & any> = {}) {\n    const event = {\n      ...options.event,\n      request: options?.request?.request || options?.event?.request || PlatformTest.createRequest(),\n      response: options?.response?.response || options?.event?.response || PlatformTest.createResponse()\n    };\n\n    const $ctx = new PlatformContext({\n      id: \"id\",\n      injector: DITest.injector,\n      logger: DITest.injector.logger,\n      url: \"/\",\n      ...options,\n      event\n    });\n\n    if (options.endpoint) {\n      $ctx.endpoint = options.endpoint;\n    }\n\n    return $ctx;\n  }\n}\n"]}