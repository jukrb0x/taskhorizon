{"version":3,"file":"PlatformBuilder.js","sourceRoot":"","sources":["../../../src/builder/PlatformBuilder.ts"],"names":[],"mappings":"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","sourcesContent":["import {isFunction, isString, nameOf, Type} from \"@tsed/core\";\nimport {colors, InjectorService, ProviderOpts, setLoggerConfiguration, TokenProvider} from \"@tsed/di\";\nimport {getMiddlewaresForHook, PlatformMiddlewareLoadingOptions} from \"@tsed/platform-middlewares\";\nimport {PlatformLayer} from \"@tsed/platform-router\";\nimport type {IncomingMessage, Server, ServerResponse} from \"http\";\nimport type Https from \"https\";\nimport {PlatformStaticsSettings} from \"../config/interfaces/PlatformStaticsSettings\";\nimport {PlatformRouteDetails} from \"../domain/PlatformRouteDetails\";\nimport {Route} from \"../interfaces/Route\";\nimport {Platform} from \"../services/Platform\";\nimport {PlatformAdapter, PlatformBuilderSettings} from \"../services/PlatformAdapter\";\nimport {PlatformApplication} from \"../services/PlatformApplication\";\nimport {createHttpServer} from \"../utils/createHttpServer\";\nimport {createHttpsServer} from \"../utils/createHttpsServer\";\nimport {createInjector} from \"../utils/createInjector\";\nimport {getConfiguration} from \"../utils/getConfiguration\";\nimport {getStaticsOptions} from \"../utils/getStaticsOptions\";\nimport {printRoutes} from \"../utils/printRoutes\";\n\n/**\n * @platform\n */\nexport class PlatformBuilder<App = TsED.Application> {\n  public static adapter: Type<PlatformAdapter<any>>;\n\n  readonly name: string = \"\";\n  protected startedAt = new Date();\n  protected current = new Date();\n  readonly #injector: InjectorService;\n  readonly #rootModule: Type<any>;\n  readonly #adapter: PlatformAdapter<App>;\n  #promise: Promise<this>;\n  #servers: (() => Promise<Server | Https.Server>)[];\n  #listeners: (Server | Https.Server)[] = [];\n\n  protected constructor(adapter: Type<PlatformAdapter<App>> | undefined, module: Type, settings: Partial<TsED.Configuration>) {\n    this.#rootModule = module;\n\n    const configuration = getConfiguration(settings, module);\n    const adapterKlass: Type<PlatformAdapter<App>> = adapter || (PlatformBuilder.adapter as any);\n    const name = nameOf(adapterKlass).replace(\"Platform\", \"\").toLowerCase();\n\n    configuration.PLATFORM_NAME = name;\n    this.name = name;\n\n    this.#injector = createInjector({\n      adapter: adapterKlass,\n      settings: configuration\n    });\n\n    this.#adapter = this.#injector.get<PlatformAdapter<App>>(PlatformAdapter)!;\n\n    this.createHttpServers();\n\n    this.#adapter.onInit && this.#adapter.onInit();\n\n    this.log(\"Injector created...\");\n  }\n\n  get injector(): InjectorService {\n    return this.#injector;\n  }\n\n  get rootModule(): any {\n    return this.#injector.get(this.#rootModule);\n  }\n\n  get app(): PlatformApplication<App> {\n    return this.injector.get<PlatformApplication<App>>(PlatformApplication)!;\n  }\n\n  get platform() {\n    return this.injector.get<Platform>(Platform)!;\n  }\n\n  get adapter() {\n    return this.#adapter;\n  }\n\n  /**\n   * Return the settings configured by the decorator @@Configuration@@.\n   *\n   * ```typescript\n   * @Configuration({\n   *    rootDir: Path.resolve(__dirname),\n   *    port: 8000,\n   *    httpsPort: 8080,\n   *    mount: {\n   *      \"/rest\": \"${rootDir}/controllers/**\\/*.js\"\n   *    }\n   * })\n   * export class Server {\n   *     $onInit(){\n   *         console.log(this.settings); // {rootDir, port, httpsPort,...}\n   *     }\n   * }\n   * ```\n   *\n   * @returns {PlatformConfiguration}\n   */\n  get settings() {\n    return this.injector.settings;\n  }\n\n  get logger() {\n    return this.injector.logger;\n  }\n\n  get disableBootstrapLog() {\n    return this.settings.get(\"logger.disableBootstrapLog\");\n  }\n\n  static create<App = TsED.Application>(module: Type<any>, settings: PlatformBuilderSettings<App>) {\n    return this.build(module, {\n      httpsPort: false,\n      httpPort: false,\n      ...settings\n    });\n  }\n\n  static build<App = TsED.Application>(module: Type<any>, {adapter, ...settings}: PlatformBuilderSettings<App>) {\n    return new PlatformBuilder(adapter, module, settings);\n  }\n\n  /**\n   * Bootstrap a server application\n   * @param module\n   * @param settings\n   */\n  static async bootstrap<App = TsED.Application>(module: Type<any>, settings: PlatformBuilderSettings<App>) {\n    return this.build<App>(module, settings).bootstrap();\n  }\n\n  callback(): (req: IncomingMessage, res: ServerResponse) => void;\n  callback(req: IncomingMessage, res: ServerResponse): void;\n  callback(req?: IncomingMessage, res?: ServerResponse) {\n    if (req && res) {\n      return this.callback()(req, res);\n    }\n\n    return this.app.callback();\n  }\n\n  log(...data: any[]) {\n    return !this.disableBootstrapLog && this.logger.info(...data, this.diff());\n  }\n\n  /**\n   * Add classes to the components list\n   * @param classes\n   */\n  public addComponents(classes: Type | Type[]) {\n    this.settings.set(\"imports\", this.settings.get<any[]>(\"imports\", []).concat(classes));\n\n    return this;\n  }\n\n  /**\n   * Add classes decorated by @@Controller@@ to components container.\n   *\n   * ### Example\n   *\n   * ```typescript\n   * @Controller('/ctrl')\n   * class MyController{\n   * }\n   *\n   * platform.addControllers('/rest', [MyController])\n   * ```\n   *\n   * ::: tip\n   * If the MyController class isn't decorated, the class will be ignored.\n   * :::\n   *\n   * @param {string} endpoint\n   * @param {any[]} controllers\n   */\n  public addControllers(endpoint: string, controllers: TokenProvider | TokenProvider[]) {\n    [].concat(controllers).forEach((token) => {\n      this.settings.routes.push({token, route: endpoint});\n    });\n  }\n\n  public async runLifecycle() {\n    setLoggerConfiguration(this.injector);\n\n    await this.mapTokenMiddlewares();\n\n    await this.loadInjector();\n\n    this.#adapter.useContext();\n\n    await this.loadRoutes();\n\n    return this;\n  }\n\n  async loadInjector() {\n    const {injector} = this;\n    this.log(\"Build providers\");\n\n    await injector.loadModule(this.#rootModule);\n\n    this.log(\"Settings and injector loaded...\");\n\n    await this.callHook(\"$afterInit\");\n  }\n\n  async listen(network = true) {\n    if (!this.#promise) {\n      await this.bootstrap();\n    }\n\n    await this.callHook(\"$beforeListen\");\n\n    if (network) {\n      await this.listenServers();\n    }\n\n    await this.callHook(\"$afterListen\");\n\n    await this.ready();\n  }\n\n  async stop() {\n    await this.callHook(\"$onDestroy\");\n    await this.injector.destroy();\n\n    this.#listeners.map((server) => {\n      return new Promise((resolve) => server.close(() => resolve(undefined)));\n    });\n  }\n\n  public async ready() {\n    const {startedAt} = this;\n\n    await this.callHook(\"$onReady\");\n    await this.injector.emit(\"$onServerReady\");\n\n    this.log(`Started in ${new Date().getTime() - startedAt.getTime()} ms`);\n  }\n\n  async callHook(hook: string, ...args: any[]) {\n    const {injector} = this;\n\n    if (!this.disableBootstrapLog) {\n      injector.logger.debug(`\\x1B[1mCall hook ${hook}\\x1B[22m`);\n    }\n\n    // Load middlewares for the given hook\n    this.loadMiddlewaresFor(hook);\n\n    // call hooks added by providers\n    await injector.emit(hook, ...args);\n  }\n\n  async loadStatics(hook: string): Promise<void> {\n    const statics = this.settings.get<PlatformStaticsSettings>(\"statics\");\n\n    getStaticsOptions(statics).forEach(({path, options}) => {\n      if (options.hook === hook) {\n        this.platform.app.statics(path, options);\n      }\n    });\n  }\n\n  useProvider(token: Type<any>, settings?: Partial<ProviderOpts>) {\n    this.injector.addProvider(token, settings);\n\n    return this;\n  }\n\n  async bootstrap() {\n    this.#promise = this.#promise || this.runLifecycle();\n\n    return this.#promise;\n  }\n\n  protected async loadRoutes() {\n    this.#adapter.beforeLoadRoutes && (await this.#adapter.beforeLoadRoutes());\n\n    // istanbul ignore next\n    if (this.settings.get(\"logger.level\") !== \"off\") {\n      const {PlatformLogMiddleware} = await import(\"@tsed/platform-log-middleware\");\n      this.app.use(PlatformLogMiddleware);\n    }\n\n    this.log(\"Load routes\");\n\n    if (this.rootModule.$beforeRoutesInit) {\n      await this.rootModule.$beforeRoutesInit();\n      this.rootModule.$beforeRoutesInit = () => {};\n    }\n\n    await this.loadStatics(\"$beforeRoutesInit\");\n    await this.callHook(\"$beforeRoutesInit\");\n\n    const routes = this.injector.settings.get<Route[]>(\"routes\");\n\n    this.platform.addRoutes(routes);\n\n    await this.callHook(\"$onRoutesInit\");\n\n    await this.loadStatics(\"$afterRoutesInit\");\n\n    await this.callHook(\"$afterRoutesInit\");\n\n    this.#adapter.afterLoadRoutes && (await this.#adapter.afterLoadRoutes());\n\n    await this.mapRouters();\n  }\n\n  protected async mapRouters() {\n    const layers = this.platform.getLayers();\n\n    this.#adapter.mapLayers(layers);\n\n    const rawBody =\n      this.settings.get(\"rawBody\") ||\n      layers.some(({handlers}) => {\n        return handlers.some((handler) => handler.opts?.paramsTypes?.RAW_BODY);\n      });\n\n    this.settings.set(\"rawBody\", rawBody);\n\n    return this.logRoutes(layers.filter((layer) => layer.isProvider()));\n  }\n\n  protected diff() {\n    const ms = colors.yellow(`+${new Date().getTime() - this.current.getTime()}ms`);\n    this.current = new Date();\n    return ms;\n  }\n\n  /**\n   * Load middlewares from configuration for the given hook\n   * @param hook\n   * @protected\n   */\n  protected loadMiddlewaresFor(hook: string): void {\n    return getMiddlewaresForHook(hook, this.settings, \"$beforeRoutesInit\").forEach(({use}) => {\n      this.app.use(use);\n    });\n  }\n\n  protected createHttpServers() {\n    this.#servers = [createHttpServer(this.#injector, this.callback()), createHttpsServer(this.#injector, this.callback())].filter(\n      Boolean\n    ) as any[];\n  }\n\n  protected async listenServers(): Promise<void> {\n    this.#listeners = await Promise.all(this.#servers.map((cb) => cb && cb()));\n  }\n\n  protected async logRoutes(layers: PlatformLayer[]) {\n    const {logger} = this;\n\n    this.log(\"Routes mounted...\");\n\n    if (!this.settings.get(\"logger.disableRoutesSummary\") && !this.disableBootstrapLog) {\n      const routes: PlatformRouteDetails[] = layers.map((layer) => {\n        return {\n          url: layer.path,\n          method: layer.method,\n          name: layer.opts.name || `${layer.provider.className}.constructor()`,\n          className: layer.opts.className || layer.provider.className,\n          methodClassName: layer.opts.methodClassName || \"\"\n        } as PlatformRouteDetails;\n      });\n\n      logger.info(printRoutes(await this.injector.alterAsync(\"$logRoutes\", routes)));\n    }\n  }\n\n  protected async mapTokenMiddlewares() {\n    let middlewares = this.injector.settings.get<PlatformMiddlewareLoadingOptions[]>(\"middlewares\", []);\n    const {env} = this.injector.settings;\n    const defaultHook = \"$beforeRoutesInit\";\n\n    const promises = middlewares.map(async (middleware: PlatformMiddlewareLoadingOptions): Promise<PlatformMiddlewareLoadingOptions> => {\n      if (isFunction(middleware)) {\n        return {\n          env,\n          hook: defaultHook,\n          use: middleware\n        };\n      }\n\n      if (isString(middleware)) {\n        middleware = {env, use: middleware, hook: defaultHook};\n      }\n\n      let {use, options} = middleware;\n\n      if (isString(use)) {\n        if ([\"text-parser\", \"raw-parser\", \"json-parser\", \"urlencoded-parser\"].includes(use)) {\n          use = this.adapter.bodyParser(use.replace(\"-parser\", \"\"), options);\n        } else {\n          const mod = await import(use);\n          use = (mod.default || mod)(options);\n        }\n      }\n\n      return {\n        env,\n        hook: defaultHook,\n        ...middleware,\n        use\n      };\n    });\n\n    middlewares = await Promise.all(promises);\n\n    this.injector.settings.set(\"middlewares\", middlewares);\n  }\n}\n"]}