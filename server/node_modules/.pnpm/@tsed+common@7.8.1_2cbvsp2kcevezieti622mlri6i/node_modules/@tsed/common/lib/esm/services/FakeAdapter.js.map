{"version":3,"file":"FakeAdapter.js","sourceRoot":"","sources":["../../../src/services/FakeAdapter.ts"],"names":[],"mappings":"AAOA,MAAM,OAAO,WAAW;IACtB,SAAS,GAAmB,EAAE,CAAC;IAE/B,MAAM,CAAC,mBAAmB;QACxB,uBAAuB;QACvB,SAAS,aAAa,KAAI,CAAC;QAE3B,uBAAuB;QACvB,SAAS,GAAG;YACV,OAAO,IAAI,CAAC;QACd,CAAC;QAED,aAAa,CAAC,GAAG,GAAG,GAAG,CAAC;QACxB,aAAa,CAAC,GAAG,GAAG,GAAG,CAAC;QACxB,aAAa,CAAC,GAAG,GAAG,GAAG,CAAC;QACxB,aAAa,CAAC,KAAK,GAAG,GAAG,CAAC;QAC1B,aAAa,CAAC,IAAI,GAAG,GAAG,CAAC;QACzB,aAAa,CAAC,GAAG,GAAG,GAAG,CAAC;QACxB,aAAa,CAAC,IAAI,GAAG,GAAG,CAAC;QACzB,aAAa,CAAC,MAAM,GAAG,GAAG,CAAC;QAC3B,aAAa,CAAC,OAAO,GAAG,GAAG,CAAC;QAE5B,OAAO,aAAa,CAAC;IACvB,CAAC;IAED,GAAG;QACD,MAAM,GAAG,GAAG,WAAW,CAAC,mBAAmB,EAAE,CAAC;QAC9C,OAAO;YACL,GAAG;YACH,QAAQ;gBACN,OAAO,GAAG,CAAC;YACb,CAAC;SACF,CAAC;IACJ,CAAC;IAED,SAAS,CAAC,OAA+B;QACvC,OAAO,EAAS,CAAC;IACnB,CAAC;IAED,OAAO,CAAC,QAAgB,EAAE,OAA+B;QACvD,OAAO,EAAE,CAAC;IACZ,CAAC;IAED,UAAU,CAAC,IAAY;QACrB,OAAO,GAAG,EAAE,GAAE,CAAC,CAAC;IAClB,CAAC;IAED,SAAS,CAAC,MAAuB,IAAG,CAAC;IAErC,UAAU,CAAC,OAAgD;QACzD,OAAO,OAAO,CAAC;IACjB,CAAC;IAED,UAAU,KAAI,CAAC;CAChB","sourcesContent":["import {ProviderOpts} from \"@tsed/di\";\nimport {PlatformContextHandler, PlatformLayer} from \"@tsed/platform-router\";\nimport {PlatformMulter, PlatformMulterSettings} from \"../config/interfaces/PlatformMulterSettings\";\nimport {PlatformStaticsOptions} from \"../config/interfaces/PlatformStaticsSettings\";\nimport {PlatformContext} from \"../domain/PlatformContext\";\nimport {PlatformAdapter} from \"./PlatformAdapter\";\n\nexport class FakeAdapter implements PlatformAdapter<any> {\n  providers: ProviderOpts[] = [];\n\n  static createFakeRawDriver() {\n    // istanbul ignore next\n    function FakeRawDriver() {}\n\n    // istanbul ignore next\n    function use() {\n      return this;\n    }\n\n    FakeRawDriver.use = use;\n    FakeRawDriver.all = use;\n    FakeRawDriver.get = use;\n    FakeRawDriver.patch = use;\n    FakeRawDriver.post = use;\n    FakeRawDriver.put = use;\n    FakeRawDriver.head = use;\n    FakeRawDriver.delete = use;\n    FakeRawDriver.options = use;\n\n    return FakeRawDriver;\n  }\n\n  app(): {app: any; callback(): any} {\n    const app = FakeAdapter.createFakeRawDriver();\n    return {\n      app,\n      callback() {\n        return app;\n      }\n    };\n  }\n\n  multipart(options: PlatformMulterSettings): PlatformMulter {\n    return {} as any;\n  }\n\n  statics(endpoint: string, options: PlatformStaticsOptions): any {\n    return {};\n  }\n\n  bodyParser(type: string): any {\n    return () => {};\n  }\n\n  mapLayers(layers: PlatformLayer[]) {}\n\n  mapHandler(handler: PlatformContextHandler<PlatformContext>) {\n    return handler;\n  }\n\n  useContext() {}\n}\n"]}