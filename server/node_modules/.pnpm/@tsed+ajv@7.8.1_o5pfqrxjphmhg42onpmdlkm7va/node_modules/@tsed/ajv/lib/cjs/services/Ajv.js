"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@tsed/core");
const di_1 = require("@tsed/di");
const ajv_1 = tslib_1.__importDefault(require("ajv"));
const ajv_formats_1 = tslib_1.__importDefault(require("ajv-formats"));
function getHandler(key, service) {
    if (service[key]) {
        return service[key].bind(service);
    }
}
function getKeywordProviders(injector) {
    return injector.getProviders("ajv:keyword");
}
function bindKeywords(injector) {
    return getKeywordProviders(injector).map((provider) => {
        const options = provider.store.get("ajv:keyword", {});
        const service = injector.invoke(provider.token);
        return (0, core_1.cleanObject)({
            coerceTypes: "array",
            ...options,
            validate: getHandler("validate", service),
            compile: getHandler("compile", service),
            code: getHandler("code", service),
            macro: getHandler("macro", service)
        });
    });
}
function getFormatsProviders(injector) {
    return injector.getProviders("ajv:formats");
}
function getFormats(injector) {
    return getFormatsProviders(injector).map((provider) => {
        const { name, options } = provider.store.get("ajv:formats", {});
        const service = injector.invoke(provider.token);
        return {
            name,
            options: {
                ...options,
                validate: service.validate.bind(service),
                compare: service.compare?.bind(service)
            }
        };
    });
}
(0, di_1.registerProvider)({
    provide: ajv_1.default,
    deps: [di_1.Configuration, di_1.InjectorService],
    scope: di_1.ProviderScope.SINGLETON,
    useFactory(configuration, injector) {
        const { errorFormatter, keywords = [], ...props } = configuration.get("ajv") || {};
        const options = {
            verbose: false,
            coerceTypes: true,
            strict: false,
            keywords: [...keywords, ...bindKeywords(injector)],
            discriminator: true,
            ...props
        };
        const ajv = new ajv_1.default(options);
        (0, ajv_formats_1.default)(ajv);
        getFormats(injector).forEach(({ name, options }) => {
            ajv.addFormat(name, options);
        });
        return ajv;
    }
});
//# sourceMappingURL=Ajv.js.map