import { __decorate, __metadata } from "tslib";
import { CliService, Inject, OnExec, ProjectPackageJson } from "@tsed/cli-core";
import { Injectable } from "@tsed/di";
import { CliPrisma } from "../services/CliPrisma.js";
let PrismaInitHook = class PrismaInitHook {
    cliPrisma;
    cliService;
    packageJson;
    async onExec(ctx) {
        this.addScripts();
        this.addDependencies(ctx);
        this.addDevDependencies(ctx);
        return [
            {
                title: "Generate Prisma schema",
                task: () => this.cliPrisma.init()
            },
            {
                title: "Add Ts.ED configuration to Prisma schema",
                task: () => this.cliPrisma.patchPrismaSchema()
            }
        ];
    }
    addScripts() {
        this.packageJson.addScripts({
            "prisma:migrate": "npx prisma migrate dev --name init",
            "prisma:generate": "npx prisma generate"
        });
    }
    addDependencies(ctx) {
        this.packageJson.addDependencies({
            "@tsed/prisma": "latest",
            "@prisma/client": "latest"
        }, ctx);
    }
    addDevDependencies(ctx) {
        this.packageJson.addDevDependencies({
            prisma: "latest"
        }, ctx);
    }
    $onFinish() {
        return new Promise((resolve) => {
            this.packageJson.runScript("prisma:generate").subscribe({
                complete() {
                    resolve([]);
                },
                error: () => {
                    resolve([]);
                }
            });
        });
    }
};
__decorate([
    Inject(),
    __metadata("design:type", CliPrisma)
], PrismaInitHook.prototype, "cliPrisma", void 0);
__decorate([
    Inject(),
    __metadata("design:type", CliService)
], PrismaInitHook.prototype, "cliService", void 0);
__decorate([
    Inject(),
    __metadata("design:type", ProjectPackageJson)
], PrismaInitHook.prototype, "packageJson", void 0);
__decorate([
    OnExec("init"),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], PrismaInitHook.prototype, "onExec", null);
PrismaInitHook = __decorate([
    Injectable()
], PrismaInitHook);
export { PrismaInitHook };
//# sourceMappingURL=PrismaInitHook.js.map