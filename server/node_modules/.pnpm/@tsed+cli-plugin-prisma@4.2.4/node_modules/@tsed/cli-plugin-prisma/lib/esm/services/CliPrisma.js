import { __decorate, __metadata } from "tslib";
import { CliExeca, CliFs, Inject, ProjectPackageJson } from "@tsed/cli-core";
import { Injectable } from "@tsed/di";
let CliPrisma = class CliPrisma {
    cliExeca;
    cliFs;
    projectPackageJson;
    run(command, args = [], options = {}) {
        return this.cliExeca.run("npx", ["prisma", command, ...args], {
            ...options,
            cwd: this.projectPackageJson.dir
        });
    }
    init() {
        return this.run("init");
    }
    async patchPrismaSchema() {
        const schemaPath = this.cliFs.join(this.projectPackageJson.dir, "prisma", "schema.prisma");
        if (this.cliFs.exists(schemaPath)) {
            let content = await this.cliFs.readFile(schemaPath, "utf8");
            if (!content.includes("generator tsed")) {
                content += "\ngenerator tsed {\n" + '  provider = "tsed-prisma"\n' + "}\n";
                content +=
                    "\nmodel User {\n" +
                        "  id    Int     @default(autoincrement()) @id\n" +
                        "  email String  @unique\n" +
                        "  name  String?\n" +
                        "}\n";
                return this.cliFs.writeFile(schemaPath, content, { encoding: "utf8" });
            }
        }
    }
};
__decorate([
    Inject(),
    __metadata("design:type", CliExeca)
], CliPrisma.prototype, "cliExeca", void 0);
__decorate([
    Inject(),
    __metadata("design:type", CliFs)
], CliPrisma.prototype, "cliFs", void 0);
__decorate([
    Inject(),
    __metadata("design:type", ProjectPackageJson)
], CliPrisma.prototype, "projectPackageJson", void 0);
CliPrisma = __decorate([
    Injectable()
], CliPrisma);
export { CliPrisma };
//# sourceMappingURL=CliPrisma.js.map