{"version":3,"file":"CliPrisma.js","sourceRoot":"","sources":["../../../src/services/CliPrisma.ts"],"names":[],"mappings":";AAAA,OAAO,EAAC,QAAQ,EAAE,KAAK,EAAE,MAAM,EAAE,kBAAkB,EAAC,MAAM,gBAAgB,CAAC;AAC3E,OAAO,EAAC,UAAU,EAAC,MAAM,UAAU,CAAC;AAG7B,IAAM,SAAS,GAAf,MAAM,SAAS;IAEV,QAAQ,CAAW;IAGnB,KAAK,CAAQ;IAGb,kBAAkB,CAAqB;IAEjD,GAAG,CAAC,OAAe,EAAE,OAAiB,EAAE,EAAE,UAAe,EAAE;QACzD,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,QAAQ,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC,EAAE;YAC5D,GAAG,OAAO;YACV,GAAG,EAAE,IAAI,CAAC,kBAAkB,CAAC,GAAG;SACjC,CAAC,CAAC;IACL,CAAC;IAED,IAAI;QACF,OAAO,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IAC1B,CAAC;IAED,KAAK,CAAC,iBAAiB;QACrB,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,GAAG,EAAE,QAAQ,EAAE,eAAe,CAAC,CAAC;QAE3F,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE;YACjC,IAAI,OAAO,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;YAE5D,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,gBAAgB,CAAC,EAAE;gBACvC,OAAO,IAAI,sBAAsB,GAAG,8BAA8B,GAAG,KAAK,CAAC;gBAC3E,OAAO;oBACL,kBAAkB;wBAClB,iDAAiD;wBACjD,2BAA2B;wBAC3B,mBAAmB;wBACnB,KAAK,CAAC;gBAER,OAAO,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,UAAU,EAAE,OAAO,EAAE,EAAC,QAAQ,EAAE,MAAM,EAAC,CAAC,CAAC;aACtE;SACF;IACH,CAAC;CACF,CAAA;AAvCC;IAAC,MAAM,EAAE;8BACW,QAAQ;2CAAC;AAE7B;IAAC,MAAM,EAAE;8BACQ,KAAK;wCAAC;AAEvB;IAAC,MAAM,EAAE;8BACqB,kBAAkB;qDAAC;AARtC,SAAS;IADrB,UAAU,EAAE;GACA,SAAS,CAwCrB;SAxCY,SAAS","sourcesContent":["import {CliExeca, CliFs, Inject, ProjectPackageJson} from \"@tsed/cli-core\";\nimport {Injectable} from \"@tsed/di\";\n\n@Injectable()\nexport class CliPrisma {\n  @Inject()\n  protected cliExeca: CliExeca;\n\n  @Inject()\n  protected cliFs: CliFs;\n\n  @Inject()\n  protected projectPackageJson: ProjectPackageJson;\n\n  run(command: string, args: string[] = [], options: any = {}) {\n    return this.cliExeca.run(\"npx\", [\"prisma\", command, ...args], {\n      ...options,\n      cwd: this.projectPackageJson.dir\n    });\n  }\n\n  init() {\n    return this.run(\"init\");\n  }\n\n  async patchPrismaSchema() {\n    const schemaPath = this.cliFs.join(this.projectPackageJson.dir, \"prisma\", \"schema.prisma\");\n\n    if (this.cliFs.exists(schemaPath)) {\n      let content = await this.cliFs.readFile(schemaPath, \"utf8\");\n\n      if (!content.includes(\"generator tsed\")) {\n        content += \"\\ngenerator tsed {\\n\" + '  provider = \"tsed-prisma\"\\n' + \"}\\n\";\n        content +=\n          \"\\nmodel User {\\n\" +\n          \"  id    Int     @default(autoincrement()) @id\\n\" +\n          \"  email String  @unique\\n\" +\n          \"  name  String?\\n\" +\n          \"}\\n\";\n\n        return this.cliFs.writeFile(schemaPath, content, {encoding: \"utf8\"});\n      }\n    }\n  }\n}\n"]}